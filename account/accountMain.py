from tokenize import group
from seleniumwire import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
import selenium
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import ElementClickInterceptedException, TimeoutException
import time
import asyncio
import threading
import random
import sys
import os
import re
import tempfile
import shutil
import platform
import json
from typing import List, Dict


sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from AIwork import *
from shilingLogs import add_log_entry, get_current_datetime
from addLogsShilling import add_log_entry_to_sheet, get_current_datetime as get_current_datetime_shilling
from googleTableSubscriptionsLinks import get_all_links
from googleTableUpdateStatistsc import increase_comments, increase_like, increase_post, increase_retwits, increase_subscriptions
from googleDriveImage import get_random_image_from_drive, delete_image_by_name
# –î–æ–¥–∞—î–º–æ —ñ–º–ø–æ—Ä—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Google —Ç–∞–±–ª–∏—Ü—è–º–∏
try:
    from googleTable import mark_account_as_bad
    GOOGLE_TABLE_AVAILABLE = True
    print("‚úÖ –ú–æ–¥—É–ª—å Google —Ç–∞–±–ª–∏—Ü—å —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
except ImportError as e:
    GOOGLE_TABLE_AVAILABLE = False
    print(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å Google —Ç–∞–±–ª–∏—Ü—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")

subscriptions_lock = asyncio.Lock()

async def handle_bad_account(account, reason="no_posts_count >= 20"):
    """–û–±—Ä–æ–±–ª—è—î –∞–∫–∞—É–Ω—Ç, —è–∫–∏–π –º–∞—î –ø—Ä–æ–±–ª–µ–º–∏ –∑ –ø–æ—à—É–∫–æ–º –ø–æ—Å—Ç—ñ–≤"""
    try:
        print(f"üö® –ê–∫–∞—É–Ω—Ç {account.username} –º–∞—î –ø—Ä–æ–±–ª–µ–º–∏ –∑ –ø–æ—à—É–∫–æ–º –ø–æ—Å—Ç—ñ–≤: {reason}")
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ñ–ª–∞–≥ –∑—É–ø–∏–Ω–∫–∏ –¥–ª—è –∞–∫–∞—É–Ω—Ç–∞
        if hasattr(account, '_stop_requested'):
            account._stop_requested = True
            print(f"üõë –§–ª–∞–≥ –∑—É–ø–∏–Ω–∫–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∞–∫–∞—É–Ω—Ç–∞ {account.username}")
        
        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –±—Ä–∞—É–∑–µ—Ä
        if hasattr(account, 'driver') and account.driver:
            try:
                print(f"üîí –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–∫–∞—É–Ω—Ç–∞ {account.username}...")
                account.driver.quit()
                print(f"‚úÖ –ë—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–∫–∞—É–Ω—Ç–∞ {account.username} —É—Å–ø—ñ—à–Ω–æ –∑–∞–∫—Ä–∏—Ç–æ")
            except Exception as e:
                print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
                try:
                    account.driver.close()
                    print(f"‚úÖ –ë—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–∫–∞—É–Ω—Ç–∞ {account.username} –∑–∞–∫—Ä–∏—Ç–æ —á–µ—Ä–µ–∑ close()")
                except Exception as close_error:
                    print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–∫—Ä–∏—Ç–∏ –±—Ä–∞—É–∑–µ—Ä: {close_error}")
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∞–∫–∞—É–Ω—Ç –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤ streamHelper —Ç–∞ stream_helper
        try:
            # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑ streamHelper
            try:
                from streamHelper import StreamManager
                # –®—É–∫–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –µ–∫–∑–µ–º–ø–ª—è—Ä–∏ StreamManager
                import gc
                stream_manager = None
                for obj in gc.get_objects():
                    if isinstance(obj, StreamManager):
                        stream_manager = obj
                        break
                
                if stream_manager:
                    stream_manager.remove_account_from_streams(account.username, account.auth_token)
                    print(f"‚úÖ –ê–∫–∞—É–Ω—Ç {account.username} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ streamHelper")
                else:
                    print("‚ö†Ô∏è StreamManager –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç")
            except ImportError:
                print("‚ö†Ô∏è streamHelper –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
            except Exception as e:
                print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑ streamHelper: {e}")
            
            # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑ stream_helper (—à–∏–ª—ñ–Ω–≥)
            try:
                # –®—É–∫–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –µ–∫–∑–µ–º–ø–ª—è—Ä–∏ ShillingStreamHelper
                import gc
                from working_solution.stream_helper import ShillingStreamHelper
                
                for obj in gc.get_objects():
                    if isinstance(obj, ShillingStreamHelper):
                        if account.username in obj.active_tasks:
                            obj.remove_account_from_tasks(account.username, account.auth_token)
                            print(f"‚úÖ –ê–∫–∞—É–Ω—Ç {account.username} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ stream_helper —à–∏–ª—ñ–Ω–≥—É")
                            break
                else:
                    print("‚ö†Ô∏è ShillingStreamHelper –∑ –∞–∫–∞—É–Ω—Ç–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            except ImportError:
                print("‚ö†Ô∏è stream_helper –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
            except Exception as e:
                print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑ stream_helper: {e}")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∞–∫–∞—É–Ω—Ç–∞ –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤: {e}")
        
        # –ü–æ–∑–Ω–∞—á–∞—î–º–æ –∞–∫–∞—É–Ω—Ç —è–∫ Bad –≤ Google —Ç–∞–±–ª–∏—Ü—ñ
        if GOOGLE_TABLE_AVAILABLE:
            try:
                await mark_account_as_bad(account.auth_token, reason)
                print(f"‚úÖ –ê–∫–∞—É–Ω—Ç {account.username} –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ Bad –≤ Google —Ç–∞–±–ª–∏—Ü—ñ")
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—ñ –∞–∫–∞—É–Ω—Ç–∞ —è–∫ Bad: {e}")
        else:
            print("‚ö†Ô∏è Google —Ç–∞–±–ª–∏—Ü—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–∑–Ω–∞—á–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç —è–∫ Bad")
        
        # –í–∏–∫–∏–¥–∞—î–º–æ –≤–∏–Ω—è—Ç–æ–∫, —â–æ–± –∑—É–ø–∏–Ω–∏—Ç–∏ –æ–±—Ä–æ–±–∫—É –∞–∫–∞—É–Ω—Ç–∞
        raise Exception(f"–ê–∫–∞—É–Ω—Ç {account.username} –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ Bad —á–µ—Ä–µ–∑ {reason}")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≥–∞–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞ {account.username}: {e}")
        raise e


class Account:
    def __init__(self, usernameIn, password, auth_tokenIn, ct0In, watm_up_days, status, unique_group, proxy=None):
        self.username = usernameIn
        self.password = password
        self.auth_token = auth_tokenIn
        self.watm_up_days = watm_up_days
        self.status = status
        self.unique_group = unique_group
        self.ct0 = ct0In
        self.proxy = proxy
        
        # –§–ª–∞–≥ –¥–ª—è –∑—É–ø–∏–Ω–∫–∏ –∞–∫–∞—É–Ω—Ç–∞
        self._stop_requested = False

        
        chrome_options = webdriver.ChromeOptions()
        chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
        chrome_options.add_argument("--headless=new")
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ –∑ –ø—Ä–æ–∫—Å—ñ
        chrome_options.add_argument("--disable-web-security")
        chrome_options.add_argument("--allow-running-insecure-content")
        chrome_options.add_argument("--disable-features=VizDisplayCompositor")
        chrome_options.add_argument("--disable-extensions")
        chrome_options.add_argument("--disable-plugins")
        chrome_options.add_argument("--disable-images")
        chrome_options.add_argument("--disable-quic")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        
        # ... —É—Å–µ—Ä–µ–¥–∏–Ω—ñ __init__ –ø—ñ—Å–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è chrome_options
        # –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –≤–∏–º–∫–Ω—É—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ prefs (–∞ –Ω–µ –ø—Ä–∞–ø–æ—Ä—Ü—ñ)
        prefs = {"profile.managed_default_content_settings.images": 2}
        chrome_options.add_experimental_option("prefs", prefs)
        
        # Linux-specific stability flags and unique profile directory
        self._temp_user_data_dir = None
        if platform.system() == 'Linux':
            self._temp_user_data_dir = tempfile.mkdtemp(prefix="chrome-profile-")
            chrome_options.add_argument(f"--user-data-dir={self._temp_user_data_dir}")
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            # —è–∫—â–æ chrome –≤ —ñ–Ω—à–æ–º—É –º—ñ—Å—Ü—ñ ‚Äî –ø—ñ–¥–±–µ—Ä–µ—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∞–±–æ fallback
            chrome_bin = shutil.which("google-chrome") or shutil.which("google-chrome-stable") or "/usr/bin/google-chrome"
            chrome_options.binary_location = chrome_bin
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument("--remote-debugging-port=0")
        
        # --- –ü–†–û–ö–°–Ü: –∞–∫—É—Ä–∞—Ç–Ω—ñ –≤—ñ–¥—Å—Ç—É–ø–∏ —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –¥–≤–æ—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ ---
        if self.proxy:
            try:
                raw = re.sub(r'[;\s]+$', '', self.proxy.strip())
                if '@' in raw:
                    auth_part, server_part = raw.split('@', 1)
                    proxy_username, proxy_password = auth_part.split(':', 1)
                    proxy_address, proxy_port = server_part.split(':', 1)
                else:
                    parts = raw.split(':')
                    if len(parts) == 4:
                        proxy_address, proxy_port, proxy_username, proxy_password = parts
                    else:
                        print(f"‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å—ñ: {self.proxy}")
                        print("[INFO] –ó–∞–ø—É—Å–∫ –±–µ–∑ –ø—Ä–æ–∫—Å—ñ")
                        self.driver = webdriver.Chrome(options=chrome_options)
                        self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
                        return
        
                proxy_url = f"http://{proxy_username}:{proxy_password}@{proxy_address}:{proxy_port}"
                seleniumwire_options = {
                    "proxy": {
                        "http": proxy_url,
                        "https": proxy_url,
                        "no_proxy": "localhost,127.0.0.1"
                    },
                    "connection_timeout": 30,
                    "verify_ssl": False,
                    "suppress_connection_errors": False
                }
        
                print(f"[INFO] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø—Ä–æ–∫—Å—ñ: {proxy_address}:{proxy_port}")
                self.driver = webdriver.Chrome(
                    seleniumwire_options=seleniumwire_options,
                    options=chrome_options,
                )
        
                try:
                    self.driver.get("https://httpbin.org/ip")
                    time.sleep(2)
                    print("‚úÖ –ü—Ä–æ–∫—Å—ñ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ")
                except Exception as proxy_test_error:
                    print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ: {proxy_test_error}")
                    print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–µ–∑ –ø—Ä–æ–∫—Å—ñ...")
                    try:
                        self.driver.quit()
                    except Exception:
                        pass
                    self.driver = webdriver.Chrome(options=chrome_options)
        
            except Exception as proxy_error:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ: {proxy_error}")
                print("[INFO] –ó–∞–ø—É—Å–∫ –±–µ–∑ –ø—Ä–æ–∫—Å—ñ")
                self.driver = webdriver.Chrome(options=chrome_options)
        else:
            print("[INFO] –ó–∞–ø—É—Å–∫ –±–µ–∑ –ø—Ä–æ–∫—Å—ñ")
            self.driver = webdriver.Chrome(options=chrome_options)
        
        # –ù–µ –Ω–∞–º–∞–≥–∞–π—Ç–µ—Å—å –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç –ø–æ outerHTML –≤ —ñ–Ω—à–∏—Ö –º—ñ—Å—Ü—è—Ö –∫–æ–¥—É.
        self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")

    async def add_image_to_post(self, images_folder):
        """
        –î–æ–¥–∞—î –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–æ –ø–æ—Å—Ç—É –∞–±–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—è –∑ Google Drive
        
        Args:
            images_folder (str): –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–∞–ø–∫—É –∑ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ –≤ Google Drive
            
        Returns:
            bool: True —è–∫—â–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞, False —è–∫—â–æ –ø–æ–º–∏–ª–∫–∞
        """
        try:
            print("üñºÔ∏è –î–æ–¥–∞—î–º–æ –∫–∞—Ä—Ç–∏–Ω–∫—É...")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É –∫–∞—Ä—Ç–∏–Ω–∫—É –∑ Google Drive
            filename = await get_random_image_from_drive(images_folder)
            
            if not filename:
                print("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –∑ Google Drive")
                return False
            
            print(f"‚úÖ –ö–∞—Ä—Ç–∏–Ω–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–∞: {filename}")
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–ª–µ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
            try:
                file_input = self.driver.find_element(By.CSS_SELECTOR, 'input[data-testid="fileInput"]')
                file_path = os.path.abspath(os.path.join('images', filename))
                
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–∞—Ä—Ç–∏–Ω–∫—É
                file_input.send_keys(file_path)
                print(f"üñºÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ {filename} –¥–æ–¥–∞–Ω–∞")
                
                # –ß–µ–∫–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏–Ω–∫–∏
                await asyncio.sleep(random.uniform(1, 2))
                
                # # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
                # await delete_image_by_name(filename)
                # print(f"üóëÔ∏è –¢–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª {filename} –≤–∏–¥–∞–ª–µ–Ω–æ")
                
                return filename
                
            except Exception as file_error:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {file_error}")
                # –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏
                if filename:
                    try:
                        await delete_image_by_name(filename)
                        print(f"üóë –¢–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª {filename} –≤–∏–¥–∞–ª–µ–Ω–æ –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏")
                    except Exception as del_error:
                        print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ {filename}: {del_error}")
                return False

    async def handle_click_intercepted(self, element, max_retries=4):
        """
        –û–±—Ä–æ–±–ª—è—î –ø–æ–º–∏–ª–∫—É 'element click intercepted' 
        –ü–æ–≤–µ—Ä—Ç–∞—î True —è–∫—â–æ –∫–ª—ñ–∫ –≤–¥–∞–≤—Å—è, False —è–∫—â–æ –Ω–µ –≤–¥–∞–≤—Å—è
        """
        for attempt in range(max_retries):
            try:
                element.click()
                print(f"‚úÖ –ö–ª—ñ–∫ —É—Å–ø—ñ—à–Ω–∏–π (—Å–ø—Ä–æ–±–∞ {attempt + 1})")
                return True
                
            except ElementClickInterceptedException as e:
                print(f"‚ö†Ô∏è –ö–ª—ñ–∫ –ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–∏–π (—Å–ø—Ä–æ–±–∞ {attempt + 1}/{max_retries})")
                
                if attempt == 0:
                    try:
                        masks = self.driver.find_elements(By.CSS_SELECTOR, '[data-testid="mask"]')
                        for mask in masks:
                            self.driver.execute_script("arguments[0].remove();", mask)
                        
                        overlays = self.driver.find_elements(By.CSS_SELECTOR, '.css-175oi2r[data-testid="mask"]')
                        for overlay in overlays:
                            self.driver.execute_script("arguments[0].remove();", overlay)
                            
                        print("üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ mask/overlay –µ–ª–µ–º–µ–Ω—Ç–∏")
                        await asyncio.sleep(1)
                        
                    except Exception as mask_error:
                        print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ mask: {mask_error}")
                
                elif attempt == 1:
                    print("‚å®Ô∏è –ù–∞—Ç–∏—Å–∫–∞—î–º–æ ESC –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω...")
                    try:
                        body = self.driver.find_element(By.TAG_NAME, 'body')
                        body.send_keys(Keys.ESCAPE)
                        await asyncio.sleep(1)
                        
                        body.send_keys(Keys.ESCAPE)
                        await asyncio.sleep(0.5)
                        
                        print("‚úÖ ESC –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ")
                        
                    except Exception as esc_error:
                        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ ESC: {esc_error}")
                    
                    await self.force_close_modals()
                
                elif attempt == 2:
                    print("üîÑ –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É...")
                    self.driver.refresh()
                    await asyncio.sleep(3)
                    return False  # –≤–∏–∫–ª–∏–∫–∞—é—á–∏–π –∫–æ–¥ —Å–∞–º –∑–Ω–∞–π–¥–µ –µ–ª–µ–º–µ–Ω—Ç –∑–∞–Ω–æ–≤–æ
                    
                    try:
                        current_url = self.driver.current_url
                        
                        if "compose/post" in current_url or "Post" in element.get_attribute("aria-label"):
                            element = self.driver.find_element(By.CSS_SELECTOR, 'a[aria-label="Post"]')
                        elif "tweetButton" in element.get_attribute("data-testid"):
                            element = self.driver.find_element(By.CSS_SELECTOR, 'button[data-testid="tweetButton"]')
                        else:
                            element = self.driver.find_element(By.CSS_SELECTOR, element.get_attribute("outerHTML"))
                            
                    except Exception as find_error:
                        print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç –ø—ñ—Å–ª—è –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {find_error}")
                        await self.open_explore()
                        return False
                
                elif attempt == 3:
                    print("üîß –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ JavaScript –∫–ª—ñ–∫...")
                    try:
                        self.driver.execute_script("arguments[0].click();", element)
                        print("‚úÖ JavaScript –∫–ª—ñ–∫ —É—Å–ø—ñ—à–Ω–∏–π")
                        return True
                    except Exception as js_error:
                        print(f"‚ùå JavaScript –∫–ª—ñ–∫ –Ω–µ –≤–¥–∞–≤—Å—è: {js_error}")
                
                await asyncio.sleep(random.uniform(1, 3))
        
        print("‚ùå –í—Å—ñ —Å–ø—Ä–æ–±–∏ –∫–ª—ñ–∫—É –Ω–µ –≤–¥–∞–ª–∏—Å—è")
        return False

    async def safe_click(self, element, description="–µ–ª–µ–º–µ–Ω—Ç"):
        """
        –ë–µ–∑–ø–µ—á–Ω–∏–π –∫–ª—ñ–∫ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
        –ü–æ–≤–µ—Ä—Ç–∞—î True —è–∫—â–æ –∫–ª—ñ–∫ –≤–¥–∞–≤—Å—è, False —è–∫—â–æ –Ω–µ –≤–¥–∞–≤—Å—è
        """
        try:
            print(f"üñ±Ô∏è –ù–∞–º–∞–≥–∞—î–º–æ—Å—è –∫–ª—ñ–∫–Ω—É—Ç–∏ –Ω–∞ {description}...")
            return await self.handle_click_intercepted(element)
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–ª—ñ–∫—É –Ω–∞ {description}: {e}")
            return False

    async def force_close_modals(self):
        """
        –ü—Ä–∏–º—É—Å–æ–≤–æ –∑–∞–∫—Ä–∏–≤–∞—î –≤—Å—ñ –º–æ–¥–∞–ª—å–Ω—ñ –≤—ñ–∫–Ω–∞ —Ç–∞ overlay –µ–ª–µ–º–µ–Ω—Ç–∏
        """
        try:
            print("üîß –ü—Ä–∏–º—É—Å–æ–≤–æ –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω—ñ –≤—ñ–∫–Ω–∞...")
            
            try:
                button = self.driver.find_element(By.CSS_SELECTOR, 'button[class="css-175oi2r r-sdzlij r-1phboty r-rs99b7 r-lrvibr r-1mnahxq r-19yznuf r-64el8z r-1fkl15p r-1loqt21 r-o7ynqc r-6416eg r-1ny4l3l"]')
                if button.click():
                    return True
            except:
                body = self.driver.find_element(By.TAG_NAME, 'body')
                for i in range(3):
                    body.send_keys(Keys.ESCAPE)
                    await asyncio.sleep(0.3)

                overlay_selectors = [
                    '[data-testid="mask"]',
                    '.css-175oi2r[data-testid="mask"]',
                    '[role="dialog"]',
                    '[aria-modal="true"]',
                    '.overlay',
                    '.modal',
                    '.popup'
                ]

                for selector in overlay_selectors:
                    try:
                        overlays = self.driver.find_elements(By.CSS_SELECTOR, selector)
                        for overlay in overlays:
                            self.driver.execute_script("arguments[0].remove();", overlay)
                            print(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ overlay: {selector}")
                    except Exception as e:
                        continue
                    
                print("‚úÖ –ú–æ–¥–∞–ª—å–Ω—ñ –≤—ñ–∫–Ω–∞ –∑–∞–∫—Ä–∏—Ç–æ")
                return True
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω: {e}")
            return False

    async def start(self):
        self.driver.get("https://x.com")
        cookies = [
            {
                'name': 'auth_token',
                'value': self.auth_token,
                'domain': '.x.com',
                'path': '/',
                'secure': True,
                'httpOnly': True
            },
            {
                'name': 'ct0',
                'value': self.ct0,
                'domain': '.x.com',
                'path': '/',
                'secure': True,
                'httpOnly': False,
                'sameSite': 'None'
            }
        ]
        for cookie in cookies:
            try:
                if cookie is not None and cookie != "":
                    self.driver.add_cookie(cookie)
                else:
                    continue
            except Exception as e:
                print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∫—É–∫—É {cookie['name']}: {str(e)}")
                continue

        self.driver.refresh()

        await asyncio.sleep(10)
        
        try:
            retry_button = self.driver.find_element(By.XPATH, "//button[@role='button']//span[contains(text(), 'Retry')]")
            print("–ó–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫—É Retry, –Ω–∞—Ç–∏—Å–∫–∞—î–º–æ...")
            retry_button.click()
            await asyncio.sleep(3) 
        except:
            print("–ö–Ω–æ–ø–∫–∞ Retry –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        
        await self.force_close_modals()
        
        try:
            button = self.driver.find_element(By.XPATH, '/html/body/div[1]/div/div/div[1]/div/div/div/div/div/div[2]/button[1]')
            button.click()
        except:
            print("Button not found!")

    async def twit_a_post(self, amount_of_retweets):
        """–†–µ—Ç–≤—ñ—Ç–∏—Ç–∏ –ø–æ—Å—Ç–∏ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Ç–∞ –≤–∏–ø–∞–¥–∫–æ–≤–∏–º –ø—Ä–æ–ø—É—Å–∫–æ–º"""
        await self.open_explore()
        retweeted_posts = 0
        no_posts_count = 0
        
        while retweeted_posts < amount_of_retweets:
            try:
                posts = self.driver.find_elements(By.CSS_SELECTOR, 'article[data-testid="tweet"]')
                print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç—ñ–≤ –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ")
                
                if not posts:
                    no_posts_count += 1
                    print(f"–ü–æ—Å—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (—Å–ø—Ä–æ–±–∞ {no_posts_count}/20), —Å–∫—Ä–æ–ª–∏–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É...")
                    
                    if no_posts_count > 10:
                        print("üö® –ü–æ–Ω–∞–¥ 10 —Å–ø—Ä–æ–± –±–µ–∑ –ø–æ—Å—Ç—ñ–≤, –∞–∫–∞—É–Ω—Ç –º–∞—î –ø—Ä–æ–±–ª–µ–º–∏!")
                        await handle_bad_account(self, "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –ª–æ–≥—ñ–Ω –¥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω–Ω—ñ —á–∏ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ª–æ–≥—ñ–Ω–∏—Ç–∏—Å—å –≤ –∞–∫–∫–∞—É–Ω—Ç –≤ —Ä—É—á–Ω—É, –ø—ñ—Å–ª—è –≤–¥–∞–ª–æ–≥–æ –ª–æ–≥—ñ–Ω—É –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—ñ")
                        return
                    elif no_posts_count >= 10:
                        print("üîÑ –ü–æ–Ω–∞–¥ 10 —Å–ø—Ä–æ–± –±–µ–∑ –ø–æ—Å—Ç—ñ–≤, –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É...")
                        try:
                            self.driver.refresh()
                            await asyncio.sleep(random.uniform(3, 5))
                            print("‚úÖ –°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞")
                            await self.open_explore()
                        except Exception as refresh_error:
                            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ: {refresh_error}")
                            await self.open_explore()
                    
                    await self.smooth_scroll()
                    await asyncio.sleep(random.uniform(2, 4))
                    continue
                
                no_posts_count = 0
                
                for post in posts:
                    if retweeted_posts >= amount_of_retweets:
                        break
                    
                    if self.check_if_verified(post):
                        try:
                            self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", post)
                            await asyncio.sleep(random.uniform(0.5, 1.5))

                            if self.is_own_post(post):
                                print("–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤–ª–∞—Å–Ω–∏–π –ø–æ—Å—Ç")
                                continue

                            retweet_button = post.find_element(By.CSS_SELECTOR, 'button[data-testid="retweet"]')
                            
                            chance = random.randint(1, 100)
                            print(f"–®–∞–Ω—Å —Ä–µ—Ç–≤—ñ—Ç—É: {chance}")
                            
                            if chance > 50:
                                post_link = self.get_post_link(post)
                                post_text = self.get_post_text(post)
                                
                                if await self.safe_click(retweet_button, "–∫–Ω–æ–ø–∫—É —Ä–µ—Ç–≤—ñ—Ç—É"):
                                    await asyncio.sleep(random.randint(2, 5))
                                    
                                    try:
                                        confirm_button = self.driver.find_element(By.CSS_SELECTOR, 'div[data-testid="retweetConfirm"]')
                                        if await self.safe_click(confirm_button, "–∫–Ω–æ–ø–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–µ—Ç–≤—ñ—Ç—É"):
                                            retweeted_posts += 1
                                            print(f"–†–µ—Ç–≤—ñ—Ç–µ–Ω–æ –ø–æ—Å—Ç –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞! –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {retweeted_posts}/{amount_of_retweets}")
                                            
                                            try:
                                                await increase_retwits()
                                                print("üìä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ç–≤—ñ—Ç—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–∞")
                                            except Exception as stat_error:
                                                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ç–≤—ñ—Ç—ñ–≤: {stat_error}")
                                            
                                            if post_link:
                                                await add_log_entry(
                                                    get_current_datetime(),
                                                    post_link,
                                                    post_text,
                                                    "repost",
                                                    self.username
                                                )
                                                print(f"üìù –õ–æ–≥ —Ä–µ—Ç–≤—ñ—Ç—É –¥–æ–¥–∞–Ω–æ: {post_link}")
                                            await asyncio.sleep(random.uniform(30, 90))
                                        else:
                                            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ä–µ—Ç–≤—ñ—Ç")
                                    except Exception as confirm_error:
                                        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ —Ä–µ—Ç–≤—ñ—Ç—É: {confirm_error}")
                                else:
                                    print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∫–ª—ñ–∫–Ω—É—Ç–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ—Ç–≤—ñ—Ç—É")

                                await asyncio.sleep(random.uniform(1, 3))
                            else:
                                print("–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ä–µ—Ç–≤—ñ—Ç (–≤–∏–ø–∞–¥–∫–æ–≤–æ)")
                                await asyncio.sleep(random.uniform(0.6, 1.5))

                        except:
                            continue
                
                if retweeted_posts < amount_of_retweets:
                    print(f"–ü–æ—Ç—Ä—ñ–±–Ω–æ —â–µ {amount_of_retweets - retweeted_posts} —Ä–µ—Ç–≤—ñ—Ç—ñ–≤, —Å–∫—Ä–æ–ª–∏–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É...")
                    for _ in range(random.randint(4, 6)):
                        await self.smooth_scroll()
                    await asyncio.sleep(random.uniform(2, 4))
                    
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –ø–æ—Å—Ç—ñ–≤ –¥–ª—è —Ä–µ—Ç–≤—ñ—Ç—É: {e}")
                await self.smooth_scroll()
                await asyncio.sleep(random.uniform(2, 4))
        
        print(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ! –†–µ—Ç–≤—ñ—Ç–µ–Ω–æ {retweeted_posts} –ø–æ—Å—Ç—ñ–≤")

    async def make_a_post(self):
        try:
            post_button = self.driver.find_element(By.CSS_SELECTOR, 'a[aria-label="Post"]')
            
            if not await self.safe_click(post_button, "–∫–Ω–æ–ø–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç—É"):
                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∫–ª—ñ–∫–Ω—É—Ç–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç—É")
                return

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∫–Ω–æ–ø–∫–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç—É: {e}")
            return

        await asyncio.sleep(random.uniform(0.5, 2.3))
        
        try:
            text_menu = self.driver.find_element(By.CSS_SELECTOR, 'div[aria-label="Post text"]')
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –ø–æ–ª—è —Ç–µ–∫—Å—Ç—É: {e}")
            return

        if self.watm_up_days < 8:
            message = await get_post()
        elif self.watm_up_days >= 8:
            message = get_post_super()


        for x in message:
            await asyncio.sleep(random.uniform(0.15, 0.5))
            text_menu.send_keys(x)
        
        await asyncio.sleep(random.uniform(0.7, 1.5))

        try:
            post_button_2 = self.driver.find_element(By.CSS_SELECTOR, 'button[data-testid="tweetButton"]')
            
            if post_button_2:
                post_button_2.click()
                print("‚úÖ –ü–æ—Å—Ç —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!")

                await asyncio.sleep(random.uniform(1, 1.5))
                try:
                    parent_element = self.driver.find_element(By.CSS_SELECTOR, '[data-testid="toast"]')
                    link_element = parent_element.find_element(By.TAG_NAME, 'a')
                    href = link_element.get_attribute('href')
                except:
                    print("[ERROR] –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ –±—É–ª–æ –∑–Ω–∞–π–¥–µ–Ω–µ")
                    href = "https://x.com"
                try:
                    await increase_post()
                    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–∞")
                except Exception as stat_error:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç—ñ–≤: {stat_error}")
                
                await asyncio.sleep(5)
                try:
                    print(f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ—Å—Ç: {href}")
                    print("–ü—Ä–æ–±—É—î–º–æ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥ —É Google —Ç–∞–±–ª–∏—Ü—é...")
                    await add_log_entry(
                        get_current_datetime(),
                        href,
                        message,
                        "post",
                        self.username
                    )
                    print(f"üìù –õ–æ–≥ –¥–æ–¥–∞–Ω–æ: {href}")
                except Exception as log_error:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—ñ –ø–æ—Å—Ç—É: {log_error}")
            else:
                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∫–ª—ñ–∫–Ω—É—Ç–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç–≤—ñ—Ç—É")
                return
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∫–Ω–æ–ø–∫–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç–≤—ñ—Ç—É: {e}")
            return

    async def scroll_home_page(self):
        if("home" in self.driver.current_url):
            for i in range(random.randint(1, 5)):
                self.driver.execute_script("window.scrollBy(0, 800);")
                delay = random.randint(3, 8)
                print(f"–°–∫—Ä–æ–ª {i+1}/10, –∑–∞—Ç—Ä–∏–º–∫–∞: {delay} —Å–µ–∫")
                await asyncio.sleep(delay)
                if random.random() < 0.3:
                    self.driver.execute_script("window.scrollBy(0, -400);")
                    await asyncio.sleep(random.randint(2, 4))
            print("–°–∫—Ä–æ–ª –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        else:
            print("–ù–µ –Ω–∞ –¥–æ–º–∞—à–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ")

    def check_if_verified(self, post):
        try:
            post.find_element(By.CSS_SELECTOR, 'svg[aria-label="Verified account"]')
            return True
        except Exception:
            return False
    
    def is_own_post(self, post):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –Ω–∞—à –≤–ª–∞—Å–Ω–∏–π –ø–æ—Å—Ç"""
        try:
            username_element = post.find_element(By.CSS_SELECTOR, 'a[data-testid="User-Name"]')
            username_text = username_element.text.lower()
            
            if self.username.lower() in username_text:
                return True
                
            return False
        except Exception:
            return False

    def get_post_link(self, post):
        """–û—Ç—Ä–∏–º—É—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ—Å—Ç"""
        try:
            link_element = post.find_element(By.CSS_SELECTOR, 'a[href*="/status/"]')
            href = link_element.get_attribute('href')
            return href
        except Exception as e:
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ—Å—Ç: {e}")
            return None

    def get_post_text(self, post):
        """–û—Ç—Ä–∏–º—É—î —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç—É"""
        try:
            text_element = post.find_element(By.CSS_SELECTOR, 'div[data-testid="tweetText"]')
            return text_element.text
        except Exception as e:
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç—É: {e}")
            return "–¢–µ–∫—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"

    def get_own_comment_link(self):
        """–û—Ç—Ä–∏–º—É—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–∞—à –≤–ª–∞—Å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä –ø—ñ—Å–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó"""
        try:
            comments = self.driver.find_elements(By.CSS_SELECTOR, 'article[data-testid="tweet"]')
            for comment in comments:
                if self.is_own_post(comment):
                    link_element = comment.find_element(By.CSS_SELECTOR, 'a[href*="/status/"]')
                    return link_element.get_attribute('href')
            return None
        except Exception as e:
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä: {e}")
            return None

    async def like_a_posts(self, amount_of_likes):
        await self.open_explore()
        liked_post = 0
        no_posts_count = 0
        
        while liked_post < amount_of_likes:
            try:
                posts = self.driver.find_elements(By.CSS_SELECTOR, 'article[data-testid="tweet"]')
                print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç—ñ–≤ –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ")
                
                if not posts:
                    no_posts_count += 1
                    print(f"–ü–æ—Å—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (—Å–ø—Ä–æ–±–∞ {no_posts_count}/20), —Å–∫—Ä–æ–ª–∏–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É...")
                    
                    if no_posts_count >= 20:
                        print("üö® –ü–æ–Ω–∞–¥ 20 —Å–ø—Ä–æ–± –±–µ–∑ –ø–æ—Å—Ç—ñ–≤, –∞–∫–∞—É–Ω—Ç –º–∞—î –ø—Ä–æ–±–ª–µ–º–∏!")
                        await handle_bad_account(self, "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –ª–æ–≥—ñ–Ω –¥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω–Ω—ñ —á–∏ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ª–æ–≥—ñ–Ω–∏—Ç–∏—Å—å –≤ –∞–∫–∫–∞—É–Ω—Ç –≤ —Ä—É—á–Ω—É, –ø—ñ—Å–ª—è –≤–¥–∞–ª–æ–≥–æ –ª–æ–≥—ñ–Ω—É –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—ñ")
                        return
                    elif no_posts_count >= 10:
                        print("üîÑ –ü–æ–Ω–∞–¥ 10 —Å–ø—Ä–æ–± –±–µ–∑ –ø–æ—Å—Ç—ñ–≤, –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É...")
                        try:
                            self.driver.refresh()
                            await asyncio.sleep(random.uniform(3, 5))
                            print("‚úÖ –°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞")
                            await self.open_explore()
                        except Exception as refresh_error:
                            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ: {refresh_error}")
                            await self.open_explore()
                    
                    await self.smooth_scroll()
                    await asyncio.sleep(random.uniform(2, 4))
                    continue
                
                no_posts_count = 0
                
                for post in posts:
                    if liked_post >= amount_of_likes:
                        break
                    
                    if self.check_if_verified(post):
                        try:
                            self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", post)
                            await asyncio.sleep(random.uniform(0.5, 1.5))

                            like_button = post.find_element(By.CSS_SELECTOR, 'button[data-testid="like"]')

                            # –î–∞–Ω—ñ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –ª–∞–π–∫–∞
                            post_link = self.get_post_link(post)
                            post_text = self.get_post_text(post)

                            chance = random.randint(1, 100)
                            print(chance)
                            if chance > 50:
                                if await self.safe_click(like_button, "–∫–Ω–æ–ø–∫—É –ª–∞–π–∫—É"):
                                    liked_post += 1
                                    print(f"–õ–∞–π–∫–Ω—É—Ç–æ –ø–æ—Å—Ç –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞! –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {liked_post}/{amount_of_likes}")
                                    
                                    try:
                                        await increase_like()
                                        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∞–π–∫—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–∞")
                                    except Exception as stat_error:
                                        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–∞–π–∫—ñ–≤: {stat_error}")

                                    # –õ–æ–≥—É—î–º–æ –ª–∞–π–∫ —É Google Sheets
                                    # try:
                                    #     await add_log_entry(
                                    #         get_current_datetime(),
                                    #         post_link or "https://x.com",
                                    #         post_text,
                                    #         "like",
                                    #         self.username
                                    #     )
                                    #     print(f"üìù –õ–æ–≥ –ª–∞–π–∫–∞ –¥–æ–¥–∞–Ω–æ: {post_link}")
                                    # except Exception as log_error:
                                    #     print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—ñ –ª–∞–π–∫–∞: {log_error}")
                                    await asyncio.sleep(random.uniform(30, 90))

                                else:
                                    print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ª–∞–π–∫–Ω—É—Ç–∏ –ø–æ—Å—Ç")

                                await asyncio.sleep(random.uniform(1, 3))
                            else:
                                print("–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Å—Ç (–≤–∏–ø–∞–¥–∫–æ–≤–æ)")
                                await asyncio.sleep(random.uniform(0.6, 1.5))

                        except Exception as e:
                            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–∞–π–∫—É –ø–æ—Å—Ç–∞: {e}")
                            continue
                
                if liked_post < amount_of_likes:
                    print(f"–ü–æ—Ç—Ä—ñ–±–Ω–æ —â–µ {amount_of_likes - liked_post} –ª–∞–π–∫—ñ–≤, —Å–∫—Ä–æ–ª–∏–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É...")
                    for _ in range(random.randint(4, 6)):
                        await self.smooth_scroll()
                    await asyncio.sleep(random.uniform(2, 4))
                    
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –ø–æ—Å—Ç—ñ–≤: {e}")
                await self.smooth_scroll()
                await asyncio.sleep(random.uniform(2, 4))
        
        print(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ! –õ–∞–π–∫–Ω—É—Ç–æ {liked_post} –ø–æ—Å—Ç—ñ–≤")
    
    async def handle_comment_restrictions(self):
        """–û–±—Ä–æ–±–∫–∞ –æ–±–º–µ–∂–µ–Ω—å –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω"""
        try:
            restriction_text = self.driver.find_elements(By.XPATH, "//*[contains(text(), 'Who can reply') or contains(text(), '—Ö—Ç–æ –º–æ–∂–µ –ø–∏—Å–∞—Ç–∏') or contains(text(), 'Who can comment')]")
            
            if restriction_text:
                print("‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ –æ–±–º–µ–∂–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è, –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –≤—ñ–∫–Ω–æ")
                try:
                    close_button = self.driver.find_element(By.CSS_SELECTOR, 'button[aria-label="Close"]')
                    if await self.safe_click(close_button, "–∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä–∏—Ç—Ç—è"):
                        await asyncio.sleep(random.uniform(1, 2))
                        return True
                except:
                    try:
                        got_it_button = self.driver.find_element(By.XPATH, "//*[contains(text(), 'Got it') or contains(text(), '–ó—Ä–æ–∑—É–º—ñ–ª–æ')]")
                        if await self.safe_click(got_it_button, "–∫–Ω–æ–ø–∫—É 'Got it'"):
                            await asyncio.sleep(random.uniform(1, 2))
                            return True
                    except:
                        self.driver.find_element(By.TAG_NAME, 'body').send_keys(Keys.ESCAPE)
                        await asyncio.sleep(random.uniform(1, 2))
                        return True
            return False
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –æ–±–º–µ–∂–µ–Ω—å –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è: {e}")
            return False

    async def smooth_scroll(self):
        """–ü–ª–∞–≤–Ω–∏–π —Å–∫—Ä–æ–ª —Å—Ç–æ—Ä—ñ–Ω–∫–∏"""
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—É–ø–∏–Ω–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç
        if self._stop_requested:
            print(f"üõë –ê–∫–∞—É–Ω—Ç {self.username} –∑—É–ø–∏–Ω–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å–∫—Ä–æ–ª")
            return
        
        try:
            self.driver.execute_script("""
                window.scrollBy({
                    top: 800,
                    left: 0,
                    behavior: 'smooth'
                });
            """)
            await asyncio.sleep(random.uniform(2, 4))
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—É–ø–∏–Ω–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç –ø—ñ—Å–ª—è —Å–∫—Ä–æ–ª—É
            if self._stop_requested:
                print(f"üõë –ê–∫–∞—É–Ω—Ç {self.username} –∑—É–ø–∏–Ω–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–≤–æ—Ä–æ—Ç–Ω—ñ–π —Å–∫—Ä–æ–ª")
                return
            
            if random.random() < 0.2:
                self.driver.execute_script("""
                    window.scrollBy({
                        top: -400,
                        left: 0,
                        behavior: 'smooth'
                    });
                """)
                await asyncio.sleep(random.uniform(1, 2))
                
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫—Ä–æ–ª—ñ: {e}")

    async def comment_on_posts(self, amount_of_comments):
        """–ö–æ–º–µ–Ω—Ç—É—î–º–æ –ø–æ—Å—Ç–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤"""
        commented_posts = 0
        last_processed_index = 0
        no_posts_count = 0
        
        await self.open_explore()
        await asyncio.sleep(random.uniform(1, 3))

        while commented_posts < amount_of_comments:
            try:
                posts = self.driver.find_elements(By.CSS_SELECTOR, 'article[data-testid="tweet"]')
                print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç—ñ–≤ –¥–ª—è –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è")
                
                if not posts:
                    no_posts_count += 1
                    print(f"–ü–æ—Å—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (—Å–ø—Ä–æ–±–∞ {no_posts_count}/20), —Å–∫—Ä–æ–ª–∏–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É...")
                    
                    if no_posts_count > 10:
                        print("üö® –ü–æ–Ω–∞–¥ 10 —Å–ø—Ä–æ–± –±–µ–∑ –ø–æ—Å—Ç—ñ–≤, –∞–∫–∞—É–Ω—Ç –º–∞—î –ø—Ä–æ–±–ª–µ–º–∏!")
                        await handle_bad_account(self, "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –ª–æ–≥—ñ–Ω –¥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω–Ω—ñ —á–∏ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ª–æ–≥—ñ–Ω–∏—Ç–∏—Å—å –≤ –∞–∫–∫–∞—É–Ω—Ç –≤ —Ä—É—á–Ω—É, –ø—ñ—Å–ª—è –≤–¥–∞–ª–æ–≥–æ –ª–æ–≥—ñ–Ω—É –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—ñ")
                        return
                    elif no_posts_count >= 10:
                        print("üîÑ –ü–æ–Ω–∞–¥ 10 —Å–ø—Ä–æ–± –±–µ–∑ –ø–æ—Å—Ç—ñ–≤, –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É...")
                        try:
                            self.driver.refresh()
                            await asyncio.sleep(random.uniform(3, 5))
                            last_processed_index = 0
                            print("‚úÖ –°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞")
                            await self.open_explore()
                        except Exception as refresh_error:
                            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ: {refresh_error}")
                            await self.open_explore()
                            last_processed_index = 0
                    
                    await self.smooth_scroll()
                    await asyncio.sleep(random.uniform(2, 4))
                    continue
                
                no_posts_count = 0
                
                for i in range(last_processed_index, len(posts)):
                    if commented_posts >= amount_of_comments:
                        break
                    
                    post = posts[i]
                    print(f"–û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ—Å—Ç {i+1}/{len(posts)} (—ñ–Ω–¥–µ–∫—Å: {i})")
                    
                    if self.is_own_post(post):
                        print("–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤–ª–∞—Å–Ω–∏–π –ø–æ—Å—Ç")
                        continue
                    
                    if self.check_if_verified(post):
                        try:

                            try:
                                post_text_element = post.find_element(By.CSS_SELECTOR, 'div[data-testid="tweetText"]')
                                post_text = post_text_element.text
                                print(f"–ó–Ω–∞–π–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞: {post_text[:50]}...")
                            except Exception as e:
                                print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞: {e}")
                                continue

                            print(f"\n\n\n Account main: {post_text} \n\n\n")

                            self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", post)
                            await asyncio.sleep(random.uniform(0.5, 1.5))
                            
                            
                            try:
                                comment_button = post.find_element(By.CSS_SELECTOR, 'button[data-testid="reply"]')
                                
                                if comment_button.is_displayed() and comment_button.is_enabled():
                                    try:
                                        restriction_indicators = post.find_elements(By.CSS_SELECTOR, '[data-testid="reply-restricted"]')
                                        if restriction_indicators:
                                            print("‚ö†Ô∏è –ü–æ—Å—Ç –º–∞—î –æ–±–º–µ–∂–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
                                            continue
                                    except:
                                        pass
                                    
                                    if await self.safe_click(comment_button, "–∫–Ω–æ–ø–∫—É –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è"):
                                        await asyncio.sleep(random.uniform(1, 3))
                                    else:
                                        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∫–ª—ñ–∫–Ω—É—Ç–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è")
                                        continue
                                else:
                                    print("–ö–Ω–æ–ø–∫–∞ –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –∫–ª—ñ–∫–∞–±–µ–ª—å–Ω–∞")
                                    continue
                            except Exception as e:
                                print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∫–ª—ñ–∫–Ω—É—Ç–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è: {e}")
                                continue
                            
                            await asyncio.sleep(random.uniform(1, 2))
                            
                            if await self.handle_comment_restrictions():
                                print("‚ö†Ô∏è –û–±–º–µ–∂–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Å—Ç")
                                continue
                            

                            
                            try:
                                # –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏ –¥–ª—è –ø–æ–ª—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è
                                comment_field = None
                                selectors_to_try = [
                                    'textarea[placeholder="Post your reply"]',
                                    'textarea[placeholder="What\'s happening?"]',
                                    'div[aria-label="Post text"]',
                                    'div[data-testid="tweetTextarea_0"]',
                                    'textarea[data-testid="tweetTextarea_0"]'
                                ]
                                
                                for selector in selectors_to_try:
                                    try:
                                        comment_field = WebDriverWait(self.driver, 5).until(
                                            EC.presence_of_element_located((By.CSS_SELECTOR, selector))
                                        )
                                        print(f"‚úÖ –ü–æ–ª–µ –∫–æ–º–µ–Ω—Ç–∞—Ä—è –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
                                        break
                                    except Exception:
                                        continue
                                
                                if not comment_field:
                                    raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø–æ–ª–µ –∫–æ–º–µ–Ω—Ç–∞—Ä—è –∑–∞ –∂–æ–¥–Ω–∏–º –∑ —Å–µ–ª–µ–∫—Ç–æ—Ä—ñ–≤")
                            except Exception as e:
                                print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø–æ–ª–µ –∫–æ–º–µ–Ω—Ç–∞—Ä—è: {e}")
                                try:
                                    close_button = self.driver.find_element(By.CSS_SELECTOR, 'button[aria-label="Close"]')
                                    await self.safe_click(close_button, "–∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä–∏—Ç—Ç—è")
                                except:
                                    pass
                                continue

                            if self.watm_up_days < 8:
                                comment_text = await get_comment(post_text)
                            elif self.watm_up_days >= 8:
                                comment_text = get_comment_supre(post_text)

                            print(comment_text)

                            clean_comment = re.sub(r'[^\x00-\x7F]+', '', comment_text)
                            
                            
                            # –í–≤–æ–¥–∏–º–æ —Ç–µ–∫—Å—Ç –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
                            for char in clean_comment:
                                try:
                                    await asyncio.sleep(random.uniform(0.1, 0.3))
                                    comment_field.send_keys(char)
                                except Exception as send_error:
                                    print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ —Å–∏–º–≤–æ–ª—É '{char}': {send_error}")
                                    # –°–ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ JavaScript
                                    try:
                                        self.driver.execute_script("arguments[0].value += arguments[1];", comment_field, char)
                                        print(f"‚úÖ –°–∏–º–≤–æ–ª '{char}' –≤–≤–µ–¥–µ–Ω–æ —á–µ—Ä–µ–∑ JavaScript")
                                    except Exception as js_send_error:
                                        print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª '{char}' –Ω–∞–≤—ñ—Ç—å —á–µ—Ä–µ–∑ JavaScript: {js_send_error}")
                                        break
                            
                            await asyncio.sleep(random.uniform(0.5, 1.5))

                            comment_field.send_keys(Keys.RETURN)
                            
                            reply_button = self.driver.find_element(By.CSS_SELECTOR, 'button[data-testid="tweetButton"]')
                            if await self.safe_click(reply_button, "–∫–Ω–æ–ø–∫—É –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—è"):
                                print("‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")

                                await asyncio.sleep(random.uniform(1, 1.5))

                                try:
                                    parent_element = self.driver.find_element(By.CSS_SELECTOR, '[data-testid="toast"]')
                                    link_element = parent_element.find_element(By.TAG_NAME, 'a')
                                    href = link_element.get_attribute('href')
                                except Exception as e:
                                    href = "https://x.com"
                                    print(f"[ERROR] Could not find element {e}")

                                await asyncio.sleep(random.uniform(1, 1.4))

                                try:
                                    await increase_comments()
                                    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–∞")
                                except Exception as stat_error:
                                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤: {stat_error}")
                                
                                try:
                                    await asyncio.sleep(2)

                                    if href:
                                        await add_log_entry(
                                            get_current_datetime(),
                                            href,
                                            clean_comment,
                                            "reply",
                                            self.username
                                        )
                                        print(f"üìù –õ–æ–≥ –∫–æ–º–µ–Ω—Ç–∞—Ä—è –¥–æ–¥–∞–Ω–æ: {href}")

                                    else:
                                        post_link = self.get_post_link(post)
                                        if post_link:
                                            await add_log_entry(
                                                get_current_datetime(),
                                                post_link,
                                                clean_comment,
                                                "reply",
                                                self.username
                                            )
                                            print(f"üìù –õ–æ–≥ –∫–æ–º–µ–Ω—Ç–∞—Ä—è –¥–æ–¥–∞–Ω–æ (–æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –ø–æ—Å—Ç): {post_link}")
                                except Exception as log_error:
                                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—è: {log_error}")
                                await asyncio.sleep(random.uniform(30, 90))
                            else:
                                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä")
                                continue
                            
                            await asyncio.sleep(random.uniform(2, 3))
                            
                            
                            commented_posts += 1
                            last_processed_index = i + 1
                            print(f"‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ! –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {commented_posts}/{amount_of_comments}")
                            
                            await asyncio.sleep(random.uniform(2, 5))
                            
                        except Exception as e:
                            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—ñ –ø–æ—Å—Ç–∞")
                            continue
                
                if commented_posts < amount_of_comments:
                    print(f"–ü–æ—Ç—Ä—ñ–±–Ω–æ —â–µ {amount_of_comments - commented_posts} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤, —Å–∫—Ä–æ–ª–∏–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É...")
                    for _ in range(random.randint(4, 6)):
                        await self.smooth_scroll()
                    await asyncio.sleep(random.uniform(2, 4))
                    last_processed_index = 0
                    
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –ø–æ—Å—Ç—ñ–≤ –¥–ª—è –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è: {e}")
                await self.smooth_scroll()
                await asyncio.sleep(random.uniform(2, 4))
        
        print(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ! –î–æ–¥–∞–Ω–æ {commented_posts} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤")


    async def open_explore(self):
        button = None
        try:
            button = self.driver.find_element(By.CSS_SELECTOR, 'a[data-testid="AppTabBar_Explore_Link"]')
        except:
            print("Elemont NOT found")
            return

        await asyncio.sleep(random.uniform(2, 4))
        await self.safe_click(button, "–∫–Ω–æ–ø–∫—É —Ä–µ—Ç–≤—ñ—Ç—É")

        await asyncio.sleep(random.uniform(2, 4))

        try:
            enter_menu = self.driver.find_element(By.CSS_SELECTOR, 'input[enterkeyhint="search"]')
        except:
            print("Enter menu not found")
            return

        try:
            with open('settings.json', 'r', encoding='utf-8') as f:
                settings = json.load(f)
            searches = settings.get('explore_searches', [])
            if not searches:
                print("explore_searches –ø–æ—Ä–æ–∂–Ω—ñ–π —É settings.json")
                return
            message = random.choice(searches)
            print(f"[Explore] –í–∏–±—Ä–∞–Ω–æ –ø–æ—à—É–∫: {message}")
        except Exception as e:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ explore_searches: {e}")
            return

        enter_menu.clear()
        for x in message:
            enter_menu.send_keys(x)
            await asyncio.sleep(random.uniform(0.3, 0.7))
        await asyncio.sleep(random.uniform(1, 2))
        enter_menu.send_keys(Keys.ENTER)
        print(f"[Explore] –í–∏–∫–æ–Ω–∞–Ω–æ –ø–æ—à—É–∫: {message}")


    async def make_subscription(self):
        import json
        import os
        subscription_list = await get_all_links()
        if not subscription_list:
            print("–°–ø–∏—Å–æ–∫ –ø–æ—Å–∏–ª–∞–Ω—å –ø–æ—Ä–æ–∂–Ω—ñ–π!")
            return

        async with subscriptions_lock:
            used_links_dict = {}
            if os.path.exists("subscriptions.json"):
                try:
                    with open("subscriptions.json", "r", encoding="utf-8") as f:
                        used_links_dict = json.load(f)
                except Exception as e:
                    print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑—á–∏—Ç–∞—Ç–∏ subscriptions.json: {e}")
                    used_links_dict = {}
            
            used_links = set(used_links_dict.get(self.auth_token, []))
            
            available_links = [link for link in subscription_list if link not in used_links]
            if not available_links:
                print("–í—Å—ñ –∞–∫–∞—É–Ω—Ç–∏ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏ —Ü–∏–º –∞–∫–∞—É–Ω—Ç–æ–º!")
                return

            import random
            chosen_link = random.choice(available_links)
            print(f"–í–∏–±—Ä–∞–Ω–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏: {chosen_link}")

        self.driver.execute_script("window.open('');")
        self.driver.switch_to.window(self.driver.window_handles[-1])
        self.driver.get(chosen_link)
        await asyncio.sleep(random.uniform(4, 7))

        try:
            follow_button = WebDriverWait(self.driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, '//*[@id="react-root"]/div/div/div[2]/main/div/div/div/div[1]/div/div[3]/div/div/div[1]/div[1]/div[1]/div[2]/div/div[1]/button'))
            )
            await asyncio.sleep(random.uniform(1, 2))
            follow_button.click()
            print("‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞!")
            
            try:
                await increase_subscriptions()
                print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—ñ–¥–ø–∏—Å–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–∞")
            except Exception as stat_error:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—ñ–¥–ø–∏—Å–æ–∫: {stat_error}")

        except Exception as e:
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è: {e}")
        await asyncio.sleep(random.uniform(2, 4))

        self.driver.close()
        self.driver.switch_to.window(self.driver.window_handles[0])
        self.driver.get("https://x.com/home")
        await asyncio.sleep(random.uniform(2, 4))

        async with subscriptions_lock:
            if os.path.exists("subscriptions.json"):
                try:
                    with open("subscriptions.json", "r", encoding="utf-8") as f:
                        used_links_dict = json.load(f)
                except Exception as e:
                    print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑—á–∏—Ç–∞—Ç–∏ subscriptions.json: {e}")
                    used_links_dict = {}
            
            used_links = set(used_links_dict.get(self.auth_token, []))
            used_links.add(chosen_link)
            used_links_dict[self.auth_token] = list(used_links)
            
            try:
                with open("subscriptions.json", "w", encoding="utf-8") as f:
                    json.dump(used_links_dict, f, ensure_ascii=False, indent=2)
                print(f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ —É subscriptions.json –¥–ª—è –∞–∫–∞—É–Ω—Ç–∞: {self.auth_token[:8]}... -> {chosen_link}")
            except Exception as e:
                print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø–∏—Å–∞—Ç–∏ —É subscriptions.json: {e}")


    async def stop(self):
        await asyncio.sleep(random.uniform(2, 4))
        try:
            self.driver.quit()
        except Exception:
            try:
                self.driver.close()
            except Exception:
                pass
        # Cleanup temporary Chrome user data directory on Linux
        try:
            if getattr(self, "_temp_user_data_dir", None):
                shutil.rmtree(self._temp_user_data_dir, ignore_errors=True)
        except Exception:
            pass


# ========================================= SHILLING =========================================


    async def open_explore_shilling(self, main_words):
        button = None
        try:
            button = self.driver.find_element(By.CSS_SELECTOR, 'a[data-testid="AppTabBar_Explore_Link"]')
        except:
            print("Elemont NOT found")
            return

        await asyncio.sleep(random.uniform(2, 4))
        await self.safe_click(button, "–∫–Ω–æ–ø–∫—É —Ä–µ—Ç–≤—ñ—Ç—É")

        await asyncio.sleep(random.uniform(2, 4))

        try:
            enter_menu = self.driver.find_element(By.CSS_SELECTOR, 'input[enterkeyhint="search"]')
        except:
            print("Enter menu not found")
            return

        message = random.choice(main_words)
        print(f"[Explore] –í–∏–±—Ä–∞–Ω–æ –ø–æ—à—É–∫: {message}")

        enter_menu.clear()
        for x in message:
            enter_menu.send_keys(x)
            await asyncio.sleep(random.uniform(0.3, 0.7))
        await asyncio.sleep(random.uniform(1, 2))
        enter_menu.send_keys(Keys.ENTER)
        print(f"[Explore] –í–∏–∫–æ–Ω–∞–Ω–æ –ø–æ—à—É–∫: {message}")



    async def twit_a_post_shilling(self, amount_of_retweets, min_time, max_time, logs_table, main_words, search_hours=24, is_images=False, images_folder=""):
        if self._stop_requested:
                print(f"üõë –ê–∫–∞—É–Ω—Ç {self.username} –∑—É–ø–∏–Ω–µ–Ω–æ, –∑–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–±–æ—Ç—É")
                return
        """–†–µ—Ç–≤—ñ—Ç–∏—Ç–∏ –ø–æ—Å—Ç–∏ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Ç–∞ –≤–∏–ø–∞–¥–∫–æ–≤–∏–º –ø—Ä–æ–ø—É—Å–∫–æ–º"""
        await self.open_explore_shilling(main_words)
        retweeted_posts = 0
        no_posts_count = 0
        
        while retweeted_posts < amount_of_retweets:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—É–ø–∏–Ω–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç
            
            try:
                posts = self.driver.find_elements(By.CSS_SELECTOR, 'article[data-testid="tweet"]')
                print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç—ñ–≤ –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ")
                
                if not posts:
                    no_posts_count += 1
                    print(f"–ü–æ—Å—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (—Å–ø—Ä–æ–±–∞ {no_posts_count}/20), —Å–∫—Ä–æ–ª–∏–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É...")
                    
                    if no_posts_count > 10:
                        print("üö® –ü–æ–Ω–∞–¥ 10 —Å–ø—Ä–æ–± –±–µ–∑ –ø–æ—Å—Ç—ñ–≤, –∞–∫–∞—É–Ω—Ç –º–∞—î –ø—Ä–æ–±–ª–µ–º–∏!")
                        await handle_bad_account(self, "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –ª–æ–≥—ñ–Ω –¥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω–Ω—ñ —á–∏ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ª–æ–≥—ñ–Ω–∏—Ç–∏—Å—å –≤ –∞–∫–∫–∞—É–Ω—Ç –≤ —Ä—É—á–Ω—É, –ø—ñ—Å–ª—è –≤–¥–∞–ª–æ–≥–æ –ª–æ–≥—ñ–Ω—É –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—ñ")
                        return
                    elif no_posts_count >= 10:
                        print("üîÑ –ü–æ–Ω–∞–¥ 10 —Å–ø—Ä–æ–± –±–µ–∑ –ø–æ—Å—Ç—ñ–≤, –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É...")
                        try:
                            self.driver.refresh()
                            await asyncio.sleep(random.uniform(min_time, max_time))
                            print("‚úÖ –°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞")
                            await self.open_explore_shilling(main_words)
                        except Exception as refresh_error:
                            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ: {refresh_error}")
                            await self.open_explore_shilling(main_words)
                    
                    await self.smooth_scroll()
                    await asyncio.sleep(random.uniform(min_time, max_time))
                    continue
                
                no_posts_count = 0
                
                for post in posts:
                    if retweeted_posts >= amount_of_retweets:
                        break
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—É–ø–∏–Ω–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç
                    if self._stop_requested:
                        print(f"üõë –ê–∫–∞—É–Ω—Ç {self.username} –∑—É–ø–∏–Ω–µ–Ω–æ, –∑–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–±–æ—Ç—É")
                        return
                    
                    if self.check_if_verified(post):
                        try:
                            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Å—Ç –Ω–µ —Å—Ç–∞—Ä—ñ—à–∏–π –∑–∞ search_hours
                            if not self.is_post_within_hours(post, search_hours):
                                print("‚è∞ –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å—Ç–∞—Ä–∏–π –ø–æ—Å—Ç")
                                continue
                            
                            self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", post)
                            await asyncio.sleep(random.uniform(min_time, max_time))

                            if self.is_own_post(post):
                                print("–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤–ª–∞—Å–Ω–∏–π –ø–æ—Å—Ç")
                                continue

                            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Å—Ç –º—ñ—Å—Ç–∏—Ç—å –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
                            if not self.contains_search_keywords(post, main_words):
                                print("üîç –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Å—Ç –±–µ–∑ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤")
                                continue

                            retweet_button = post.find_element(By.CSS_SELECTOR, 'button[data-testid="retweet"]')
                            
                            chance = random.randint(1, 100)
                            print(f"–®–∞–Ω—Å —Ä–µ—Ç–≤—ñ—Ç—É: {chance}")
                            
                            if chance > 50:
                                post_link = self.get_post_link(post)
                                post_text = self.get_post_text(post)
                                
                                if await self.safe_click(retweet_button, "–∫–Ω–æ–ø–∫—É —Ä–µ—Ç–≤—ñ—Ç—É"):
                                    await asyncio.sleep(random.randint(min_time, max_time))
                                    
                                    try:
                                        confirm_button = self.driver.find_element(By.CSS_SELECTOR, 'div[data-testid="retweetConfirm"]')
                                        if await self.safe_click(confirm_button, "–∫–Ω–æ–ø–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–µ—Ç–≤—ñ—Ç—É"):
                                            retweeted_posts += 1
                                            print(f"–†–µ—Ç–≤—ñ—Ç–µ–Ω–æ –ø–æ—Å—Ç –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞! –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {retweeted_posts}/{amount_of_retweets}")
                                            
                                            if post_link:
                                                try:
                                                    if logs_table:
                                                        await add_log_entry_to_sheet(
                                                            logs_table,
                                                            get_current_datetime_shilling(),
                                                            post_link,
                                                            post_text,
                                                            "repost",
                                                            self.username
                                                        )
                                                    else:
                                                        await add_log_entry(
                                                            get_current_datetime(),
                                                            post_link,
                                                            post_text,
                                                            "repost",
                                                            self.username
                                                        )
                                                    print(f"üìù –õ–æ–≥ —Ä–µ—Ç–≤—ñ—Ç—É –¥–æ–¥–∞–Ω–æ: {post_link}")
                                                except Exception as log_error:
                                                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—ñ —Ä–µ—Ç–≤—ñ—Ç—É: {log_error}")
                                        else:
                                            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ä–µ—Ç–≤—ñ—Ç")
                                    except Exception as confirm_error:
                                        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ —Ä–µ—Ç–≤—ñ—Ç—É: {confirm_error}")
                                else:
                                    print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∫–ª—ñ–∫–Ω—É—Ç–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ—Ç–≤—ñ—Ç—É")

                                await asyncio.sleep(random.uniform(min_time, max_time))
                            else:
                                print("–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ä–µ—Ç–≤—ñ—Ç (–≤–∏–ø–∞–¥–∫–æ–≤–æ)")
                                await asyncio.sleep(random.uniform(min_time, max_time))

                        except:
                            continue
                
                if retweeted_posts < amount_of_retweets:
                    print(f"–ü–æ—Ç—Ä—ñ–±–Ω–æ —â–µ {amount_of_retweets - retweeted_posts} —Ä–µ—Ç–≤—ñ—Ç—ñ–≤, —Å–∫—Ä–æ–ª–∏–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É...")
                    for _ in range(random.randint(4, 6)):
                        await self.smooth_scroll()
                    await asyncio.sleep(random.uniform(min_time, max_time))
                    
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –ø–æ—Å—Ç—ñ–≤ –¥–ª—è —Ä–µ—Ç–≤—ñ—Ç—É: {e}")
                await self.smooth_scroll()
                await asyncio.sleep(random.uniform(min_time, max_time))
        
        print(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ! –†–µ—Ç–≤—ñ—Ç–µ–Ω–æ {retweeted_posts} –ø–æ—Å—Ç—ñ–≤")

    async def make_a_post_shilling(self, min_time, max_time, logs_table, main_topic, is_images=False, images_folder=""):
        try:
            post_button = self.driver.find_element(By.CSS_SELECTOR, 'a[aria-label="Post"]')
            
            if not await self.safe_click(post_button, "–∫–Ω–æ–ø–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç—É"):
                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∫–ª—ñ–∫–Ω—É—Ç–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç—É")
                return

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∫–Ω–æ–ø–∫–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç—É: {e}")
            return

        await asyncio.sleep(random.uniform(min_time, max_time))
        
        try:
            text_menu = self.driver.find_element(By.CSS_SELECTOR, 'div[aria-label="Post text"]')
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –ø–æ–ª—è —Ç–µ–∫—Å—Ç—É: {e}")
            return

        message = await get_post_shilling(main_topic)

        for x in message:
            await asyncio.sleep(random.uniform(0.15, 0.5))
            text_menu.send_keys(x)
        
        await asyncio.sleep(random.uniform(0.7, 1.5))

        # –î–æ–¥–∞—î–º–æ –∫–∞—Ä—Ç–∏–Ω–∫—É —è–∫—â–æ –≤–æ–Ω–∞ —É–≤—ñ–º–∫–Ω–µ–Ω–∞
        if is_images and images_folder:
            filename = await self.add_image_to_post(images_folder)

        await asyncio.sleep(random.uniform(0.7, 1.5))

        try:
            post_button_2 = self.driver.find_element(By.CSS_SELECTOR, 'button[data-testid="tweetButton"]')
            
            if post_button_2:
                post_button_2.click()
                print("‚úÖ –ü–æ—Å—Ç —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!")

                await asyncio.sleep(random.uniform(1, 2))

                try:
                    parent_element = self.driver.find_element(By.CSS_SELECTOR, '[data-testid="toast"]')
                    link_element = parent_element.find_element(By.TAG_NAME, 'a')
                    href = link_element.get_attribute('href')
                except Exception as e:
                    href = "https://x.com"
                    print(f"[ERROR] Could not find element {e}")
                await asyncio.sleep(1)
                print("–ü—Ä–æ–±—É—î–º–æ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥ —É Google —Ç–∞–±–ª–∏—Ü—é...")
                try:
                    if logs_table:
                        await add_log_entry_to_sheet(
                            logs_table,
                            get_current_datetime_shilling(),
                            href,
                            message,
                            "post",
                            self.username
                        )
                    else:
                        await add_log_entry(
                            get_current_datetime(),
                            href,
                            message,
                            "post",
                            self.username
                        )
                    print(f"üìù –õ–æ–≥ –¥–æ–¥–∞–Ω–æ: {href}")
                except Exception as log_error:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—ñ –ø–æ—Å—Ç—É: {log_error}")
            if filename:  # –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Ñ–∞–π–ª —ñ—Å–Ω—É—î
                try:
                    await delete_image_by_name(filename)
                    print(f"üóëÔ∏è –¢–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª {filename} –≤–∏–¥–∞–ª–µ–Ω–æ")
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ {filename}: {e}")
            else:
                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∫–ª—ñ–∫–Ω—É—Ç–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç–≤—ñ—Ç—É")
                return
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∫–Ω–æ–ø–∫–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç–≤—ñ—Ç—É: {e}")
            return


    async def like_a_posts_shilling(self, amount_of_likes, min_time, max_time, logs_table, main_words, search_hours=24):
        await self.open_explore_shilling(main_words)
        liked_post = 0
        no_posts_count = 0
        
        while liked_post < amount_of_likes:
            try:
                posts = self.driver.find_elements(By.CSS_SELECTOR, 'article[data-testid="tweet"]')
                print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç—ñ–≤ –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ")
                
                if not posts:
                    no_posts_count += 1
                    print(f"–ü–æ—Å—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (—Å–ø—Ä–æ–±–∞ {no_posts_count}/20), —Å–∫—Ä–æ–ª–∏–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É...")
                    
                    if no_posts_count > 10:
                        print("üö® –ü–æ–Ω–∞–¥ 10 —Å–ø—Ä–æ–± –±–µ–∑ –ø–æ—Å—Ç—ñ–≤, –∞–∫–∞—É–Ω—Ç –º–∞—î –ø—Ä–æ–±–ª–µ–º–∏!")
                        await handle_bad_account(self, "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –ª–æ–≥—ñ–Ω –¥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω–Ω—ñ —á–∏ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ª–æ–≥—ñ–Ω–∏—Ç–∏—Å—å –≤ –∞–∫–∫–∞—É–Ω—Ç –≤ —Ä—É—á–Ω—É, –ø—ñ—Å–ª—è –≤–¥–∞–ª–æ–≥–æ –ª–æ–≥—ñ–Ω—É –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—ñ")
                        return
                    elif no_posts_count >= 10:
                        print("üîÑ –ü–æ–Ω–∞–¥ 10 —Å–ø—Ä–æ–± –±–µ–∑ –ø–æ—Å—Ç—ñ–≤, –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É...")
                        try:
                            self.driver.refresh()
                            await asyncio.sleep(random.uniform(min_time, max_time))
                            no_posts_count = 0
                            print("‚úÖ –°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞")
                            await self.open_explore_shilling(main_words)
                        except Exception as refresh_error:
                            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ: {refresh_error}")
                            await self.open_explore_shilling(main_words)
                            no_posts_count = 0
                    
                    await self.smooth_scroll()
                    await asyncio.sleep(random.uniform(min_time, max_time))
                    continue
                
                no_posts_count = 0
                
                for post in posts:
                    if liked_post >= amount_of_likes:
                        break
                    
                    if self.check_if_verified(post):
                        try:
                            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Å—Ç –Ω–µ —Å—Ç–∞—Ä—ñ—à–∏–π –∑–∞ search_hours
                            if not self.is_post_within_hours(post, search_hours):
                                print("‚è∞ –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å—Ç–∞—Ä–∏–π –ø–æ—Å—Ç")
                                continue
                            
                            self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", post)
                            await asyncio.sleep(random.uniform(min_time, max_time))

                            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Å—Ç –º—ñ—Å—Ç–∏—Ç—å –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
                            if not self.contains_search_keywords(post, main_words):
                                print("üîç –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Å—Ç –±–µ–∑ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤")
                                continue

                            like_button = post.find_element(By.CSS_SELECTOR, 'button[data-testid="like"]')

                            # –î–∞–Ω—ñ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –ª–∞–π–∫–∞
                            post_link = self.get_post_link(post)
                            post_text = self.get_post_text(post)

                            chance = random.randint(1, 100)
                            print(chance)
                            if chance > 50:
                                if await self.safe_click(like_button, "–∫–Ω–æ–ø–∫—É –ª–∞–π–∫—É"):
                                    liked_post += 1
                                    print(f"–õ–∞–π–∫–Ω—É—Ç–æ –ø–æ—Å—Ç –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞! –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {liked_post}/{amount_of_likes}")

                                    # –õ–æ–≥—É—î–º–æ –ª–∞–π–∫ —É Google Sheets
                                    # try:
                                    #     if logs_table:
                                    #         await add_log_entry_to_sheet(
                                    #             logs_table,
                                    #             get_current_datetime_shilling(),
                                    #             post_link or "https://x.com",
                                    #             post_text,
                                    #             "like",
                                    #             self.username
                                    #         )
                                    #     else:
                                    #         await add_log_entry(
                                    #             get_current_datetime(),
                                    #             post_link or "https://x.com",
                                    #             post_text,
                                    #             "like",
                                    #             self.username
                                    #         )
                                    #     print(f"üìù –õ–æ–≥ –ª–∞–π–∫–∞ –¥–æ–¥–∞–Ω–æ: {post_link}")
                                    # except Exception as log_error:
                                    #     print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—ñ –ª–∞–π–∫–∞: {log_error}")

                                else:
                                    print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ª–∞–π–∫–Ω—É—Ç–∏ –ø–æ—Å—Ç")

                                await asyncio.sleep(random.uniform(min_time, max_time))
                            else:
                                print("–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Å—Ç (–≤–∏–ø–∞–¥–∫–æ–≤–æ)")
                                await asyncio.sleep(random.uniform(0.6, 1.5))

                        except Exception as e:
                            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–∞–π–∫—É –ø–æ—Å—Ç–∞: {e}")
                            continue
                
                if liked_post < amount_of_likes:
                    print(f"–ü–æ—Ç—Ä—ñ–±–Ω–æ —â–µ {amount_of_likes - liked_post} –ª–∞–π–∫—ñ–≤, —Å–∫—Ä–æ–ª–∏–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É...")
                    for _ in range(random.randint(4, 6)):
                        await self.smooth_scroll()
                    await asyncio.sleep(random.uniform(min_time, max_time))
                    
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –ø–æ—Å—Ç—ñ–≤: {e}")
                await self.smooth_scroll()
                await asyncio.sleep(random.uniform(min_time, max_time))
        
        print(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ! –õ–∞–π–∫–Ω—É—Ç–æ {liked_post} –ø–æ—Å—Ç—ñ–≤")


    async def comment_on_posts_shilling(self, amount_of_comments, min_time, max_time, logs_table, main_words, search_hours=24, is_images=False, images_folder=""):
        """–ö–æ–º–µ–Ω—Ç—É—î–º–æ –ø–æ—Å—Ç–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤"""
        commented_posts = 0
        last_processed_index = 0
        no_posts_count = 0

        await self.open_explore_shilling(main_words)
        await asyncio.sleep(random.uniform(1, 3))


        while commented_posts < amount_of_comments:
            try:
                posts = self.driver.find_elements(By.CSS_SELECTOR, 'article[data-testid="tweet"]')
                print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç—ñ–≤ –¥–ª—è –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è")
                
                if not posts:
                    no_posts_count += 1
                    print(f"–ü–æ—Å—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (—Å–ø—Ä–æ–±–∞ {no_posts_count}/20), —Å–∫—Ä–æ–ª–∏–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É...")
                    
                    if no_posts_count > 10:
                        print("üö® –ü–æ–Ω–∞–¥ 10 —Å–ø—Ä–æ–± –±–µ–∑ –ø–æ—Å—Ç—ñ–≤, –∞–∫–∞—É–Ω—Ç –º–∞—î –ø—Ä–æ–±–ª–µ–º–∏!")
                        await handle_bad_account(self, "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –ª–æ–≥—ñ–Ω –¥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω–Ω—ñ —á–∏ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ª–æ–≥—ñ–Ω–∏—Ç–∏—Å—å –≤ –∞–∫–∫–∞—É–Ω—Ç –≤ —Ä—É—á–Ω—É, –ø—ñ—Å–ª—è –≤–¥–∞–ª–æ–≥–æ –ª–æ–≥—ñ–Ω—É –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—ñ")
                        return
                    elif no_posts_count >= 10:
                        print("üîÑ –ü–æ–Ω–∞–¥ 10 —Å–ø—Ä–æ–± –±–µ–∑ –ø–æ—Å—Ç—ñ–≤, –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É...")
                        try:
                            self.driver.refresh()
                            await asyncio.sleep(random.uniform(min_time, max_time))
                            no_posts_count = 0 
                            last_processed_index = 0
                            print("‚úÖ –°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞")
                            await self.open_explore_shilling(main_words)
                        except Exception as refresh_error:
                            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ: {refresh_error}")
                            await self.open_explore_shilling(main_words)
                            no_posts_count = 0
                            last_processed_index = 0
                    
                    await self.smooth_scroll()
                    await asyncio.sleep(random.uniform(min_time, max_time))
                    continue
                
                no_posts_count = 0
                
                for i in range(last_processed_index, len(posts)):
                    if commented_posts >= amount_of_comments:
                        break
                    
                    post = posts[i]
                    print(f"–û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ—Å—Ç {i+1}/{len(posts)} (—ñ–Ω–¥–µ–∫—Å: {i})")
                    
                    if self.is_own_post(post):
                        print("–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤–ª–∞—Å–Ω–∏–π –ø–æ—Å—Ç")
                        continue
                    
                    if self.check_if_verified(post):
                        try:
                            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Å—Ç –Ω–µ —Å—Ç–∞—Ä—ñ—à–∏–π –∑–∞ search_hours
                            if not self.is_post_within_hours(post, search_hours):
                                print("‚è∞ –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å—Ç–∞—Ä–∏–π –ø–æ—Å—Ç")
                                continue

                            try:
                                post_text_element = post.find_element(By.CSS_SELECTOR, 'div[data-testid="tweetText"]')
                                post_text = post_text_element.text
                                print(f"–ó–Ω–∞–π–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞: {post_text[:50]}...")
                            except Exception as e:
                                print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞: {e}")
                                continue

                            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Å—Ç –º—ñ—Å—Ç–∏—Ç—å –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
                            if not self.contains_search_keywords(post, main_words):
                                print("üîç –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Å—Ç –±–µ–∑ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤")
                                continue

                            self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", post)
                            await asyncio.sleep(random.uniform(0.5, 1.5))
                            
                            
                            try:
                                comment_button = post.find_element(By.CSS_SELECTOR, 'button[data-testid="reply"]')
                                
                                if comment_button.is_displayed() and comment_button.is_enabled():
                                    try:
                                        restriction_indicators = post.find_elements(By.CSS_SELECTOR, '[data-testid="reply-restricted"]')
                                        if restriction_indicators:
                                            print("‚ö†Ô∏è –ü–æ—Å—Ç –º–∞—î –æ–±–º–µ–∂–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
                                            continue
                                    except:
                                        pass
                                    
                                    if await self.safe_click(comment_button, "–∫–Ω–æ–ø–∫—É –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è"):
                                        await asyncio.sleep(random.uniform(min_time, max_time))
                                    else:
                                        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∫–ª—ñ–∫–Ω—É—Ç–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è")
                                        continue
                                else:
                                    print("–ö–Ω–æ–ø–∫–∞ –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –∫–ª—ñ–∫–∞–±–µ–ª—å–Ω–∞")
                                    continue
                            except Exception as e:
                                continue
                            
                            await asyncio.sleep(random.uniform(min_time, max_time))
                            
                            if await self.handle_comment_restrictions():
                                print("‚ö†Ô∏è –û–±–º–µ–∂–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Å—Ç")
                                continue
                            
                            try:
                                comment_field = WebDriverWait(self.driver, 10).until(
                                    EC.presence_of_element_located((By.CSS_SELECTOR, 'div[aria-label="Post text"]'))
                                )
                            except Exception as e:
                                print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø–æ–ª–µ –∫–æ–º–µ–Ω—Ç–∞—Ä—è: {e}")
                                try:
                                    close_button = self.driver.find_element(By.CSS_SELECTOR, 'button[aria-label="Close"]')
                                    await self.safe_click(close_button, "–∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä–∏—Ç—Ç—è")
                                except:
                                    pass
                                continue

                            comment_text = await get_comment_shilling(post_text, main_words)

                            print(comment_text)

                            clean_comment = re.sub(r'[^\x00-\x7F]+', '', comment_text)
                            
                            for char in clean_comment:
                                await asyncio.sleep(random.uniform(0.1, 0.3))
                                comment_field.send_keys(char)
                            
                            await asyncio.sleep(random.uniform(0.5, 1.5))

                            # –î–æ–¥–∞—î–º–æ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—è —è–∫—â–æ –≤–æ–Ω–∞ —É–≤—ñ–º–∫–Ω–µ–Ω–∞
                            if is_images and images_folder:
                                filename = await self.add_image_to_post(images_folder)

                            comment_field.send_keys(Keys.RETURN)
                            
                            reply_button = self.driver.find_element(By.CSS_SELECTOR, 'button[data-testid="tweetButton"]')
                            if await self.safe_click(reply_button, "–∫–Ω–æ–ø–∫—É –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—è"):
                                print("‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
                                await asyncio.sleep(random.uniform(1, 2))

                                try:
                                    parent_element = self.driver.find_element(By.CSS_SELECTOR, '[data-testid="toast"]')
                                    link_element = parent_element.find_element(By.TAG_NAME, 'a')
                                    href = link_element.get_attribute('href')
                                except Exception as e:
                                    href = "https://x.com (–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ—Å—Ç)"
                                    print(f"[ERROR] Could not find element {e}")

                                await asyncio.sleep(random.uniform(3, 5))
                            if filename:  # –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ñ–∞–π–ª
                                try:
                                    await delete_image_by_name(filename)
                                    print(f"üóëÔ∏è –¢–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª {filename} –≤–∏–¥–∞–ª–µ–Ω–æ")
                                except Exception as e:
                                    print("–Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É, —ó—ó –Ω–µ —ñ—Å–Ω—É—î —á–∏ —Å—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞")
                                
                                try:
                                    if logs_table:
                                        await add_log_entry_to_sheet(
                                            logs_table,
                                            get_current_datetime_shilling(),
                                            href,
                                            clean_comment,
                                            "reply",
                                            self.username
                                        )
                                        print(f"üìù –õ–æ–≥ –∫–æ–º–µ–Ω—Ç–∞—Ä—è –¥–æ–¥–∞–Ω–æ: {href}")
                                except Exception as log_error:
                                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—è: {log_error}")
                            else:
                                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä")
                                continue
                            
                            await asyncio.sleep(random.uniform(min_time, max_time))
                            
                            
                            commented_posts += 1
                            last_processed_index = i + 1
                            print(f"‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ! –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {commented_posts}/{amount_of_comments}")
                            
                            await asyncio.sleep(random.uniform(min_time, max_time))
                            
                        except Exception as e:
                            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—ñ –ø–æ—Å—Ç–∞: {e}")
                            continue
                
                if commented_posts < amount_of_comments:
                    print(f"–ü–æ—Ç—Ä—ñ–±–Ω–æ —â–µ {amount_of_comments - commented_posts} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤, —Å–∫—Ä–æ–ª–∏–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É...")
                    for _ in range(random.randint(4, 6)):
                        await self.smooth_scroll()
                    await asyncio.sleep(random.uniform(2, 4))
                    last_processed_index = 0
                    
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –ø–æ—Å—Ç—ñ–≤ –¥–ª—è –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è: {e}")
                await self.smooth_scroll()
                await asyncio.sleep(random.uniform(2, 4))
        
        print(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ! –î–æ–¥–∞–Ω–æ {commented_posts} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤")
    
    def get_post_time(self, post) -> float:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î, —Å–∫—ñ–ª—å–∫–∏ –≥–æ–¥–∏–Ω —Ç–æ–º—É –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –ø–æ—Å—Ç.
    –Ø–∫—â–æ —á–∞—Å –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ ‚Üí 0.0
    """

    # ‚úÖ –°–ø–∏—Å–æ–∫ –º–æ–∂–ª–∏–≤–∏—Ö CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä—ñ–≤ –¥–ª—è –ø–æ—à—É–∫—É —á–∞—Å—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó
    selectors = [
        'time[datetime]',
        'a[href*="/status/"] time',
        'div[data-testid="tweetText"] ~ div time'
    ]

    time_el = None  # –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ —á–∞—Å—É

    # ‚úÖ –ü–µ—Ä–µ–±–∏—Ä–∞—î–º–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏ –æ–¥–∏–Ω –∑–∞ –æ–¥–Ω–∏–º
    for sel in selectors:
        try:
            time_el = post.find_element(By.CSS_SELECTOR, sel)
            if time_el:
                break
        except Exception:
            continue

    if not time_el:
        return 0.0  # —è–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ —á–∞—Å

    # ‚úÖ –ë–µ—Ä–µ–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∞—Ç—Ä–∏–±—É—Ç–∞ datetime
    dt_attr = time_el.get_attribute("datetime")
    if not dt_attr:
        return 0.0

    try:
        post_dt = datetime.fromisoformat(dt_attr.replace("Z", "+00:00"))
        now = datetime.now(timezone.utc)
        return (now - post_dt).total_seconds() / 3600.0  # —Ä—ñ–∑–Ω–∏—Ü—è –≤ –≥–æ–¥–∏–Ω–∞—Ö
    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É —á–∞—Å—É: {e}")
        return 0.0
    
    def is_post_within_hours(self, post, search_hours: float) -> bool:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø–æ—Å—Ç –Ω–µ —Å—Ç–∞—Ä—ñ—à–∏–π –∑–∞ –≤–∫–∞–∑–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω

    Args:
        post: WebElement –ø–æ—Å—Ç–∞
        search_hours: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω –¥–ª—è –ø–æ—à—É–∫—É

    Returns:
        bool: True —è–∫—â–æ –ø–æ—Å—Ç –≤ –º–µ–∂–∞—Ö –≥–æ–¥–∏–Ω, False —è–∫—â–æ —Å—Ç–∞—Ä—ñ—à–∏–π
    """
    try:
        hours_ago = self.get_post_time(post)  # —Ç–µ–ø–µ—Ä get_post_time –ø–æ–≤–µ—Ä—Ç–∞—î –ª–∏—à–µ —á–∏—Å–ª–æ
        if hours_ago == 0.0:
            return True  # —è–∫—â–æ —á–∞—Å –Ω–µ –∑—á–∏—Ç–∞–ª–∏ ‚Äì –Ω–µ –±–ª–æ–∫—É—î–º–æ
        if hours_ago <= float(search_hours):
            print(f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ {hours_ago:.1f} –≥–æ–¥–∏–Ω —Ç–æ–º—É (–≤ –º–µ–∂–∞—Ö {search_hours} –≥–æ–¥–∏–Ω)")
            return True
        else:
            print(f"‚è∞ –ü–æ—Å—Ç –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ {hours_ago:.1f} –≥–æ–¥–∏–Ω —Ç–æ–º—É (—Å—Ç–∞—Ä—ñ—à–∏–π –∑–∞ {search_hours} –≥–æ–¥–∏–Ω)")
            return False
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —á–∞—Å—É –ø–æ—Å—Ç–∞: {e}")
        return True  # —è–∫—â–æ –ø–æ–º–∏–ª–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É
    
    def contains_search_keywords(self, post, search_keywords):
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø–æ—Å—Ç –º—ñ—Å—Ç–∏—Ç—å –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –∑ search_keywords
        
        Args:
            post: WebElement –ø–æ—Å—Ç–∞
            search_keywords: –°–ø–∏—Å–æ–∫ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –¥–ª—è –ø–æ—à—É–∫—É
            
        Returns:
            bool: True —è–∫—â–æ –ø–æ—Å—Ç –º—ñ—Å—Ç–∏—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω–µ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ, False —è–∫—â–æ –Ω—ñ
        """
        try:
            if not search_keywords:
                print("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É")
                return True
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
            post_text = self.get_post_text(post)
            if not post_text:
                print("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞")
                return False
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º–æ —Ç–µ–∫—Å—Ç —Ç–∞ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –≤ –Ω–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
            post_text_lower = post_text.lower()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω–µ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ
            found_keywords = []
            for keyword in search_keywords:
                keyword_lower = keyword.lower()
                if keyword_lower in post_text_lower:
                    found_keywords.append(keyword)
            
            if found_keywords:
                print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –≤ –ø–æ—Å—Ç—ñ: {found_keywords}")
                return True
            else:
                print(f"üîç –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ø–æ—Å—Ç—ñ. –®—É–∫–∞–ª–∏: {search_keywords}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤: {e}")
            return True  # –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É
    
    async def big_action_shilling(self, actions_count, settings, logs_table, main_words, search_hours=24, is_images=False, images_folder=""):
        """
        –í–∏–∫–æ–Ω—É—î –≤–∫–∞–∑–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥—ñ–π –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö –ø–æ—Å—Ç–∞—Ö: –ª–∞–π–∫ + —Ä–µ–ø–æ—Å—Ç + –∫–æ–º–µ–Ω—Ç–∞—Ä + —Ä–µ–ø–æ—Å—Ç –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º + –≤–ª–∞—Å–Ω–∏–π –ø–æ—Å—Ç
        
        Args:
            actions_count: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥—ñ–π –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            settings: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä—É–ø–∏
            logs_table: –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–∞–±–ª–∏—Ü—é –ª–æ–≥—ñ–≤
            main_words: –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É
            search_hours: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –≤—ñ–∫ –ø–æ—Å—Ç–∞ –≤ –≥–æ–¥–∏–Ω–∞—Ö
            is_images: –ß–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏
            images_folder: –ü–∞–ø–∫–∞ –∑ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
        """
        try:
            print(f"üöÄ –ü–æ—á–∏–Ω–∞—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è {actions_count} –¥—ñ–π –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö –ø–æ—Å—Ç–∞—Ö")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç–µ–π
            use_reposts = settings.get('use_reposts', True)
            use_posts = settings.get('use_posts', True)
            repost_percentage = settings.get('repost_percentage', 50)
            post_percentage = settings.get('post_percentage', 50)
            topics = settings.get('post_topics', "Crypto")
            print(f"\n\n\n {topics} \n\n\n")
            
            print(f"üìä –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç–µ–π:")
            print(f"   - –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä–µ–ø–æ—Å—Ç—ñ–≤: {use_reposts}")
            print(f"   - –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤: {use_posts}")
            print(f"   - –ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å —Ä–µ–ø–æ—Å—Ç—É: {repost_percentage}%")
            print(f"   - –ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –ø–æ—Å—Ç–∞: {post_percentage}%")
            
            # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ø–æ—à—É–∫
            await self.open_explore_shilling(main_words)
            await asyncio.sleep(random.uniform(2, 4))
            
            # –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç—ñ–≤ –ø–æ—Å—Ç—ñ–≤, –Ω–∞ —è–∫–∏—Ö –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω—ñ –¥—ñ—ó
            processed_posts_texts = []
            
            # –í–∏–∫–æ–Ω—É—î–º–æ –¥—ñ—ó
            for i in range(actions_count):
                print(f"üîÑ –í–∏–∫–æ–Ω—É—î–º–æ –¥—ñ—é {i + 1}/{actions_count}")
                
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø—ñ–¥—Ö–æ–¥—è—â–∏–π –ø–æ—Å—Ç
                post = await self.find_validated_post(settings, topics, search_hours, processed_posts_texts)
                if not post:
                    print("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ–¥—Ö–æ–¥—è—â–∏–π –ø–æ—Å—Ç, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥—ñ—é")
                    continue
                
                # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø–æ—Å—Ç–∞
                post_text = self.get_post_text(post)
                post_link = self.get_post_link(post)
                
                if not post_text:
                    print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞")
                    continue
                
                print(f"üìù –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞: {post_text[:100]}...")
                
                # –°–∫—Ä–æ–ª–∏–º–æ –¥–æ –ø–æ—Å—Ç–∞ –ø–µ—Ä–µ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è–º –¥—ñ–π
                print("üìú –°–∫—Ä–æ–ª–∏–º–æ –¥–æ –ø–æ—Å—Ç–∞...")
                self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", post)
                await asyncio.sleep(random.uniform(1, 2))
                
                # –í–∏–∫–æ–Ω—É—î–º–æ –≤—Å—ñ –¥—ñ—ó –Ω–∞ —Ü—å–æ–º—É –ø–æ—Å—Ç—ñ
                actions_performed = 0
                
                # 1. –õ–ê–ô–ö (–∑–∞–≤–∂–¥–∏ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è)
                print("‚ù§Ô∏è –í–∏–∫–æ–Ω—É—î–º–æ –ª–∞–π–∫")
                if await self.perform_like_action(post, logs_table):
                    print("‚úÖ –õ–∞–π–∫ –≤–∏–∫–æ–Ω–∞–Ω–æ")
                    actions_performed += 1
                else:
                    print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–∞–π–∫—É")
                await asyncio.sleep(random.uniform(2, 4))
                
                # 2. –†–ï–ü–û–°–¢ (–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ)
                # if use_reposts:
                #     retweet_chance = random.randint(1, 100)
                #     print(f"üîÑ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å —Ä–µ–ø–æ—Å—Ç—É: {retweet_chance} <= {repost_percentage}")
                    
                #     if retweet_chance <= repost_percentage:
                #         print("‚úÖ –í–∏–∫–æ–Ω—É—î–º–æ —Ä–µ–ø–æ—Å—Ç")
                #         if await self.perform_retweet_action(post, logs_table):
                #             print("‚úÖ –†–µ–ø–æ—Å—Ç –≤–∏–∫–æ–Ω–∞–Ω–æ")
                #             actions_performed += 1
                #         else:
                #             print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–ø–æ—Å—Ç—ñ")
                #     else:
                #         print("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ä–µ–ø–æ—Å—Ç (–π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –Ω–µ –≤–∏–ø–∞–ª–∞)")
                #     await asyncio.sleep(random.uniform(2, 4))
                
                # 3. –ö–û–ú–ï–ù–¢–ê–†
                print("üí¨ –í–∏–∫–æ–Ω—É—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä")
                if await self.perform_comment_action(post, post_text, post_link, logs_table, main_words, is_images, images_folder):
                    print("‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä –≤–∏–∫–æ–Ω–∞–Ω–æ")
                    actions_performed += 1
                else:
                    print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—ñ")
                await asyncio.sleep(random.uniform(2, 4))
                
                # 4. –†–ï–ü–û–°–¢ –ó –ö–û–ú–ï–ù–¢–ê–†–ï–ú (Quote) - –ó –ü–ï–†–ï–í–Ü–†–ö–û–Æ –ô–ú–û–í–Ü–†–ù–û–°–¢–Ü
                if use_reposts:
                    retweet_chance = random.randint(1, 100)
                    print(f"üîÑ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å —Ä–µ–ø–æ—Å—Ç—É –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º: {retweet_chance} <= {repost_percentage}")
                    
                    if retweet_chance <= repost_percentage:
                        print("‚úÖ –í–∏–∫–æ–Ω—É—î–º–æ —Ä–µ–ø–æ—Å—Ç –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º")
                        if await self.perform_quote_retweet_action(post, post_text, post_link, logs_table, main_words):
                            print("‚úÖ –†–µ–ø–æ—Å—Ç –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º –≤–∏–∫–æ–Ω–∞–Ω–æ")
                            actions_performed += 1
                        else:
                            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–ø–æ—Å—Ç—ñ –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º")
                    else:
                        print("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ä–µ–ø–æ—Å—Ç –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º (–π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –Ω–µ –≤–∏–ø–∞–ª–∞)")
                    await asyncio.sleep(random.uniform(2, 4))
                
                # 5. –í–õ–ê–°–ù–ò–ô –ü–û–°–¢ (–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ)
                if use_posts:
                    post_chance = random.randint(1, 100)
                    print(f"üìù –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –≤–ª–∞—Å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {post_chance} <= {post_percentage}")
                    
                    if post_chance <= post_percentage:
                        print("‚úÖ –°—Ç–≤–æ—Ä—é—î–º–æ –≤–ª–∞—Å–Ω–∏–π –ø–æ—Å—Ç")
                        if await self.perform_own_post_action(post_text, logs_table, main_words, is_images, images_folder):
                            print("‚úÖ –í–ª–∞—Å–Ω–∏–π –ø–æ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ")
                            actions_performed += 1
                        else:
                            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–æ—Å—Ç–∞")
                    else:
                        print("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤–ª–∞—Å–Ω–∏–π –ø–æ—Å—Ç (–π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –Ω–µ –≤–∏–ø–∞–ª–∞)")
                    await asyncio.sleep(random.uniform(2, 4))
                
                print(f"‚úÖ –î—ñ—è {i + 1} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤–∏–∫–æ–Ω–∞–Ω–æ {actions_performed} –¥—ñ–π –Ω–∞ –ø–æ—Å—Ç—É")
                
                # –î–æ–¥–∞—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–æ —Å–ø–∏—Å–∫—É –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö
                if post_text:
                    processed_posts_texts.append(post_text)
                    print(f"üìù –î–æ–¥–∞–Ω–æ –ø–æ—Å—Ç –¥–æ —Å–ø–∏—Å–∫—É –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö (–≤—Å—å–æ–≥–æ: {len(processed_posts_texts)})")
                
                # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –¥—ñ—è–º–∏
                if i < actions_count - 1:
                    delay = random.uniform(5, 15)
                    print(f"‚è≥ –ó–∞—Ç—Ä–∏–º–∫–∞ {delay:.1f} —Å–µ–∫ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –¥—ñ—î—é...")
                    await asyncio.sleep(delay)
            
            print(f"üéâ –í—Å—ñ {actions_count} –¥—ñ–π –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
            return True
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –¥—ñ–π: {e}")
            return False
    
    async def find_suitable_post(self, main_words, search_hours):
        """
        –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –ø—ñ–¥—Ö–æ–¥—è—â–∏–π –ø–æ—Å—Ç –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ—ó –¥—ñ—ó
        
        Args:
            main_words: –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ—à—É–∫—É
            search_hours: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –≤—ñ–∫ –ø–æ—Å—Ç–∞
            
        Returns:
            WebElement: –ó–Ω–∞–π–¥–µ–Ω–∏–π –ø–æ—Å—Ç –∞–±–æ None
        """
        try:
            max_attempts = 20
            attempts = 0
            
            while attempts < max_attempts:
                posts = self.driver.find_elements(By.CSS_SELECTOR, 'article[data-testid="tweet"]')
                print(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç—ñ–≤ (—Å–ø—Ä–æ–±–∞ {attempts + 1}/{max_attempts})")
                
                if not posts:
                    print("üìÑ –ù–µ–º–∞—î –ø–æ—Å—Ç—ñ–≤, —Å–∫—Ä–æ–ª–∏–º–æ...")
                    await self.smooth_scroll()
                    await asyncio.sleep(random.uniform(2, 4))
                    attempts += 1
                    continue
                
                for post in posts:
                    try:
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –Ω–µ –Ω–∞—à –≤–ª–∞—Å–Ω–∏–π –ø–æ—Å—Ç
                        if self.is_own_post(post):
                            print("üö´ –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤–ª–∞—Å–Ω–∏–π –ø–æ—Å—Ç")
                            continue
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é
                        if not self.check_if_verified(post):
                            print("üö´ –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –Ω–µ–≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –ø–æ—Å—Ç")
                            continue
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∞—Å –ø–æ—Å—Ç–∞
                        if not self.is_post_within_hours(post, search_hours):
                            print("‚è∞ –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å—Ç–∞—Ä–∏–π –ø–æ—Å—Ç")
                            continue
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
                        if not self.contains_search_keywords(post, main_words):
                            print("üîç –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Å—Ç –±–µ–∑ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤")
                            continue
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–Ω–∞ –∫–æ–º–µ–Ω—Ç—É–≤–∞—Ç–∏
                        try:
                            comment_button = post.find_element(By.CSS_SELECTOR, 'button[data-testid="reply"]')
                            if not comment_button.is_displayed() or not comment_button.is_enabled():
                                print("üö´ –ü–æ—Å—Ç –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è")
                                continue
                        except:
                            print("üö´ –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è")
                            continue
                        
                        print("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø—ñ–¥—Ö–æ–¥—è—â–∏–π –ø–æ—Å—Ç!")
                        return post
                        
                    except Exception as e:
                        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø–æ—Å—Ç–∞: {e}")
                        continue
                
                # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –ø—ñ–¥—Ö–æ–¥—è—â–∏–π –ø–æ—Å—Ç, —Å–∫—Ä–æ–ª–∏–º–æ
                print("üìÑ –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ–¥—Ö–æ–¥—è—â–∏–π –ø–æ—Å—Ç, —Å–∫—Ä–æ–ª–∏–º–æ...")
                await self.smooth_scroll()
                await asyncio.sleep(random.uniform(2, 4))
                attempts += 1
            
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø—ñ–¥—Ö–æ–¥—è—â–∏–π –ø–æ—Å—Ç –ø—ñ—Å–ª—è –≤—Å—ñ—Ö —Å–ø—Ä–æ–±")
            return None
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –ø–æ—Å—Ç–∞: {e}")
            return None
    
    async def perform_like_action(self, post, logs_table):
        """–í–∏–∫–æ–Ω—É—î –ª–∞–π–∫ –ø–æ—Å—Ç–∞"""
        try:
            # –î–æ–¥–∞—Ç–∫–æ–≤–æ —Å–∫—Ä–æ–ª–∏–º–æ –¥–æ –ø–æ—Å—Ç–∞
            self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", post)
            await asyncio.sleep(random.uniform(0.5, 1))
            
            # –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ª–∞–π–∫—É
            like_button = None
            selectors = [
                'button[data-testid="like"]',
                'button[data-testid="likeButton"]',
                'button[aria-label*="Like"]',
                'button[aria-label*="–ª–∞–π–∫"]',
                'div[data-testid="like"]',
                'div[role="button"][data-testid="like"]'
            ]
            
            for selector in selectors:
                try:
                    like_button = post.find_element(By.CSS_SELECTOR, selector)
                    if like_button.is_displayed():
                        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫—É –ª–∞–π–∫—É –∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
                        break
                except:
                    continue
            
            if not like_button:
                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –ª–∞–π–∫—É")
                return False
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –µ–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∏–º–∏–π
            if not like_button.is_displayed():
                print("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –ª–∞–π–∫—É –Ω–µ –≤–∏–¥–∏–º–∞, —Å–ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑ —Å–∫—Ä–æ–ª–∏—Ç–∏...")
                self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", post)
                await asyncio.sleep(random.uniform(0.5, 1))
            
            if await self.safe_click(like_button, "–∫–Ω–æ–ø–∫—É –ª–∞–π–∫—É"):
                print("‚ù§Ô∏è –õ–∞–π–∫ –≤–∏–∫–æ–Ω–∞–Ω–æ")
                return True
            else:
                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –ª–∞–π–∫")
                return False
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–∞–π–∫—É: {e}")
            return False
    
    async def perform_retweet_action(self, post, logs_table):
        """–í–∏–∫–æ–Ω—É—î –∑–≤–∏—á–∞–π–Ω–∏–π —Ä–µ–ø–æ—Å—Ç"""
        try:
            # –î–æ–¥–∞—Ç–∫–æ–≤–æ —Å–∫—Ä–æ–ª–∏–º–æ –¥–æ –ø–æ—Å—Ç–∞
            self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", post)
            await asyncio.sleep(random.uniform(0.5, 1))
            
            # –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–ø–æ—Å—Ç—É
            retweet_button = None
            selectors = [
                'button[data-testid="retweet"]',
                'button[data-testid="unretweet"]',
                'button[data-testid="retweetButton"]',
                'button[data-testid="unretweetButton"]',
                'button[aria-label*="Retweet"]',
                'button[aria-label*="—Ä–µ—Ç–≤—ñ—Ç"]',
                'div[data-testid="retweet"]',
                'div[data-testid="unretweet"]',
                'div[role="button"][data-testid="retweet"]',
                'div[role="button"][data-testid="unretweet"]'
            ]
            
            for selector in selectors:
                try:
                    retweet_button = post.find_element(By.CSS_SELECTOR, selector)
                    if retweet_button.is_displayed():
                        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫—É —Ä–µ–ø–æ—Å—Ç—É –∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
                        break
                except:
                    continue
            
            if not retweet_button:
                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É —Ä–µ–ø–æ—Å—Ç—É")
                return False
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –µ–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∏–º–∏–π
            if not retweet_button.is_displayed():
                print("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ —Ä–µ–ø–æ—Å—Ç—É –Ω–µ –≤–∏–¥–∏–º–∞, —Å–ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑ —Å–∫—Ä–æ–ª–∏—Ç–∏...")
                self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", post)
                await asyncio.sleep(random.uniform(0.5, 1))
            
            if await self.safe_click(retweet_button, "–∫–Ω–æ–ø–∫—É —Ä–µ–ø–æ—Å—Ç—É"):
                await asyncio.sleep(random.uniform(1, 2))
                
                # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ —Ä–µ–ø–æ—Å—Ç
                confirm_button = self.driver.find_element(By.CSS_SELECTOR, 'div[data-testid="retweetConfirm"]')
                if await self.safe_click(confirm_button, "–∫–Ω–æ–ø–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–µ–ø–æ—Å—Ç—É"):
                    print("üîÑ –†–µ–ø–æ—Å—Ç –≤–∏–∫–æ–Ω–∞–Ω–æ")
                    
                    # –õ–æ–≥—É—î–º–æ –¥—ñ—é
                    post_link = self.get_post_link(post)
                    post_text = self.get_post_text(post)
                    
                    try:
                        if logs_table:
                            await add_log_entry_to_sheet(
                                logs_table,
                                get_current_datetime_shilling(),
                                post_link or "https://x.com",
                                post_text,
                                "repost",
                                self.username
                            )
                        print("üìù –õ–æ–≥ —Ä–µ–ø–æ—Å—Ç—É –¥–æ–¥–∞–Ω–æ")
                    except Exception as log_error:
                        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—ñ —Ä–µ–ø–æ—Å—Ç—É: {log_error}")
                    
                    return True
                else:
                    print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ä–µ–ø–æ—Å—Ç")
                    return False
            else:
                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –∫–Ω–æ–ø–∫—É —Ä–µ–ø–æ—Å—Ç—É")
                return False
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–ø–æ—Å—Ç—ñ: {e}")
            return False
    
    async def perform_comment_action(self, post, post_text, post_link, logs_table, main_words, is_images=False, images_folder=""):
        """–í–∏–∫–æ–Ω—É—î –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –ø–æ—Å—Ç–∞"""
        try:
            # –°–∫—Ä–æ–ª–∏–º–æ –¥–æ –ø–æ—Å—Ç–∞
            self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", post)
            await asyncio.sleep(random.uniform(0.5, 1.5))
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–Ω–æ–ø–∫—É –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è
            comment_button = post.find_element(By.CSS_SELECTOR, 'button[data-testid="reply"]')
            
            if not await self.safe_click(comment_button, "–∫–Ω–æ–ø–∫—É –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è"):
                return False
            
            await asyncio.sleep(random.uniform(1, 2))
            
            # –û–±—Ä–æ–±–ª—è—î–º–æ –æ–±–º–µ–∂–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è
            if await self.handle_comment_restrictions():
                print("‚ö†Ô∏è –û–±–º–µ–∂–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
                return False
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–ª–µ –∫–æ–º–µ–Ω—Ç–∞—Ä—è
            comment_field = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, 'div[aria-label="Post text"]'))
            )
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä —á–µ—Ä–µ–∑ AI
            comment_text = await get_comment_shilling(post_text, main_words)
            clean_comment = re.sub(r'[^\x00-\x7F]+', '', comment_text)
            
            # –í–≤–æ–¥–∏–º–æ —Ç–µ–∫—Å—Ç
            for char in clean_comment:
                await asyncio.sleep(random.uniform(0.1, 0.3))
                comment_field.send_keys(char)
            
            await asyncio.sleep(random.uniform(0.5, 1.5))
            
            # –î–æ–¥–∞—î–º–æ –∫–∞—Ä—Ç–∏–Ω–∫—É —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            filename = None
            if is_images and images_folder:
                filename = await self.add_image_to_post(images_folder)
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä
            comment_field.send_keys(Keys.RETURN)
            reply_button = self.driver.find_element(By.CSS_SELECTOR, 'button[data-testid="tweetButton"]')
            
            if not await self.safe_click(reply_button, "–∫–Ω–æ–ø–∫—É –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—è"):
                return False
            
            print("üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
            await asyncio.sleep(random.uniform(1, 2))
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä
            try:
                parent_element = self.driver.find_element(By.CSS_SELECTOR, '[data-testid="toast"]')
                link_element = parent_element.find_element(By.TAG_NAME, 'a')
                comment_link = link_element.get_attribute('href')
            except:
                comment_link = "https://x.com"
            
            # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—É –∫–∞—Ä—Ç–∏–Ω–∫—É
            if filename:
                try:
                    await delete_image_by_name(filename)
                    print(f"üóëÔ∏è –¢–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª {filename} –≤–∏–¥–∞–ª–µ–Ω–æ")
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ {filename}: {e}")
            
            # –õ–æ–≥—É—î–º–æ –¥—ñ—é
            try:
                if logs_table:
                    await add_log_entry_to_sheet(
                        logs_table,
                        get_current_datetime_shilling(),
                        comment_link,
                        clean_comment,
                        "reply",
                        self.username
                    )
                print("üìù –õ–æ–≥ –∫–æ–º–µ–Ω—Ç–∞—Ä—è –¥–æ–¥–∞–Ω–æ")
            except Exception as log_error:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—è: {log_error}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—ñ: {e}")
            return False
    
    async def perform_retweet_with_comment_action(self, post, post_text, post_link, logs_table, main_words, is_images=False, images_folder=""):
        """–í–∏–∫–æ–Ω—É—î —Ä–µ–ø–æ—Å—Ç –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º"""
        try:
            # –°–∫—Ä–æ–ª–∏–º–æ –¥–æ –ø–æ—Å—Ç–∞
            self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", post)
            await asyncio.sleep(random.uniform(0.5, 1.5))
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–Ω–æ–ø–∫—É —Ä–µ–ø–æ—Å—Ç—É
            retweet_button = post.find_element(By.CSS_SELECTOR, 'button[data-testid="retweet"]')
            
            if not await self.safe_click(retweet_button, "–∫–Ω–æ–ø–∫—É —Ä–µ–ø–æ—Å—Ç—É"):
                return False
            
            await asyncio.sleep(random.uniform(1, 2))
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–Ω–æ–ø–∫—É "Repost with comment"
            try:
                repost_with_comment_button = self.driver.find_element(By.CSS_SELECTOR, 'a[href="/compose/post"]')
                if not await self.safe_click(repost_with_comment_button, "–∫–Ω–æ–ø–∫—É —Ä–µ–ø–æ—Å—Ç—É –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º"):
                    return False
            except:
                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É —Ä–µ–ø–æ—Å—Ç—É –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º")
                return False
            
            await asyncio.sleep(random.uniform(1, 2))
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–ª–µ –¥–ª—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è
            try:
                comment_field = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, 'div[data-testid="tweetTextarea_0_label"]'))
                )
            except:
                try:
                    comment_field = self.driver.find_element(By.CSS_SELECTOR, 'div[aria-label="Post text"]')
                except:
                    print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø–æ–ª–µ –∫–æ–º–µ–Ω—Ç–∞—Ä—è")
                    return False
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä —á–µ—Ä–µ–∑ AI
            comment_text = await get_comment_shilling(post_text, main_words)
            clean_comment = re.sub(r'[^\x00-\x7F]+', '', comment_text)
            
            # –í–≤–æ–¥–∏–º–æ —Ç–µ–∫—Å—Ç
            for char in clean_comment:
                await asyncio.sleep(random.uniform(0.1, 0.3))
                comment_field.send_keys(char)
            
            await asyncio.sleep(random.uniform(0.5, 1.5))
            
            # –î–æ–¥–∞—î–º–æ –∫–∞—Ä—Ç–∏–Ω–∫—É —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            filename = None
            if is_images and images_folder:
                filename = await self.add_image_to_post(images_folder)
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–ø–æ—Å—Ç –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º
            post_button = self.driver.find_element(By.CSS_SELECTOR, 'button[data-testid="tweetButton"]')
            
            if not await self.safe_click(post_button, "–∫–Ω–æ–ø–∫—É –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ä–µ–ø–æ—Å—Ç—É –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º"):
                return False
            
            print("üîÑ –†–µ–ø–æ—Å—Ç –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
            await asyncio.sleep(random.uniform(1, 2))
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ä–µ–ø–æ—Å—Ç
            try:
                parent_element = self.driver.find_element(By.CSS_SELECTOR, '[data-testid="toast"]')
                link_element = parent_element.find_element(By.TAG_NAME, 'a')
                retweet_link = link_element.get_attribute('href')
            except:
                retweet_link = "https://x.com"
            
            # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—É –∫–∞—Ä—Ç–∏–Ω–∫—É
            if filename:  # –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ñ–∞–π–ª
                try:
                    await delete_image_by_name(filename)
                    print(f"üóëÔ∏è –¢–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª {filename} –≤–∏–¥–∞–ª–µ–Ω–æ")
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ {filename}: {e}")
            
            # –õ–æ–≥—É—î–º–æ –¥—ñ—é
            try:
                if logs_table:
                    await add_log_entry_to_sheet(
                        logs_table,
                        get_current_datetime_shilling(),
                        retweet_link,
                        clean_comment,
                        "repost_with_comment",
                        self.username
                    )
                print("üìù –õ–æ–≥ —Ä–µ–ø–æ—Å—Ç—É –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º –¥–æ–¥–∞–Ω–æ")
            except Exception as log_error:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—ñ —Ä–µ–ø–æ—Å—Ç—É –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º: {log_error}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–ø–æ—Å—Ç—ñ –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º: {e}")
            return False
    
    async def perform_own_post_action(self, post_text, logs_table, main_words, is_images=False, images_folder=""):
        """–°—Ç–≤–æ—Ä—é—î –≤–ª–∞—Å–Ω–∏–π –ø–æ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
        try:
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–Ω–æ–ø–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç–∞
            try:
                post_button = self.driver.find_element(By.CSS_SELECTOR, 'a[aria-label="Post"]')
                if not await self.safe_click(post_button, "–∫–Ω–æ–ø–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç–∞"):
                    return False
            except:
                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç–∞")
                return False
            
            await asyncio.sleep(random.uniform(1, 2))
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–ª–µ —Ç–µ–∫—Å—Ç—É
            try:
                text_field = self.driver.find_element(By.CSS_SELECTOR, 'div[aria-label="Post text"]')
            except:
                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø–æ–ª–µ —Ç–µ–∫—Å—Ç—É")
                return False
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ AI –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
            own_post_text = await get_post_shilling(main_words)
            
            # –í–≤–æ–¥–∏–º–æ —Ç–µ–∫—Å—Ç
            for char in own_post_text:
                await asyncio.sleep(random.uniform(0.15, 0.5))
                text_field.send_keys(char)
            
            await asyncio.sleep(random.uniform(0.7, 1.5))
            
            # –î–æ–¥–∞—î–º–æ –∫–∞—Ä—Ç–∏–Ω–∫—É —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            filename = None
            if is_images and images_folder:
                filename = await self.add_image_to_post(images_folder)
            
            await asyncio.sleep(random.uniform(0.7, 1.5))
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ—Å—Ç
            post_button_2 = self.driver.find_element(By.CSS_SELECTOR, 'button[data-testid="tweetButton"]')
            
            if not await self.safe_click(post_button_2, "–∫–Ω–æ–ø–∫—É –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞"):
                return False
            
            print("üìù –í–ª–∞—Å–Ω–∏–π –ø–æ—Å—Ç –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ")
            await asyncio.sleep(random.uniform(1, 2))
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ—Å—Ç
            try:
                parent_element = self.driver.find_element(By.CSS_SELECTOR, '[data-testid="toast"]')
                link_element = parent_element.find_element(By.TAG_NAME, 'a')
                own_post_link = link_element.get_attribute('href')
            except:
                own_post_link = "https://x.com"
            
            # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—É –∫–∞—Ä—Ç–∏–Ω–∫—É
            if filename:  # –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ñ–∞–π–ª
                try:
                    await delete_image_by_name(filename)
                    print(f"üóëÔ∏è –¢–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª {filename} –≤–∏–¥–∞–ª–µ–Ω–æ")
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ {filename}: {e}")
            
            # –õ–æ–≥—É—î–º–æ –¥—ñ—é
            try:
                if logs_table:
                    await add_log_entry_to_sheet(
                        logs_table,
                        get_current_datetime_shilling(),
                        own_post_link,
                        own_post_text,
                        "post",
                        self.username
                    )
                print("üìù –õ–æ–≥ –≤–ª–∞—Å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –¥–æ–¥–∞–Ω–æ")
            except Exception as log_error:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—ñ –≤–ª–∞—Å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {log_error}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –≤–ª–∞—Å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {e}")
            return False


    
    async def find_validated_post(self, settings, main_words, search_hours, processed_posts_texts=None):
        """
        –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –ø–æ—Å—Ç, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤—Å—ñ–º –∫—Ä–∏—Ç–µ—Ä—ñ—è–º –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        
        Args:
            settings: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä—É–ø–∏
            main_words: –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ—à—É–∫—É
            search_hours: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –≤—ñ–∫ –ø–æ—Å—Ç–∞
            processed_posts_texts: –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç—ñ–≤ –ø–æ—Å—Ç—ñ–≤, –Ω–∞ —è–∫–∏—Ö –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω—ñ –¥—ñ—ó
            
        Returns:
            WebElement: –ó–Ω–∞–π–¥–µ–Ω–∏–π –ø–æ—Å—Ç –∞–±–æ None
        """
        if processed_posts_texts is None:
            processed_posts_texts = []
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫—Ä–∏—Ç–µ—Ä—ñ—ó –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
            min_followers = settings.get('min_followers', 100)
            min_likes = settings.get('min_likes', 5)
            min_reposts = settings.get('min_reposts', 2)
            min_replies = settings.get('min_replies', 1)
            
            print(f"üîç –ü–æ—à—É–∫ –ø–æ—Å—Ç–∞ –∑ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏:")
            print(f"   - –ú—ñ–Ω. –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∏: {min_followers}")
            print(f"   - –ú—ñ–Ω. –ª–∞–π–∫–∏: {min_likes}")
            print(f"   - –ú—ñ–Ω. —Ä–µ–ø–æ—Å—Ç–∏: {min_reposts}")
            print(f"   - –ú—ñ–Ω. –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ: {min_replies}")
            print(f"   - –ü–æ—à—É–∫ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ: {search_hours} –≥–æ–¥–∏–Ω")
            
            max_attempts = 30
            attempts = 0
            
            while attempts < max_attempts:
                posts = self.driver.find_elements(By.CSS_SELECTOR, 'article[data-testid="tweet"]')
                print(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç—ñ–≤ (—Å–ø—Ä–æ–±–∞ {attempts + 1}/{max_attempts})")
                
                if not posts:
                    print("üìÑ –ù–µ–º–∞—î –ø–æ—Å—Ç—ñ–≤, —Å–∫—Ä–æ–ª–∏–º–æ...")
                    await self.smooth_scroll()
                    await asyncio.sleep(random.uniform(2, 4))
                    attempts += 1
                    continue
                
                for post in posts:
                    try:
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –Ω–µ –Ω–∞—à –≤–ª–∞—Å–Ω–∏–π –ø–æ—Å—Ç
                        if self.is_own_post(post):
                            print("üö´ –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤–ª–∞—Å–Ω–∏–π –ø–æ—Å—Ç")
                            continue
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é
                        if not self.check_if_verified(post):
                            print("üö´ –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –Ω–µ–≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –ø–æ—Å—Ç")
                            continue
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∞—Å –ø–æ—Å—Ç–∞
                        if not self.is_post_within_hours(post, search_hours):
                            print("‚è∞ –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å—Ç–∞—Ä–∏–π –ø–æ—Å—Ç")
                            continue
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
                        if not self.contains_search_keywords(post, main_words):
                            print("üîç –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Å—Ç –±–µ–∑ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤")
                            continue
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –æ–±—Ä–æ–±–ª—è–ª–∏ –º–∏ –≤–∂–µ —Ü–µ–π –ø–æ—Å—Ç
                        post_text = self.get_post_text(post)
                        if post_text and post_text in processed_posts_texts:
                            print("üîÑ –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π –ø–æ—Å—Ç")
                            continue
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ –∞–≤—Ç–æ—Ä–∞
                        if not self.check_author_followers(post, min_followers):
                            print(f"üë• –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Å—Ç –∞–≤—Ç–æ—Ä–∞ –∑ –º–µ–Ω—à–µ –Ω—ñ–∂ {min_followers} –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º–∏")
                            continue
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∞–π–∫—ñ–≤
                        if not self.check_post_likes(post, min_likes):
                            print(f"‚ù§Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Å—Ç –∑ –º–µ–Ω—à–µ –Ω—ñ–∂ {min_likes} –ª–∞–π–∫–∞–º–∏")
                            continue
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–ø–æ—Å—Ç—ñ–≤
                        if not self.check_post_reposts(post, min_reposts):
                            print(f"üîÑ –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Å—Ç –∑ –º–µ–Ω—à–µ –Ω—ñ–∂ {min_reposts} —Ä–µ–ø–æ—Å—Ç–∞–º–∏")
                            continue
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
                        if not self.check_post_replies(post, min_replies):
                            print(f"üí¨ –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Å—Ç –∑ –º–µ–Ω—à–µ –Ω—ñ–∂ {min_replies} –∫–æ–º–µ–Ω—Ç–∞—Ä—è–º–∏")
                            continue
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–Ω–∞ –∫–æ–º–µ–Ω—Ç—É–≤–∞—Ç–∏
                        try:
                            comment_button = post.find_element(By.CSS_SELECTOR, 'button[data-testid="reply"]')
                            if not comment_button.is_displayed() or not comment_button.is_enabled():
                                print("üö´ –ü–æ—Å—Ç –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è")
                                continue
                        except:
                            print("üö´ –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è")
                            continue
                        
                        print("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø—ñ–¥—Ö–æ–¥—è—â–∏–π –ø–æ—Å—Ç!")
                        return post
                        
                    except Exception as e:
                        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø–æ—Å—Ç–∞: {e}")
                        continue
                
                # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –ø—ñ–¥—Ö–æ–¥—è—â–∏–π –ø–æ—Å—Ç, —Å–∫—Ä–æ–ª–∏–º–æ
                print("üìÑ –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ–¥—Ö–æ–¥—è—â–∏–π –ø–æ—Å—Ç, —Å–∫—Ä–æ–ª–∏–º–æ...")
                await self.smooth_scroll()
                await asyncio.sleep(random.uniform(2, 4))
                attempts += 1
            
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø—ñ–¥—Ö–æ–¥—è—â–∏–π –ø–æ—Å—Ç –ø—ñ—Å–ª—è –≤—Å—ñ—Ö —Å–ø—Ä–æ–±")
            return None
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –≤–∞–ª—ñ–¥–æ–≤–∞–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {e}")
            return None
    
    async def perform_quote_retweet_action(self, post, post_text, post_link, logs_table, main_words):
        """–í–∏–∫–æ–Ω—É—î —Ä–µ–ø–æ—Å—Ç –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º (Quote)"""
        try:
            # –î–æ–¥–∞—Ç–∫–æ–≤–æ —Å–∫—Ä–æ–ª–∏–º–æ –¥–æ –ø–æ—Å—Ç–∞
            self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", post)
            await asyncio.sleep(random.uniform(0.5, 1))
            
            # –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–ø–æ—Å—Ç—É
            retweet_button = None
            selectors = [
                'button[data-testid="retweet"]',
                'button[data-testid="unretweet"]',
                'button[data-testid="retweetButton"]',
                'button[data-testid="unretweetButton"]',
                'button[aria-label*="Retweet"]',
                'button[aria-label*="—Ä–µ—Ç–≤—ñ—Ç"]',
                'div[data-testid="retweet"]',
                'div[data-testid="unretweet"]',
                'div[role="button"][data-testid="retweet"]',
                'div[role="button"][data-testid="unretweet"]'
            ]
            
            for selector in selectors:
                try:
                    retweet_button = post.find_element(By.CSS_SELECTOR, selector)
                    if retweet_button.is_displayed():
                        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫—É —Ä–µ–ø–æ—Å—Ç—É –∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
                        break
                except:
                    continue
            
            if not retweet_button:
                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É —Ä–µ–ø–æ—Å—Ç—É")
                return False
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –µ–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∏–º–∏–π
            if not retweet_button.is_displayed():
                print("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ —Ä–µ–ø–æ—Å—Ç—É –Ω–µ –≤–∏–¥–∏–º–∞, —Å–ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑ —Å–∫—Ä–æ–ª–∏—Ç–∏...")
                self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", post)
                await asyncio.sleep(random.uniform(0.5, 1))
            
            if not await self.safe_click(retweet_button, "–∫–Ω–æ–ø–∫—É —Ä–µ–ø–æ—Å—Ç—É"):
                return False
            
            await asyncio.sleep(random.uniform(1, 2))
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–Ω–æ–ø–∫—É Quote (—Ä–µ–ø–æ—Å—Ç –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º)
            try:
                quote_button = self.driver.find_element(By.CSS_SELECTOR, 'a[role="menuitem"]')
                if not await self.safe_click(quote_button, "–∫–Ω–æ–ø–∫—É Quote"):
                    return False
            except:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è Quote
                try:
                    quote_button = self.driver.find_element(By.CSS_SELECTOR, 'div[data-testid="retweetConfirm"]')
                    if not await self.safe_click(quote_button, "–∫–Ω–æ–ø–∫—É Quote (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É)"):
                        return False
                except:
                    print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É Quote")
                    return False
            
            await asyncio.sleep(random.uniform(1, 2))
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–ª–µ –¥–ª—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è
            try:
                comment_field = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, 'div[aria-label="Post text"]'))
                )
            except:
                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø–æ–ª–µ –¥–ª—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è")
                return False
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä —á–µ—Ä–µ–∑ AI
            comment_text = await get_comment_shilling(post_text, main_words)
            clean_comment = re.sub(r'[^\x00-\x7F]+', '', comment_text)
            
            # –í–≤–æ–¥–∏–º–æ —Ç–µ–∫—Å—Ç
            for char in clean_comment:
                await asyncio.sleep(random.uniform(0.1, 0.3))
                comment_field.send_keys(char)
            
            await asyncio.sleep(random.uniform(0.5, 1.5))
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–ø–æ—Å—Ç –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º
            try:
                post_button = self.driver.find_element(By.CSS_SELECTOR, 'button[class="css-175oi2r r-sdzlij r-1phboty r-rs99b7 r-lrvibr r-1cwvpvk r-2yi16 r-1qi8awa r-3pj75a r-1loqt21 r-o7ynqc r-6416eg r-jc7xae r-1ny4l3l"]')
                if not await self.safe_click(post_button, "–∫–Ω–æ–ø–∫—É –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ä–µ–ø–æ—Å—Ç—É –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º"):
                    return False
            except:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä
                try:
                    post_button = self.driver.find_element(By.CSS_SELECTOR, 'button[data-testid="tweetButton"]')
                    if not await self.safe_click(post_button, "–∫–Ω–æ–ø–∫—É –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ä–µ–ø–æ—Å—Ç—É –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É)"):
                        return False
                except:
                    print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ä–µ–ø–æ—Å—Ç—É –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º")
                    return False
            
            print("üîÑ –†–µ–ø–æ—Å—Ç –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
            await asyncio.sleep(random.uniform(1, 2))
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ä–µ–ø–æ—Å—Ç
            try:
                parent_element = self.driver.find_element(By.CSS_SELECTOR, '[data-testid="toast"]')
                link_element = parent_element.find_element(By.TAG_NAME, 'a')
                retweet_link = link_element.get_attribute('href')
            except:
                retweet_link = "https://x.com"
            
            # –õ–æ–≥—É—î–º–æ –¥—ñ—é
            try:
                if logs_table:
                    await add_log_entry_to_sheet(
                        logs_table,
                        get_current_datetime_shilling(),
                        retweet_link,
                        clean_comment,
                        "quote_retweet",
                        self.username
                    )
                print("üìù –õ–æ–≥ —Ä–µ–ø–æ—Å—Ç—É –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º –¥–æ–¥–∞–Ω–æ")
            except Exception as log_error:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—ñ —Ä–µ–ø–æ—Å—Ç—É –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º: {log_error}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–ø–æ—Å—Ç—ñ –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º: {e}")
            return False
    
    def check_author_followers(self, post, min_followers):
        # """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –º–∞—î –∞–≤—Ç–æ—Ä –ø–æ—Å—Ç–∞ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤"""
        # try:
        #     # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∞–≤—Ç–æ—Ä–∞
        #     author_info = post.find_element(By.CSS_SELECTOR, '[data-testid="User-Name"]')
        #     followers_text = author_info.find_element(By.CSS_SELECTOR, 'span').text
            
        #     # –ü–∞—Ä—Å–∏–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤
        #     followers_count = self.parse_followers_count(followers_text)
            
        #     return followers_count >= min_followers
        # except:
        #     # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
            return True
    
    def check_post_likes(self, post, min_likes):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –º–∞—î –ø–æ—Å—Ç –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ª–∞–π–∫—ñ–≤"""
        try:
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–Ω–æ–ø–∫—É –ª–∞–π–∫—É —ñ –æ—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
            like_button = post.find_element(By.CSS_SELECTOR, 'button[data-testid="like"]')
            like_count_element = like_button.find_element(By.CSS_SELECTOR, 'span[data-testid="app-text-transition-container"]')
            likes_text = like_count_element.text
            
            # –ü–∞—Ä—Å–∏–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∞–π–∫—ñ–≤
            likes_count = self.parse_count(likes_text)
            
            return likes_count >= min_likes
        except:
            # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
            return True
    
    def check_post_reposts(self, post, min_reposts):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –º–∞—î –ø–æ—Å—Ç –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ä–µ–ø–æ—Å—Ç—ñ–≤"""
        try:
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–Ω–æ–ø–∫—É —Ä–µ–ø–æ—Å—Ç—É —ñ –æ—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
            retweet_button = post.find_element(By.CSS_SELECTOR, 'button[data-testid="retweet"]')
            retweet_count_element = retweet_button.find_element(By.CSS_SELECTOR, 'span[data-testid="app-text-transition-container"]')
            retweets_text = retweet_count_element.text
            
            # –ü–∞—Ä—Å–∏–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–ø–æ—Å—Ç—ñ–≤
            retweets_count = self.parse_count(retweets_text)
            
            return retweets_count >= min_reposts
        except:
            # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
            return True
    
    def check_post_replies(self, post, min_replies):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –º–∞—î –ø–æ—Å—Ç –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤"""
        try:
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–Ω–æ–ø–∫—É –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è —ñ –æ—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
            reply_button = post.find_element(By.CSS_SELECTOR, 'button[data-testid="reply"]')
            reply_count_element = reply_button.find_element(By.CSS_SELECTOR, 'span[data-testid="app-text-transition-container"]')
            replies_text = reply_count_element.text
            
            # –ü–∞—Ä—Å–∏–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
            replies_count = self.parse_count(replies_text)
            
            return replies_count >= min_replies
        except:
            # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
            return True
    
    def parse_followers_count(self, followers_text):
        """–ü–∞—Ä—Å–∏—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ –∑ —Ç–µ–∫—Å—Ç—É"""
        try:
            if 'K' in followers_text:
                return int(float(followers_text.replace('K', '')) * 1000)
            elif 'M' in followers_text:
                return int(float(followers_text.replace('M', '')) * 1000000)
            else:
                return int(followers_text.replace(',', ''))
        except:
            return 0
    
    def parse_count(self, count_text):
        """–ü–∞—Ä—Å–∏—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑ —Ç–µ–∫—Å—Ç—É"""
        try:
            if not count_text or count_text == '':
                return 0
            if 'K' in count_text:
                return int(float(count_text.replace('K', '')) * 1000)
            elif 'M' in count_text:
                return int(float(count_text.replace('M', '')) * 1000000)
            else:
                return int(count_text.replace(',', ''))
        except:
            return 0
