import asyncio
import random
import json

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –º–æ–¥—É–ª—å –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—ñ–≤
try:
    from sheeling.comment_tracker import (
        check_comment_limits, 
        update_comment_counters, 
        log_action, 
        log_error, 
        log_success
    )
    COMMENT_TRACKER_AVAILABLE = True
    print("‚úÖ –ú–æ–¥—É–ª—å –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
except ImportError as e:
    COMMENT_TRACKER_AVAILABLE = False
    print(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
    print("   –§—É–Ω–∫—Ü—ñ—ó –ª—ñ–º—ñ—Ç—ñ–≤ –±—É–¥—É—Ç—å –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ")

def load_delay_settings(account_type="new_account"):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–æ–∫ –∑ settings.json"""
    try:
        with open('settings.json', 'r', encoding='utf-8') as f:
            settings = json.load(f)
        
        if "delay_settings" in settings:
            delay_config = settings["delay_settings"].get(account_type, {})
            min_delay = delay_config.get("min_delay", 30)
            max_delay = delay_config.get("max_delay", 120)
            return min_delay, max_delay
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑–∞—Ç—Ä–∏–º–æ–∫: {e}")
    
    return 30, 120

async def run_accoun_new(ac):
    """–ü–æ–≤–µ–¥—ñ–Ω–∫–∞ –¥–ª—è –Ω–æ–≤–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ (1-7 –¥–Ω—ñ–≤)"""
    await ac.start()

    like = random.randint(0, 3)
    post = random.randint(0, 1)
    retvit = random.randint(0, 3)
    scroll_page = random.randint(0, 1)
    comment = random.randint(0, 2) 
    subscribe = random.randint(0, 1)

    print(f"–î—ñ—ó: –ª–∞–π–∫–∏={like}, –ø–æ—Å—Ç–∏={post}, —Ä–µ—Ç–≤—ñ—Ç–∏={retvit}, —Å–∫—Ä–æ–ª={scroll_page}, –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ={comment}, –ø—ñ–¥–ø–∏—Å–∫–∞={subscribe}")

    actions = []
    
    if like != 0:
        actions.append(("like", like))
    
    if post == 1:
        actions.append(("post", None))
    
    if retvit != 0:
        actions.append(("retweet", retvit))
    
    if scroll_page == 1:
        actions.append(("scroll", None))
    
    if comment != 0:
        actions.append(("comment", comment))
    
    if subscribe == 1:
        actions.append(("subscribe", None))
    
    random.shuffle(actions)
    
    print(f"–í–∏–ø–∞–¥–∫–æ–≤–∏–π –ø–æ—Ä—è–¥–æ–∫ –¥—ñ–π: {[action[0] for action in actions]}")
    
    min_delay, max_delay = load_delay_settings("new_account")
    print(f"‚è±Ô∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–æ–∫: {min_delay}-{max_delay} —Å–µ–∫")
    
    for action_type, param in actions:
        try:
            if action_type == "like":
                print(f"üîÑ –í–∏–∫–æ–Ω—É—î–º–æ –ª–∞–π–∫–∏ ({param})...")
                await ac.like_a_posts(param)
            elif action_type == "post":
                print("üîÑ –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Å—Ç...")
                await ac.make_a_post()
            elif action_type == "retweet":
                print(f"üîÑ –†–µ—Ç–≤—ñ—Ç–∏–º–æ ({param})...")
                await ac.twit_a_post(param)
            elif action_type == "scroll":
                print("üîÑ –°–∫—Ä–æ–ª–∏–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É...")
                await ac.smooth_scroll()
            elif action_type == "comment":
                print(f"üîÑ –ö–æ–º–µ–Ω—Ç—É—î–º–æ ({param})...")
                await ac.comment_on_posts(param)
            elif action_type == "subscribe":
                print(f"üîÑ –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—å –Ω–∞ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∞–∫–∞—É–Ω—Ç...")
                await ac.make_subscription()
            delay = random.uniform(min_delay, max_delay)
            print(f"‚è≥ –ó–∞—Ç—Ä–∏–º–∫–∞ {delay:.1f} —Å–µ–∫...")
            await asyncio.sleep(delay)
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ {action_type}: {e}")
            continue

    await ac.stop()

async def run_accoun_medium(ac):
    """–ü–æ–≤–µ–¥—ñ–Ω–∫–∞ –¥–ª—è —Å–µ—Ä–µ–¥–Ω—ñ—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ (8-14 –¥–Ω—ñ–≤)"""
    await ac.start()

    like = random.randint(0, 10)
    post = random.randint(0, 2)
    retvit = random.randint(0, 5)
    scroll_page = random.randint(0, 2)
    comment = random.randint(0, 3)
    subscribe = random.randint(0, 1)

    print(f"–î—ñ—ó: –ª–∞–π–∫–∏={like}, –ø–æ—Å—Ç–∏={post}, —Ä–µ—Ç–≤—ñ—Ç–∏={retvit}, —Å–∫—Ä–æ–ª={scroll_page}, –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ={comment}, –ø—ñ–¥–ø–∏—Å–∫–∞={subscribe}")

    actions = []
    
    if like != 0:
        actions.append(("like", like))
    
    if post == 1:
        actions.append(("post", None))
    
    if retvit != 0:
        actions.append(("retweet", retvit))
    
    if scroll_page == 1:
        actions.append(("scroll", None))
    
    if comment != 0:
        actions.append(("comment", comment))
    
    if subscribe == 1:
        actions.append(("subscribe", None))
    
    random.shuffle(actions)
    
    print(f"–í–∏–ø–∞–¥–∫–æ–≤–∏–π –ø–æ—Ä—è–¥–æ–∫ –¥—ñ–π: {[action[0] for action in actions]}")
    
    min_delay, max_delay = load_delay_settings("medium_account")
    print(f"‚è±Ô∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–æ–∫: {min_delay}-{max_delay} —Å–µ–∫")
    
    for action_type, param in actions:
        try:
            if action_type == "like":
                print(f"üîÑ –í–∏–∫–æ–Ω—É—î–º–æ –ª–∞–π–∫–∏ ({param})...")
                await ac.like_a_posts(param)
            elif action_type == "post":
                print("üîÑ –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Å—Ç...")
                await ac.make_a_post()
            elif action_type == "retweet":
                print(f"üîÑ –†–µ—Ç–≤—ñ—Ç–∏–º–æ ({param})...")
                await ac.twit_a_post(param)
            elif action_type == "scroll":
                print("üîÑ –°–∫—Ä–æ–ª–∏–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É...")
                await ac.smooth_scroll()
            elif action_type == "comment":
                print(f"üîÑ –ö–æ–º–µ–Ω—Ç—É—î–º–æ ({param})...")
                await ac.comment_on_posts(param)
            elif action_type == "subscribe":
                print(f"üîÑ –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—å –Ω–∞ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∞–∫–∞—É–Ω—Ç...")
                await ac.make_subscription()
            delay = random.uniform(min_delay, max_delay)
            print(f"‚è≥ –ó–∞—Ç—Ä–∏–º–∫–∞ {delay:.1f} —Å–µ–∫...")
            await asyncio.sleep(delay)
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ {action_type}: {e}")
            continue

    await ac.stop()

async def run_accoun_old(ac):
    """–ü–æ–≤–µ–¥—ñ–Ω–∫–∞ –¥–ª—è —Å—Ç–∞—Ä–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ (15+ –¥–Ω—ñ–≤)"""
    await ac.start()

    like = random.randint(5, 20)
    post = random.randint(0, 3)
    retvit = random.randint(3, 13)
    scroll_page = random.randint(0, 4)
    comment = random.randint(2, 5)
    subscribe = random.randint(0, 1)

    print(f"–î—ñ—ó: –ª–∞–π–∫–∏={like}, –ø–æ—Å—Ç–∏={post}, —Ä–µ—Ç–≤—ñ—Ç–∏={retvit}, —Å–∫—Ä–æ–ª={scroll_page}, –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ={comment}, –ø—ñ–¥–ø–∏—Å–∫–∞={subscribe}")

    actions = []
    
    if like != 0:
        actions.append(("like", like))
    
    if post == 1:
        actions.append(("post", None))
    
    if retvit != 0:
        actions.append(("retweet", retvit))
    
    if scroll_page == 1:
        actions.append(("scroll", None))
    
    if comment != 0:
        actions.append(("comment", comment))
    
    if subscribe == 1:
        actions.append(("subscribe", None))
    
    random.shuffle(actions)
    
    print(f"–í–∏–ø–∞–¥–∫–æ–≤–∏–π –ø–æ—Ä—è–¥–æ–∫ –¥—ñ–π: {[action[0] for action in actions]}")
    
    min_delay, max_delay = load_delay_settings("old_account")
    print(f"‚è±Ô∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–æ–∫: {min_delay}-{max_delay} —Å–µ–∫")
    
    for action_type, param in actions:
        try:
            if action_type == "like":
                print(f"üîÑ –í–∏–∫–æ–Ω—É—î–º–æ –ª–∞–π–∫–∏ ({param})...")
                await ac.like_a_posts(param)
            elif action_type == "post":
                print("üîÑ –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Å—Ç...")
                await ac.make_a_post()
            elif action_type == "retweet":
                print(f"üîÑ –†–µ—Ç–≤—ñ—Ç–∏–º–æ ({param})...")
                await ac.twit_a_post(param)
            elif action_type == "scroll":
                print("üîÑ –°–∫—Ä–æ–ª–∏–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É...")
                await ac.smooth_scroll()
            elif action_type == "comment":
                print(f"üîÑ –ö–æ–º–µ–Ω—Ç—É—î–º–æ ({param})...")
                await ac.comment_on_posts(param)
            elif action_type == "subscribe":
                print(f"üîÑ –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—å –Ω–∞ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∞–∫–∞—É–Ω—Ç...")
                await ac.make_subscription()
            delay = random.uniform(min_delay, max_delay)
            print(f"‚è≥ –ó–∞—Ç—Ä–∏–º–∫–∞ {delay:.1f} —Å–µ–∫...")
            await asyncio.sleep(delay)
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ {action_type}: {e}")
            continue

    await ac.stop()


def get_account_behavior(account):
    """–í–∏–∑–Ω–∞—á–∞—î –ø–æ–≤–µ–¥—ñ–Ω–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ Warm-up days"""
    try:
        warm_up_days = account.watm_up_days
        
        if not isinstance(warm_up_days, int) or warm_up_days<= 0:
            print(f"‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π –≤—ñ–∫ –∞–∫–∫–∞—É–Ω—Ç–∞: {warm_up_days}")
            return run_accoun_new 
        
        if warm_up_days <= 7:
            print(f"üì± –ê–∫–∫–∞—É–Ω—Ç {account.username} - –Ω–æ–≤–∏–π ({warm_up_days} –¥–Ω—ñ–≤)")
            return run_accoun_new
        elif warm_up_days <= 14:
            print(f"üì± –ê–∫–∫–∞—É–Ω—Ç {account.username} - —Å–µ—Ä–µ–¥–Ω—ñ–π ({warm_up_days} –¥–Ω—ñ–≤)")
            return run_accoun_medium
        else:
            print(f"üì± –ê–∫–∫–∞—É–Ω—Ç {account.username} - —Å—Ç–∞—Ä–∏–π ({warm_up_days} –¥–Ω—ñ–≤)")
            return run_accoun_old
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ –ø–æ–≤–µ–¥—ñ–Ω–∫–∏: {e}")
        return run_accoun_new

async def run_account_shilling(ac, likes_min, likes_max, posts_min, posts_max, retbit_min, retvit_max, comment_min, comment_max, min_delay, max_delay, min_like_delay, max_like_delay, min_comment_delay, max_comment_delay, min_retweet_delay, max_retweet_delay, logs_table, main_words):
    await ac.start()

    like = random.randint(likes_min, likes_max)
    post = random.randint(posts_min, posts_max)
    retvit = random.randint(retbit_min, retvit_max)
    scroll_page = random.randint(0, 4)
    comment = random.randint(comment_min, comment_max)
    subscribe = random.randint(0, 1)

    print(f"–î—ñ—ó: –ª–∞–π–∫–∏={like}, –ø–æ—Å—Ç–∏={post}, —Ä–µ—Ç–≤—ñ—Ç–∏={retvit}, —Å–∫—Ä–æ–ª={scroll_page}, –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ={comment}, –ø—ñ–¥–ø–∏—Å–∫–∞={subscribe}")

    actions = []
    
    if like != 0:
        actions.append(("like", like))
    
    if post == 1:
        actions.append(("post", None))
    
    if retvit != 0:
        actions.append(("retweet", retvit))
    
    if scroll_page == 1:
        actions.append(("scroll", None))
    
    if comment != 0:
        actions.append(("comment", comment))
    
    if subscribe == 1:
        actions.append(("subscribe", None))
    
    random.shuffle(actions)
    
    print(f"–í–∏–ø–∞–¥–∫–æ–≤–∏–π –ø–æ—Ä—è–¥–æ–∫ –¥—ñ–π: {[action[0] for action in actions]}")
    
    print(f"‚è±Ô∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–æ–∫: {min_delay}-{max_delay} —Å–µ–∫")
    
    for action_type, param in actions:
        try:
            if action_type == "like":
                print(f"üîÑ –í–∏–∫–æ–Ω—É—î–º–æ –ª–∞–π–∫–∏ ({param})...")
                await ac.like_a_posts_shilling(param, min_like_delay, max_like_delay, logs_table, main_words)
            elif action_type == "post":
                print("üîÑ –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Å—Ç...")
                await ac.make_a_post_shilling(min_delay, max_delay, logs_table)
            elif action_type == "retweet":
                print(f"üîÑ –†–µ—Ç–≤—ñ—Ç–∏–º–æ ({param})...")
                await ac.twit_a_post_shilling(param, min_retweet_delay, max_retweet_delay, logs_table, main_words)
            elif action_type == "scroll":
                print("üîÑ –°–∫—Ä–æ–ª–∏–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É...")
                await ac.smooth_scroll()
            elif action_type == "comment":
                print(f"üîÑ –ö–æ–º–µ–Ω—Ç—É—î–º–æ ({param})...")
                await ac.comment_on_posts_shilling(param, min_comment_delay, max_comment_delay, logs_table, main_words)
            elif action_type == "subscribe":
                print(f"üîÑ –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—å –Ω–∞ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∞–∫–∞—É–Ω—Ç...")
                await ac.make_subscription()
            delay = random.uniform(min_delay, max_delay)
            print(f"‚è≥ –ó–∞—Ç—Ä–∏–º–∫–∞ {delay:.1f} —Å–µ–∫...")
            await asyncio.sleep(delay)
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ {action_type}: {e}")
            continue

    await ac.stop()


async def run_account_shilling_advanced(ac, settings):
    """
    –†–æ–∑—à–∏—Ä–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è run_account_shilling –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –≤—Å—ñ—Ö –Ω–æ–≤–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
    
    Args:
        ac: Account –æ–±'—î–∫—Ç
        settings: –°–ª–æ–≤–Ω–∏–∫ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –≥—Ä—É–ø–∏ (–≤–∫–ª—é—á–∞—é—á–∏ –Ω–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏)
    """
    await ac.start()
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ —à–∏–ª—ñ–Ω–≥—É –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {ac.username}")
    print(f"üìä –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: {settings}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
    comments_total_limit = settings.get('comments_total_limit', 2000)
    comments_daily_limit = settings.get('comments_daily_limit', 100)
    comments_hourly_limit = settings.get('comments_hourly_limit', 10)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –ø–µ—Ä–µ–≤–∏—â–µ–Ω—ñ –ª—ñ–º—ñ—Ç–∏
    if not await check_comment_limits(ac.username, comments_total_limit, comments_daily_limit, comments_hourly_limit):
        print(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {ac.username}: –î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤")
        await ac.stop()
        return
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é —à–∏–ª—ñ–Ω–≥—É
    print("üöÄ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é —à–∏–ª—ñ–Ω–≥—É")
    
    # –†–∞–Ω–¥–æ–º–Ω–æ –≤–∏–±–∏—Ä–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥—ñ–π
    actions_per_run = settings.get('comments_per_post', {})
    actions_count = random.randint(
        actions_per_run.get('min', 1),
        actions_per_run.get('max', 5)
    )
    
    print(f"üé≤ –†–∞–Ω–¥–æ–º–Ω–æ –≤–∏–±—Ä–∞–Ω–æ {actions_count} –¥—ñ–π –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è")
    
    # –í–∏–∫–æ–Ω—É—î–º–æ –¥—ñ—ó —á–µ—Ä–µ–∑ –æ–Ω–æ–≤–ª–µ–Ω—É big_action_shilling
    if actions_count > 0:
        success = await ac.big_action_shilling(
            actions_count,
            settings,
            settings.get('logs_google_sheet', ''),
            settings.get('search_keywords', []),
            settings.get('search_hours', 24),
            settings.get('use_images', False),
            settings.get('images_folder', ''),
        )
        
        if success:
            print("‚úÖ –í—Å—ñ –¥—ñ—ó –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        else:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –¥—ñ–π")
    else:
        print("‚ö†Ô∏è –ù–µ –≤–∏–±—Ä–∞–Ω–æ –∂–æ–¥–Ω–æ—ó –¥—ñ—ó")
    
    await ac.stop()


async def execute_action_advanced(ac, action_type, param, settings):
    """–í–∏–∫–æ–Ω—É—î –æ–¥–Ω—É –¥—ñ—é –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏"""
    
    if action_type == "like":
        print(f"‚ù§Ô∏è –í–∏–∫–æ–Ω—É—î–º–æ –ª–∞–π–∫–∏ ({param})...")
        await execute_likes_advanced(ac, param, settings)
        
    elif action_type == "post":
        print(f"üìù –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Å—Ç...")
        await execute_post_advanced(ac, settings)
        
    elif action_type == "retweet":
        print(f"üîÑ –†–µ—Ç–≤—ñ—Ç–∏–º–æ ({param})...")
        await execute_retweet_advanced(ac, param, settings)
        
    elif action_type == "comment":
        print(f"üí¨ –ö–æ–º–µ–Ω—Ç—É—î–º–æ ({param})...")
        await execute_comment_advanced(ac, param, settings)
        
    elif action_type == "repost_with_comment":
        print(f"üîÑ –†–µ—Ç–≤—ñ—Ç –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º...")
        await execute_repost_with_comment_advanced(ac, settings)
        
    elif action_type == "create_post":
        print(f"üìù –°—Ç–≤–æ—Ä—é—î–º–æ –≤–ª–∞—Å–Ω–∏–π –ø–æ—Å—Ç...")
        await execute_create_post_advanced(ac, settings)


async def execute_likes_advanced(ac, count, settings):
    """–í–∏–∫–æ–Ω—É—î –ª–∞–π–∫–∏ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏"""
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏ –ø–æ—à—É–∫—É
    min_followers = settings.get('min_followers', 1000)
    min_likes = settings.get('min_likes', 5)
    min_reposts = settings.get('min_reposts', 2)
    min_replies = settings.get('min_replies', 1)
    search_hours = settings.get('search_hours', 24)
    key_phrases = settings.get('key_phrases', [])
    exclude_keywords = settings.get('exclude_keywords', [])
    
    print(f"üîç –ü–æ—à—É–∫ –ø–æ—Å—Ç—ñ–≤ –¥–ª—è –ª–∞–π–∫—ñ–≤ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏:")
    print(f"   - –ú—ñ–Ω. –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∏: {min_followers}")
    print(f"   - –ú—ñ–Ω. –ª–∞–π–∫–∏: {min_likes}")
    print(f"   - –ú—ñ–Ω. —Ä–µ–ø–æ—Å—Ç–∏: {min_reposts}")
    print(f"   - –ú—ñ–Ω. –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ: {min_replies}")
    print(f"   - –ü–æ—à—É–∫ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ: {search_hours} –≥–æ–¥–∏–Ω")
    print(f"   - –ö–ª—é—á–æ–≤—ñ —Ñ—Ä–∞–∑–∏: {key_phrases}")
    print(f"   - –í–∏–∫–ª—é—á–µ–Ω—ñ —Å–ª–æ–≤–∞: {exclude_keywords}")
    
    # –¢—É—Ç –º–∞—î –±—É—Ç–∏ –ª–æ–≥—ñ–∫–∞ –ø–æ—à—É–∫—É –ø–æ—Å—Ç—ñ–≤ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
    # –ü–æ–∫–∏ —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞—Ä—É —Ñ—É–Ω–∫—Ü—ñ—é
    delays = settings.get('delays', {})
    await ac.like_a_posts_shilling(
        count,
        delays.get('between_likes', {}).get('min', 15),
        delays.get('between_likes', {}).get('max', 45),
        settings.get('logs_google_sheet', ''),
        settings.get('search_keywords', []),
        search_hours
    )


async def execute_comment_advanced(ac, count, settings):
    """–í–∏–∫–æ–Ω—É—î –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏"""
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç–∏
    if not await check_comment_limits(ac.username, 
                                    settings.get('comments_total_limit', 2000),
                                    settings.get('comments_daily_limit', 100),
                                    settings.get('comments_hourly_limit', 10)):
        print(f"‚ö†Ô∏è –î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –¥–ª—è {ac.username}")
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
    comments_per_post = settings.get('comments_per_post', {'min': 1, 'max': 3})
    comment_interval = settings.get('comment_interval', {'min': 15, 'max': 30})
    comment_prompt = settings.get('comment_prompt', '')
    comennts_count_min = settings.get('comments_per_post').get('min', 3)
    comennts_count_max = settings.get('comments_per_post').get('max', 3)
    search_hours = settings.get('search_hours', 24)

    amount = random.randint(comennts_count_min, comennts_count_max)

    print(f"\n\n\n {amount} \n\n\n")
    
    print(f"üí¨ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤:")
    print(f"   - –ù–∞ –ø–æ—Å—Ç: {comments_per_post['min']}-{comments_per_post['max']}")
    print(f"   - –Ü–Ω—Ç–µ—Ä–≤–∞–ª: {comment_interval['min']}-{comment_interval['max']} —Å–µ–∫")
    print(f"   - –ü—Ä–æ–º–ø—Ç: {comment_prompt}")
    
    # –í–∏–∫–æ–Ω—É—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
    delays = settings.get('delays', {})
    await ac.comment_on_posts_shilling(
        amount,
        delays.get('between_comments', {}).get('min', 90),
        delays.get('between_comments', {}).get('max', 240),
        settings.get('logs_google_sheet', ''),
        settings.get('search_keywords', []),
        search_hours,
        settings.get('use_images', {}),
        settings.get('images_folder', {})
    )
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
    await update_comment_counters(ac.username)


async def execute_retweet_advanced(ac, count, settings):
    """–í–∏–∫–æ–Ω—É—î —Ä–µ—Ç–≤—ñ—Ç–∏ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏"""
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏ –ø–æ—à—É–∫—É
    search_hours = settings.get('search_hours', 24)
    
    delays = settings.get('delays', {})
    await ac.twit_a_post_shilling(
            count,
            delays.get('between_retweets', {}).get('min', 60),
            delays.get('between_retweets', {}).get('max', 180),
            settings.get('logs_google_sheet', ''),
            settings.get('search_keywords', []),
            search_hours
        )


async def execute_post_advanced(ac, settings):
    """–°—Ç–≤–æ—Ä—é—î –ø–æ—Å—Ç –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏"""
    
    delays = settings.get('delays', {})
    await ac.make_a_post_shilling(
        delays.get('between_posts', {}).get('min', 300),
        delays.get('between_posts', {}).get('max', 600),
        settings.get('logs_google_sheet', ''),
        settings.get('post_topics', {}),
        settings.get('use_images', {}),
        settings.get('images_folder', {})
    )


async def execute_repost_with_comment_advanced(ac, settings):
    """–í–∏–∫–æ–Ω—É—î —Ä–µ—Ç–≤—ñ—Ç –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º"""
    
    repost_prompt = settings.get('repost_prompt', '')
    print(f"üîÑ –†–µ—Ç–≤—ñ—Ç –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º, –ø—Ä–æ–º–ø—Ç: {repost_prompt}")
    
    # –¢—É—Ç –º–∞—î –±—É—Ç–∏ –ª–æ–≥—ñ–∫–∞ —Ä–µ—Ç–≤—ñ—Ç—É –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º
    # –ü–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥—É—î–º–æ
    if settings.get('log_all_actions', True):
        await log_action(ac.username, 'repost_with_comment', '–†–µ—Ç–≤—ñ—Ç –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º –≤–∏–∫–æ–Ω–∞–Ω–æ', settings.get('logs_google_sheet', ''))


async def execute_create_post_advanced(ac, settings):
    """–°—Ç–≤–æ—Ä—é—î –≤–ª–∞—Å–Ω–∏–π –ø–æ—Å—Ç"""
    
    post_prompt = settings.get('post_prompt', '')
    post_topics = settings.get('post_topics', [])
    
    print(f"üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞:")
    print(f"   - –ü—Ä–æ–º–ø—Ç: {post_prompt}")
    print(f"   - –¢–µ–º–∏: {post_topics}")
    
    # –¢—É—Ç –º–∞—î –±—É—Ç–∏ –ª–æ–≥—ñ–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç–∞
    # –ü–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥—É—î–º–æ
    if settings.get('log_all_actions', True):
        await log_action(ac.username, 'create_post', '–í–ª–∞—Å–Ω–∏–π –ø–æ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ', settings.get('logs_google_sheet', ''))


async def execute_big_action_advanced(ac, settings):
    """–í–∏–∫–æ–Ω—É—î –∫–æ–º–ø–ª–µ–∫—Å–Ω—É –¥—ñ—é –Ω–∞ –æ–¥–Ω–æ–º—É –ø–æ—Å—Ç—É: –ª–∞–π–∫ + —Ä–µ–ø–æ—Å—Ç + –∫–æ–º–µ–Ω—Ç–∞—Ä + —Ä–µ–ø–æ—Å—Ç –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º + –≤–ª–∞—Å–Ω–∏–π –ø–æ—Å—Ç"""
    
    print("üéØ –ü–æ—á–∏–Ω–∞—î–º–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω—É –¥—ñ—é (big_action)")
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    search_hours = settings.get('search_hours', 24)
    main_words = settings.get('search_keywords', [])
    logs_table = settings.get('logs_google_sheet', '')
    is_images = settings.get('use_images', False)
    images_folder = settings.get('images_folder', '')
    
    print(f"üìä –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ—ó –¥—ñ—ó:")
    print(f"   - –ü–æ—à—É–∫ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ: {search_hours} –≥–æ–¥–∏–Ω")
    print(f"   - –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞: {main_words}")
    print(f"   - –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–∞—Ä—Ç–∏–Ω–æ–∫: {is_images}")
    
    # –í–∏–∫–æ–Ω—É—î–º–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω—É –¥—ñ—é
    success = await ac.big_action_shilling(
        settings,
        logs_table,
        main_words,
        search_hours,
        is_images,
        images_folder
    )
    
    if success:
        print("‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞ –¥—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
        return True
    else:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ—ó –¥—ñ—ó")
        return False


async def execute_smart_actions(ac, settings):
    """
    –†–æ–∑—É–º–Ω–æ –≤–∏–∫–æ–Ω—É—î –¥—ñ—ó: —è–∫—â–æ –≤—Å—ñ —Ç–∏–ø–∏ –¥—ñ–π –¥–æ—Å—Ç—É–ø–Ω—ñ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î big_action,
    —è–∫—â–æ –¥–µ—è–∫—ñ –¥–æ—Å—è–≥–ª–∏ –ª—ñ–º—ñ—Ç—É - –≤–∏–∫–æ–Ω—É—î –æ–∫—Ä–µ–º—ñ –¥—ñ—ó –¥–ª—è —Ç–∏—Ö, —â–æ –∑–∞–ª–∏—à–∏–ª–∏—Å—å
    """
    print("üß† –†–æ–∑—É–º–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥—ñ–π")
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥—ñ–π –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    actions_per_run = settings.get('actions_per_run', {})
    comment_engagement = settings.get('comment_engagement', {})
    likes_count = random.randint(
        comment_engagement.get('likes', {}).get('min', 0),
        comment_engagement.get('likes', {}).get('max', 0)
    )
    retweets_count = random.randint(
        comment_engagement.get('reposts', {}).get('min', 0),
        comment_engagement.get('reposts', {}).get('max', 0)
    )
    comments_count = random.randint(
        settings.get('comments_per_post', {}).get('min', 0),
        settings.get('comments_per_post', {}).get('max', 0)
    )
    posts_count = random.randint(
        actions_per_run.get('posts', {}).get('min', 0),
        actions_per_run.get('posts', {}).get('max', 0)
    )
    
    print(f"üìä –î–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:")
    print(f"   - –õ–∞–π–∫–∏: {likes_count}")
    print(f"   - –†–µ–ø–æ—Å—Ç–∏: {retweets_count}")
    print(f"   - –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ: {comments_count}")
    print(f"   - –ü–æ—Å—Ç–∏: {posts_count}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤—Å—ñ –¥—ñ—ó –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è big_action
    all_actions_available = likes_count > 0 and retweets_count > 0 and comments_count > 0
    
    if all_actions_available:
        print("üöÄ –í—Å—ñ –¥—ñ—ó –¥–æ—Å—Ç—É–ø–Ω—ñ - –≤–∏–∫–æ–Ω—É—î–º–æ big_action")
        big_action_success = await execute_big_action_advanced(ac, settings)
        
        if big_action_success:
            print("‚úÖ Big action –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
            # Big action –≤–∏–∫–æ–Ω–∞–≤ 1 –ª–∞–π–∫, 1 —Ä–µ–ø–æ—Å—Ç, 1 –∫–æ–º–µ–Ω—Ç–∞—Ä, 1 —Ä–µ–ø–æ—Å—Ç –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º
            # –ó–∞–ª–∏—à–∞—î—Ç—å—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –¥—ñ—ó
            remaining_likes = max(0, likes_count - 1)
            remaining_retweets = max(0, retweets_count - 1)
            remaining_comments = max(0, comments_count - 1)
            
            print(f"üìã –ó–∞–ª–∏—à–∏–ª–æ—Å—å –¥—ñ–π –ø—ñ—Å–ª—è big_action:")
            print(f"   - –õ–∞–π–∫–∏: {remaining_likes}")
            print(f"   - –†–µ–ø–æ—Å—Ç–∏: {remaining_retweets}")
            print(f"   - –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ: {remaining_comments}")
            print(f"   - –ü–æ—Å—Ç–∏: {posts_count}")
            
            # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ª–∏—à–∫–æ–≤—ñ –¥—ñ—ó
            if remaining_likes > 0:
                print(f"‚ù§Ô∏è –í–∏–∫–æ–Ω—É—î–º–æ {remaining_likes} –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ª–∞–π–∫—ñ–≤")
                await execute_likes_advanced(ac, remaining_likes, settings)
            
            if remaining_retweets > 0:
                print(f"üîÑ –í–∏–∫–æ–Ω—É—î–º–æ {remaining_retweets} –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Ä–µ–ø–æ—Å—Ç—ñ–≤")
                await execute_retweet_advanced(ac, remaining_retweets, settings)
            
            if remaining_comments > 0:
                print(f"üí¨ –í–∏–∫–æ–Ω—É—î–º–æ {remaining_comments} –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤")
                temp_settings = settings.copy()
                temp_settings['comments_per_post'] = {'min': remaining_comments, 'max': remaining_comments}
                await execute_comment_advanced(ac, remaining_comments, temp_settings)
            
            if posts_count > 0:
                print(f"üìù –í–∏–∫–æ–Ω—É—î–º–æ {posts_count} –ø–æ—Å—Ç—ñ–≤")
                await execute_post_advanced(ac, settings)
        else:
            print("‚ùå Big action –Ω–µ –≤–¥–∞–≤—Å—è - –≤–∏–∫–æ–Ω—É—î–º–æ –≤—Å—ñ –¥—ñ—ó –æ–∫—Ä–µ–º–æ")
            # –Ø–∫—â–æ big action –Ω–µ –≤–¥–∞–≤—Å—è, –≤–∏–∫–æ–Ω—É—î–º–æ –≤—Å—ñ –¥—ñ—ó –æ–∫—Ä–µ–º–æ
            await execute_individual_actions(ac, likes_count, retweets_count, comments_count, posts_count, settings)
    else:
        print("ÔøΩÔøΩ –î–µ—è–∫—ñ –¥—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ - –≤–∏–∫–æ–Ω—É—î–º–æ –æ–∫—Ä–µ–º—ñ –¥—ñ—ó")
        
        await execute_individual_actions(ac, likes_count, retweets_count, comments_count, posts_count, settings)


async def execute_individual_actions(ac, likes_count, retweets_count, comments_count, posts_count, settings):
    """–í–∏–∫–æ–Ω—É—î –æ–∫—Ä–µ–º—ñ –¥—ñ—ó"""
    
    # –í–∏–∫–æ–Ω—É—î–º–æ –æ–∫—Ä–µ–º—ñ –¥—ñ—ó –¥–ª—è —Ç–∏—Ö, —â–æ –∑–∞–ª–∏—à–∏–ª–∏—Å—å
    if likes_count > 0:
        print(f"‚ù§Ô∏è –í–∏–∫–æ–Ω—É—î–º–æ {likes_count} –ª–∞–π–∫—ñ–≤")
        await execute_likes_advanced(ac, likes_count, settings)
    
    if retweets_count > 0:
        print(f"üîÑ –í–∏–∫–æ–Ω—É—î–º–æ {retweets_count} —Ä–µ–ø–æ—Å—Ç—ñ–≤")
        await execute_retweet_advanced(ac, retweets_count, settings)
    
    if comments_count > 0:
        print(f"üí¨ –í–∏–∫–æ–Ω—É—î–º–æ {comments_count} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤")
        # –¢–∏–º—á–∞—Å–æ–≤–æ –∑–º—ñ–Ω—é—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–∫—Ä–µ–º–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
        temp_settings = settings.copy()
        temp_settings['comments_per_post'] = {'min': comments_count, 'max': comments_count}
        await execute_comment_advanced(ac, comments_count, temp_settings)
    
    if posts_count > 0:
        print(f"üìù –í–∏–∫–æ–Ω—É—î–º–æ {posts_count} –ø–æ—Å—Ç—ñ–≤")
        await execute_post_advanced(ac, settings)


async def check_comment_limits(username, total_limit, daily_limit, hourly_limit):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –Ω–µ –ø–µ—Ä–µ–≤–∏—â–µ–Ω—ñ –ª—ñ–º—ñ—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤"""
    
    if COMMENT_TRACKER_AVAILABLE:
        try:
            # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑ –º–æ–¥—É–ª—è comment_tracker
            from sheeling.comment_tracker import check_comment_limits as check_limits
            return await check_limits(username, total_limit, daily_limit, hourly_limit)
        except ImportError:
            print(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å comment_tracker –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è {username}")
            return True
    else:
        # –¢–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º - –∑–∞–≤–∂–¥–∏ –¥–æ–∑–≤–æ–ª—è—î–º–æ –∫–æ–º–µ–Ω—Ç—É–≤–∞—Ç–∏
        print(f"üîç [–¢–ï–°–¢] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—ñ–≤ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –¥–ª—è {username}")
        print(f"   - –ó–∞–≥–∞–ª—å–Ω–∏–π –ª—ñ–º—ñ—Ç: {total_limit}")
        print(f"   - –î–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç: {daily_limit}")
        print(f"   - –ì–æ–¥–∏–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç: {hourly_limit}")
        print(f"   - –†–µ–∑—É–ª—å—Ç–∞—Ç: –î–æ–∑–≤–æ–ª–µ–Ω–æ (—Ç–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º)")
        
        return True


async def update_comment_counters(username, comment_text=""):
    """–û–Ω–æ–≤–ª—é—î –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤"""
    
    if COMMENT_TRACKER_AVAILABLE:
        try:
            # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑ –º–æ–¥—É–ª—è comment_tracker
            from sheeling.comment_tracker import update_comment_counters as update_counters
            await update_counters(username, comment_text)
        except ImportError:
            print(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å comment_tracker –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è {username}")
    else:
        # –¢–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º
        print(f"üìä [–¢–ï–°–¢] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –¥–ª—è {username}")
        print(f"   - –ö–æ–º–µ–Ω—Ç–∞—Ä: {comment_text[:50]}..." if comment_text else "   - –ë–µ–∑ —Ç–µ–∫—Å—Ç—É")
        print(f"   - –†–µ–∑—É–ª—å—Ç–∞—Ç: –°–∏–º—É–ª—å–æ–≤–∞–Ω–æ (—Ç–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º)")


async def log_action(username, action_type, message, logs_table, success=True, details=None):
    """–õ–æ–≥—É—î –¥—ñ—é –≤ Google —Ç–∞–±–ª–∏—Ü—é"""
    
    if COMMENT_TRACKER_AVAILABLE:
        try:
            # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑ –º–æ–¥—É–ª—è comment_tracker
            from sheeling.comment_tracker import log_action as log_action_func
            await log_action_func(username, action_type, message, logs_table, success, details)
        except ImportError:
            print(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å comment_tracker –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è {username}")
    else:
        # –¢–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º
        print(f"üìù [–¢–ï–°–¢] –õ–æ–≥—É–≤–∞–Ω–Ω—è: {username} - {action_type}: {message}")
        if details:
            print(f"   –î–µ—Ç–∞–ª—ñ: {details}")
        print(f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ –£—Å–ø—ñ—à–Ω–æ' if success else '‚ùå –ü–æ–º–∏–ª–∫–∞'}")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: –°–∏–º—É–ª—å–æ–≤–∞–Ω–æ (—Ç–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º)")


async def log_error(username, action_type, error_message, logs_table, error_details=None):
    """–õ–æ–≥—É—î –ø–æ–º–∏–ª–∫—É –≤ Google —Ç–∞–±–ª–∏—Ü—é"""
    
    if COMMENT_TRACKER_AVAILABLE:
        try:
            # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑ –º–æ–¥—É–ª—è comment_tracker
            from sheeling.comment_tracker import log_error as log_error_func
            await log_error_func(username, action_type, error_message, logs_table, error_details)
        except ImportError:
            print(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å comment_tracker –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è {username}")
    else:
        # –¢–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º
        print(f"‚ùå [–¢–ï–°–¢] –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏: {username} - {username} - {action_type}: {error_message}")
        if error_details:
            print(f"   –î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏: {error_details}")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: –°–∏–º—É–ª—å–æ–≤–∞–Ω–æ (—Ç–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º)")

async def run_account_shilling_random_actions(ac, settings):
    """
    –ù–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —à–∏–ª—ñ–Ω–≥—É –∑ —Ä–∞–Ω–¥–æ–º–Ω–∏–º –≤–∏–±–æ—Ä–æ–º –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –¥—ñ–π –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≥—Ä—É–ø–∏
    
    Args:
        ac: Account –æ–±'—î–∫—Ç
        settings: –°–ª–æ–≤–Ω–∏–∫ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –≥—Ä—É–ø–∏
    """
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —à–∏–ª—ñ–Ω–≥—É –∑ —Ä–∞–Ω–¥–æ–º–Ω–∏–º–∏ –¥—ñ—è–º–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {ac.username}")
    print(f"üìä –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: {settings}")
    
    # –†–∞–Ω–¥–æ–º–Ω–æ –≤–∏–±–∏—Ä–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥—ñ–π (–∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ü–∏–∫–ª—ñ–≤)
    actions_per_run = settings.get('actions_per_run', {})
    
    # –†–∞–Ω–¥–æ–º–Ω–æ –≤–∏–±–∏—Ä–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥—ñ–π
    actions_count = random.randint(
        actions_per_run.get('min', 1),
        actions_per_run.get('max', 5)
    )
    
    print(f"üé≤ –†–∞–Ω–¥–æ–º–Ω–æ –≤–∏–±—Ä–∞–Ω–æ {actions_count} –¥—ñ–π –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è")
    
    # –í–∏–∫–æ–Ω—É—î–º–æ –¥—ñ—ó —á–µ—Ä–µ–∑ –æ–Ω–æ–≤–ª–µ–Ω—É big_action_shilling
    if actions_count > 0:
        success = await ac.big_action_shilling(
            actions_count,
            settings,
            settings.get('logs_google_sheet', ''),
            settings.get('search_keywords', []),
            settings.get('search_hours', 24),
            settings.get('use_images', False),
            settings.get('images_folder', '')
        )
        
        if success:
            print("‚úÖ –í—Å—ñ –¥—ñ—ó –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        else:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –¥—ñ–π")
    else:
        print("‚ö†Ô∏è –ù–µ –≤–∏–±—Ä–∞–Ω–æ –∂–æ–¥–Ω–æ—ó –¥—ñ—ó")
