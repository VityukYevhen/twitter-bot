import gspread
from oauth2client.service_account import ServiceAccountCredentials
import asyncio
import random
import json
import os

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("gen-lang-client-0738187198-4dffb70e5f2b.json", scope)
client = gspread.authorize(creds)

def get_sheet():
    """–û—Ç—Ä–∏–º—É—î Google —Ç–∞–±–ª–∏—Ü—é –∑ URL –∑ settings.json"""
    try:
        # –®–ª—è—Ö –¥–æ settings.json (–≤—ñ–¥–Ω–æ—Å–Ω–æ –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó)
        settings_path = os.path.join(os.path.dirname(__file__), 'settings.json')
        
        with open(settings_path, 'r', encoding='utf-8') as f:
            settings = json.load(f)
        
        table_url = settings.get('google_sheets', {}).get('accounts_table_url')
        
        if not table_url:
            print("‚ö†Ô∏è URL —Ç–∞–±–ª–∏—Ü—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ settings.json, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º")
            return client.open("Twitter Accounts").sheet1
        
        print(f"üìä –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é: {table_url}")
        return client.open_by_url(table_url).sheet1
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è settings.json: {e}, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º")
        return client.open("Twitter Accounts").sheet1

def reload_sheet():
    """–ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ç–∞–±–ª–∏—Ü—é (–∫–æ—Ä–∏—Å–Ω–æ –ø—Ä–∏ –∑–º—ñ–Ω—ñ URL)"""
    global sheet
    sheet = get_sheet()
    print("üîÑ –¢–∞–±–ª–∏—Ü—é –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é
sheet = get_sheet()


async def read_all_data():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ Google —Ç–∞–±–ª–∏—Ü—ñ"""
    data = await asyncio.to_thread(sheet.get_all_records)
    return data

async def update_next_launch_by_auth_token(auth_token, new_time):
    """–û–Ω–æ–≤–ª—é—î Next_Launch –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Auth_Token"""
    try:
        all_data = await read_all_data()
        
        for i, row in enumerate(all_data):
            if row.get('Auth_Token') == auth_token:
                await asyncio.to_thread(sheet.update_cell, i + 2, 10, new_time)
                print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ Next_Launch –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∑ Auth_Token: {auth_token[:20]}...")
                return True
        
        print(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç –∑ Auth_Token {auth_token[:20]}... –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return False
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ Next_Launch: {e}")
        return False

async def set_next_end_date(auth_token):
    """–û–Ω–æ–≤–ª—é—î Next_Launch –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Auth_Token"""
    try:
        all_data = await read_all_data()
        
        for i, row in enumerate(all_data):
            if row.get('Auth_Token') == auth_token:
                await asyncio.to_thread(sheet.update_cell, i + 2, 11, random.randint(30, 35))
                print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ End_date –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∑ Auth_Token: {auth_token[:20]}...")
                return True
        
        print(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç –∑ Auth_Token {auth_token[:20]}... –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return False
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ Set_next_end: {e}")
        return False

async def set_warm_up_day(auth_token):
    """–û–Ω–æ–≤–ª—é—î Next_Launch –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Auth_Token"""
    try:
        all_data = await read_all_data()
        
        for i, row in enumerate(all_data):
            if row.get('Auth_Token') == auth_token:
                await asyncio.to_thread(sheet.update_cell, i + 2, 7, 0)
                print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ Warm_up_day –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∑ Auth_Token: {auth_token[:20]}...")
                return True
        
        print(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç –∑ Auth_Token {auth_token[:20]}... –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return False
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ Warm_up_day: {e}")
        return False


async def get_ready_accounts():
    """–û—Ç—Ä–∏–º—É—î –∞–∫–∫–∞—É–Ω—Ç–∏ –≥–æ—Ç–æ–≤—ñ –¥–æ –∑–∞–ø—É—Å–∫—É (Next_Launch = 0 –∞–±–æ <= current_time)"""
    try:
        import time
        all_data = await read_all_data()
        current_time = int(time.time())
        ready_accounts = []
        
        for account_data in all_data:
            end_date_value = account_data.get('End_Date')
            next_launch = account_data.get('Next_Launch', 0)
            warmUpDays = account_data.get('Warm-up days')
            Status = account_data.get('Status')
            # –Ø–∫—â–æ End_date –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ None ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ set_next_end_date
            try:
                auth_token = account_data.get('Auth_Token')
                if auth_token and (end_date_value is None or str(end_date_value).strip() == ""):
                    await set_next_end_date(auth_token)
                if auth_token and (warmUpDays is None or str(warmUpDays).strip() == ""):
                    await set_warm_up_day(auth_token)
            except Exception as end_date_error:
                print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ End_Date/Warm_Up_Days –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: {end_date_error}")
            try:
                if (next_launch == 0 or next_launch <= current_time) and warmUpDays < end_date_value and Status == "New":
                    ready_accounts.append(account_data)
            except Exception as e:
                print(e)
                continue
        
        print(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(ready_accounts)} –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ –≥–æ—Ç–æ–≤–∏—Ö –¥–æ –∑–∞–ø—É—Å–∫—É")
        return ready_accounts
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≥–æ—Ç–æ–≤–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤: {e}")
        return []

async def update_warm_up_days_by_auth_token(auth_token, new_days):
    """–û–Ω–æ–≤–ª—é—î Warm-up days –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Auth_Token"""
    try:
        all_data = await read_all_data()
        
        for i, row in enumerate(all_data):
            if row.get('Auth_Token') == auth_token:
                await asyncio.to_thread(sheet.update_cell, i + 2, 7, new_days)
                print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ Warm-up days –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∑ Auth_Token: {auth_token[:20]}... -> {new_days} –¥–Ω—ñ–≤")
                return True
        
        print(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç –∑ Auth_Token {auth_token[:20]}... –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return False
        
    except Exception as e:
        # –ü–µ—Ä–µ–∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –¥–∞–ª—ñ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ
        raise e

async def update_status_by_auth_token(auth_token, new_status):
    """–û–Ω–æ–≤–ª—é—î Status –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Auth_Token"""
    try:
        all_data = await read_all_data()
        
        for i, row in enumerate(all_data):
            if row.get('Auth_Token') == auth_token:
                await asyncio.to_thread(sheet.update_cell, i + 2, 6, new_status)
                print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ Status –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∑ Auth_Token: {auth_token[:20]}... -> {new_status}")
                return True
        
        print(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç –∑ Auth_Token {auth_token[:20]}... –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return False
        
    except Exception as e:
        # –ü–µ—Ä–µ–∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –¥–∞–ª—ñ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ
        raise e


async def increment_all_warm_up_days_ultra_fast():
    """–£–ª—å—Ç—Ä–∞-—à–≤–∏–¥–∫–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Warm-up days –¥–ª—è –≤—Å—ñ—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ –æ–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º"""
    try:
        print("üöÄ –ü–æ—á–∏–Ω–∞—î–º–æ —É–ª—å—Ç—Ä–∞-—à–≤–∏–¥–∫–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Warm-up days...")
        
        all_data = await read_all_data()
        print(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(all_data)} –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏")
        
        # –ü—ñ–¥–≥–æ—Ç–æ–≤—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ –¥–ª—è –æ–¥–Ω–æ–≥–æ batch-–∑–∞–ø–∏—Ç—É
        all_updates = []
        
        for i, account_data in enumerate(all_data):
            try:
                auth_token = account_data.get('Auth_Token')
                current_days = account_data.get('Warm-up days', 0)
                
                if auth_token and current_days is not None:
                    new_days = current_days + 1
                    row_num = i + 2  # +2 —Ç–æ–º—É —â–æ Google Sheets –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 1, –∞ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑ 2
                    
                    # –î–æ–¥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Warm-up days
                    all_updates.append({
                        'range': f'G{row_num}:G{row_num}',
                        'values': [[new_days]]
                    })
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å
                    if new_days >= 30:
                        all_updates.append({
                            'range': f'F{row_num}:F{row_num}',
                            'values': [["Good"]]
                        })
                        print(f"üéâ –ê–∫–∫–∞—É–Ω—Ç {auth_token[:20]}... –¥–æ—Å—è–≥ 30 –¥–Ω—ñ–≤! –°—Ç–∞—Ç—É—Å –±—É–¥–µ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ Good")
                    else:
                        print(f"üìà –ê–∫–∫–∞—É–Ω—Ç {auth_token[:20]}... –±—É–¥–µ –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–æ {new_days} –¥–Ω—ñ–≤")
                
                if (i + 1) % 100 == 0:
                    print(f"‚úÖ –ü—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {i + 1}/{len(all_data)} –∞–∫–∫–∞—É–Ω—Ç—ñ–≤")
                    
            except Exception as account_error:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∞–∫–∫–∞—É–Ω—Ç–∞ {i+1}/{len(all_data)}: {account_error}")
                continue
        
        print(f"üöÄ –ì–æ—Ç–æ–≤–æ –¥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {len(all_updates)} –æ–Ω–æ–≤–ª–µ–Ω—å")
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –≤—Å—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–¥–Ω–∏–º batch-–∑–∞–ø–∏—Ç–æ–º
        if all_updates:
            print("üìù –í–∏–∫–æ–Ω—É—î–º–æ –≤—Å—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º...")
            try:
                await asyncio.to_thread(sheet.batch_update, all_updates)
                print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ {len(all_updates)} –æ–Ω–æ–≤–ª–µ–Ω—å –æ–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º!")
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ batch-–æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ: {e}")
                # Fallback: —Ä–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ –º–µ–Ω—à—ñ –≥—Ä—É–ø–∏
                print("üîÑ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback –∑ —Ä–æ–∑–±–∏—Ç—Ç—è–º –Ω–∞ –≥—Ä—É–ø–∏...")
                
                # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ –≥—Ä—É–ø–∏ –ø–æ 50 –æ–Ω–æ–≤–ª–µ–Ω—å
                chunk_size = 50
                for i in range(0, len(all_updates), chunk_size):
                    chunk = all_updates[i:i + chunk_size]
                    try:
                        await asyncio.to_thread(sheet.batch_update, chunk)
                        print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –≥—Ä—É–ø—É {i//chunk_size + 1}/{(len(all_updates) + chunk_size - 1)//chunk_size}")
                        await asyncio.sleep(0.5)  # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –≥—Ä—É–ø–∞–º–∏
                    except Exception as chunk_error:
                        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥—Ä—É–ø–∏ {i//chunk_size + 1}: {chunk_error}")
                        # –û—Å—Ç–∞–Ω–Ω—ñ–π fallback: –æ–Ω–æ–≤–ª—é—î–º–æ –ø–æ –æ–¥–Ω–æ–º—É
                        print("üîÑ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π fallback...")
                        for update in chunk:
                            try:
                                range_str = update['range']
                                value = update['values'][0][0]
                                
                                # –ü–∞—Ä—Å–∏–º–æ range (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "G5:G5" -> row=5, col=7)
                                if 'G' in range_str:
                                    col = 7  # Warm-up days
                                elif 'F' in range_str:
                                    col = 6  # Status
                                else:
                                    continue
                                
                                row = int(range_str.split(':')[0][1:])
                                await asyncio.to_thread(sheet.update_cell, row, col, value)
                                await asyncio.sleep(0.1)
                            except Exception as fallback_error:
                                print(f"‚ùå Fallback –ø–æ–º–∏–ª–∫–∞: {fallback_error}")
        
        print("‚úÖ –£–ª—å—Ç—Ä–∞-—à–≤–∏–¥–∫–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Warm-up days –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        print(f"üìä –ü—ñ–¥—Å—É–º–æ–∫: –≤–∏–∫–æ–Ω–∞–Ω–æ {len(all_updates)} –æ–Ω–æ–≤–ª–µ–Ω—å")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —É–ª—å—Ç—Ä–∞-—à–≤–∏–¥–∫–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ Warm-up days: {e}")
        return False

async def mark_account_as_bad(auth_token: str, reason: str = "no_posts_count >= 20"):
    """–ü–æ–∑–Ω–∞—á–∞—î –∞–∫–∞—É–Ω—Ç —è–∫ Bad —Ç–∞ –¥–æ–¥–∞—î –π–æ–≥–æ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ Bad –∞–∫–∞—É–Ω—Ç—ñ–≤"""
    try:
        # –°–ø–æ—á–∞—Ç–∫—É –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ –æ—Å–Ω–æ–≤–Ω—ñ–π —Ç–∞–±–ª–∏—Ü—ñ
        await update_status_by_auth_token(auth_token, "Bad")
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Ç–∞–±–ª–∏—Ü—ñ Bad
        all_data = await read_all_data()
        account_data = None
        
        for row in all_data:
            if row.get('Auth_Token') == auth_token:
                account_data = row
                break
        
        if account_data:
            # –î–æ–¥–∞—î–º–æ –∞–∫–∞—É–Ω—Ç –¥–æ —Ç–∞–±–ª–∏—Ü—ñ Bad
            try:
                from googleTableBadAccount import add_record_bad
                from account.accountMain import Account
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç Account –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –≤ add_record_bad
                account = Account(
                    account_data.get('Username', ''),
                    account_data.get('Password', ''),
                    account_data.get('Auth_Token', ''),
                    account_data.get('ct0 Token', ''),
                    account_data.get('Warm-up days', 0),
                    account_data.get('Status', ''),
                    account_data.get('Unique_Group_Code', ''),
                    account_data.get('Proxy', '')
                )
                
                # –î–æ–¥–∞—î–º–æ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ Bad
                await add_record_bad(account)
                print(f"‚úÖ –ê–∫–∞—É–Ω—Ç {auth_token[:20]}... –¥–æ–¥–∞–Ω–æ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ Bad –∞–∫–∞—É–Ω—Ç—ñ–≤")
                
            except ImportError as e:
                print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –º–æ–¥—É–ª—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ Bad: {e}")
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ Bad: {e}")
        
        print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {auth_token[:20]}... –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ Bad")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—ñ –∞–∫–∞—É–Ω—Ç–∞ —è–∫ Bad: {e}")
        return False


# –î–ª—è Front-end
async def add_account(record: dict) -> bool:
    """–î–æ–¥–∞—î –Ω–æ–≤–∏–π –∞–∫–∞—É–Ω—Ç —É Google —Ç–∞–±–ª–∏—Ü—é, –º–∞–ø–ª—è—á–∏ –∫–ª—é—á—ñ –∑–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞.

    –û—á—ñ–∫—É–≤–∞–Ω—ñ –∫–ª—é—á—ñ —É record (–Ω–µ –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ):
    - 'Username' (–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)
    - 'Auth_Token' (–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)
    - 'ct0 Token' (–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)
    - 'Warm-up days'
    - 'Status'
    - 'Unique_Group_Code'
    - 'Next_Launch'
    - 'Proxy'
    """
    try:
        required = ['Username', 'Auth_Token', 'ct0 Token']
        for key in required:
            if not record.get(key):
                raise ValueError(f"–í—ñ–¥—Å—É—Ç–Ω—î –ø–æ–ª–µ {key}")

        # –ü—Ä–æ—á–∏—Ç–∞—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = await asyncio.to_thread(sheet.row_values, 1)
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∏—Ç–∏ —Ä—è–¥–æ–∫ –∑–≥—ñ–¥–Ω–æ –∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        row_values = []
        for h in headers:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–æ—á–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –∫–ª—é—á—ñ–≤; —è–∫—â–æ –∫–ª—é—á –≤—ñ–¥—Å—É—Ç–Ω—ñ–π ‚Äî –ø–æ—Ä–æ–∂–Ω—å–æ
            value = record.get(h, '')
            row_values.append(value)

        # –Ø–∫—â–æ –∞—Ä–∫—É—à –º–∞—î –±—ñ–ª—å—à–µ –∫–æ–ª–æ–Ω–æ–∫, –Ω—ñ–∂ –ø–µ—Ä–µ–¥–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è ‚Äî –¥–æ–ø–æ–≤–Ω–∏—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º–∏
        # (–∞ —è–∫—â–æ –º–µ–Ω—à–µ ‚Äî –æ–±—Ä—ñ–∑–∞—Ç–∏ –¥–æ –¥–æ–≤–∂–∏–Ω–∏ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤)
        row_values = (row_values + [''] * len(headers))[:len(headers)]

        await asyncio.to_thread(
            sheet.append_row,
            row_values,
            value_input_option='RAW'
        )
        return True
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∞–∫–∞—É–Ω—Ç–∞: {e}")
        return False

async def delete_account_by_auth_token(auth_token: str) -> bool:
    """–í–∏–¥–∞–ª—è—î —Ä—è–¥–æ–∫ –∞–∫–∞—É–Ω—Ç–∞ –∑ Google —Ç–∞–±–ª–∏—Ü—ñ –∑–∞ Auth_Token"""
    try:
        all_data = await read_all_data()
        for i, row in enumerate(all_data):
            if row.get('Auth_Token') == auth_token:
                # +2 –±–æ –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∏, —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—è –∑ 1
                await asyncio.to_thread(sheet.delete_row, i + 2)
                print(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ –∞–∫–∞—É–Ω—Ç –∑ Auth_Token: {auth_token[:20]}...")
                return True
        print(f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–∫–∞—É–Ω—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {auth_token[:20]}...")
        return False
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∞–∫–∞—É–Ω—Ç–∞: {e}")
        return False

if __name__ == "__main__":
    print(asyncio.run(increment_all_warm_up_days_ultra_fast()))

