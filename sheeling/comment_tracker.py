"""
–ú–æ–¥—É–ª—å –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—ñ–≤ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ —Ç–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥—ñ–π —à–∏–ª—ñ–Ω–≥—É
"""

import asyncio
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import json
import os


class CommentTracker:
    """–í—ñ–¥—Å—Ç–µ–∂—É—î –ª—ñ–º—ñ—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    
    def __init__(self, data_file: str = "comment_limits.json"):
        self.data_file = data_file
        self.limits_data = self.load_limits_data()
    
    def load_limits_data(self) -> Dict:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –ø—Ä–æ –ª—ñ–º—ñ—Ç–∏ –∑ —Ñ–∞–π–ª—É"""
        try:
            if os.path.exists(self.data_file):
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—ñ–≤: {e}")
        
        return {}
    
    def save_limits_data(self):
        """–ó–±–µ—Ä—ñ–≥–∞—î –¥–∞–Ω—ñ –ø—Ä–æ –ª—ñ–º—ñ—Ç–∏ —É —Ñ–∞–π–ª"""
        try:
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(self.limits_data, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—ñ–≤: {e}")
    
    def get_account_data(self, username: str) -> Dict:
        """–û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –ø—Ä–æ –∞–∫–∫–∞—É–Ω—Ç"""
        if username not in self.limits_data:
            self.limits_data[username] = {
                'total_comments': 0,
                'daily_comments': 0,
                'hourly_comments': 0,
                'last_daily_reset': time.time(),
                'last_hourly_reset': time.time(),
                'comment_history': []
            }
        return self.limits_data[username]
    
    def can_comment(self, username: str, total_limit: int, daily_limit: int, hourly_limit: int) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –º–æ–∂–µ –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–µ–Ω—Ç—É–≤–∞—Ç–∏"""
        account_data = self.get_account_data(username)
        current_time = time.time()
        
        # –°–∫–∏–¥–∞—î–º–æ –¥–µ–Ω–Ω–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫ —è–∫—â–æ –ø—Ä–æ–π—à–æ–≤ –¥–µ–Ω—å
        if current_time - account_data['last_daily_reset'] > 86400:  # 24 –≥–æ–¥–∏–Ω–∏
            account_data['daily_comments'] = 0
            account_data['last_daily_reset'] = current_time
        
        # –°–∫–∏–¥–∞—î–º–æ –≥–æ–¥–∏–Ω–Ω–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫ —è–∫—â–æ –ø—Ä–æ–π—à–ª–∞ –≥–æ–¥–∏–Ω–∞
        if current_time - account_data['last_hourly_reset'] > 3600:  # 1 –≥–æ–¥–∏–Ω–∞
            account_data['hourly_comments'] = 0
            account_data['last_hourly_reset'] = current_time
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç–∏
        if account_data['total_comments'] >= total_limit:
            print(f"‚ö†Ô∏è {username}: –î–æ—Å—è–≥–Ω—É—Ç–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –ª—ñ–º—ñ—Ç –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ ({total_limit})")
            return False
        
        if account_data['daily_comments'] >= daily_limit:
            print(f"‚ö†Ô∏è {username}: –î–æ—Å—è–≥–Ω—É—Ç–æ –¥–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ ({daily_limit})")
            return False
        
        if account_data['hourly_comments'] >= hourly_limit:
            print(f"‚ö†Ô∏è {username}: –î–æ—Å—è–≥–Ω—É—Ç–æ –≥–æ–¥–∏–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ ({hourly_limit})")
            return False
        
        return True
    
    def record_comment(self, username: str, comment_text: str = ""):
        """–ó–∞–ø–∏—Å—É—î –∫–æ–º–µ–Ω—Ç–∞—Ä —É —ñ—Å—Ç–æ—Ä—ñ—é"""
        account_data = self.get_account_data(username)
        current_time = time.time()
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏
        account_data['total_comments'] += 1
        account_data['daily_comments'] += 1
        account_data['hourly_comments'] += 1
        
        # –î–æ–¥–∞—î–º–æ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
        comment_record = {
            'timestamp': current_time,
            'datetime': datetime.fromtimestamp(current_time).isoformat(),
            'text': comment_text[:100] + "..." if len(comment_text) > 100 else comment_text
        }
        account_data['comment_history'].append(comment_record)
        
        # –û–±–º–µ–∂—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –æ—Å—Ç–∞–Ω–Ω—ñ–º–∏ 100 –∫–æ–º–µ–Ω—Ç–∞—Ä—è–º–∏
        if len(account_data['comment_history']) > 100:
            account_data['comment_history'] = account_data['comment_history'][-100:]
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ
        self.save_limits_data()
        
        print(f"‚úÖ {username}: –ö–æ–º–µ–Ω—Ç–∞—Ä –∑–∞–ø–∏—Å–∞–Ω–æ. –ó–∞–≥–∞–ª—å–Ω–æ: {account_data['total_comments']}, "
              f"—Å—å–æ–≥–æ–¥–Ω—ñ: {account_data['daily_comments']}, –∑–∞ –≥–æ–¥–∏–Ω—É: {account_data['hourly_comments']}")
    
    def get_account_stats(self, username: str) -> Dict:
        """–û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞"""
        account_data = self.get_account_data(username)
        return {
            'total_comments': account_data['total_comments'],
            'daily_comments': account_data['daily_comments'],
            'hourly_comments': account_data['hourly_comments'],
            'last_daily_reset': datetime.fromtimestamp(account_data['last_daily_reset']).isoformat(),
            'last_hourly_reset': datetime.fromtimestamp(account_data['last_hourly_reset']).isoformat(),
            'recent_comments': account_data['comment_history'][-10:]  # –û—Å—Ç–∞–Ω–Ω—ñ 10 –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
        }


class ActionLogger:
    """–õ–æ–≥—É—î –¥—ñ—ó —à–∏–ª—ñ–Ω–≥—É –≤ Google —Ç–∞–±–ª–∏—Ü—é"""
    
    def __init__(self, google_utils):
        self.google_utils = google_utils
    
    async def log_action(self, username: str, action_type: str, message: str, logs_table: str, 
                        success: bool = True, details: Dict = None):
        """–õ–æ–≥—É—î –¥—ñ—é –≤ Google —Ç–∞–±–ª–∏—Ü—é"""
        try:
            if not logs_table:
                print(f"‚ö†Ô∏è –ù–µ–º–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–∞–±–ª–∏—Ü—é –ª–æ–≥—ñ–≤ –¥–ª—è {username}")
                return False
            
            current_time = datetime.now().isoformat()
            
            log_data = {
                'timestamp': current_time,
                'username': username,
                'action_type': action_type,
                'message': message,
                'success': 'SUCCESS' if success else 'ERROR',
                'details': json.dumps(details) if details else ''
            }
            
            # –¢—É—Ç –º–∞—î –±—É—Ç–∏ –ª–æ–≥—ñ–∫–∞ –∑–∞–ø–∏—Å—É –≤ Google —Ç–∞–±–ª–∏—Ü—é
            # –ü–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –≤–∏–≤–æ–¥–∏–º–æ –≤ –∫–æ–Ω—Å–æ–ª—å
            print(f"üìù –õ–û–ì: {current_time} | {username} | {action_type} | {message} | {'‚úÖ' if success else '‚ùå'}")
            
            if details:
                print(f"   –î–µ—Ç–∞–ª—ñ: {details}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥—ñ—ó: {e}")
            return False
    
    async def log_error(self, username: str, action_type: str, error_message: str, logs_table: str, 
                       error_details: Dict = None):
        """–õ–æ–≥—É—î –ø–æ–º–∏–ª–∫—É –≤ Google —Ç–∞–±–ª–∏—Ü—é"""
        return await self.log_action(
            username, action_type, error_message, logs_table, 
            success=False, details=error_details
        )
    
    async def log_success(self, username: str, action_type: str, message: str, logs_table: str, 
                         action_details: Dict = None):
        """–õ–æ–≥—É—î —É—Å–ø—ñ—à–Ω—É –¥—ñ—é –≤ Google —Ç–∞–±–ª–∏—Ü—é"""
        return await self.log_action(
            username, action_type, message, logs_table, 
            success=True, details=action_details
        )


# –ì–ª–æ–±–∞–ª—å–Ω—ñ –µ–∫–∑–µ–º–ø–ª—è—Ä–∏
comment_tracker = CommentTracker()
action_logger = None  # –ë—É–¥–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –ø—ñ–∑–Ω—ñ—à–µ


def init_action_logger(google_utils):
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –ª–æ–≥–µ—Ä –¥—ñ–π"""
    global action_logger
    action_logger = ActionLogger(google_utils)


async def check_comment_limits(username: str, total_limit: int, daily_limit: int, hourly_limit: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –Ω–µ –ø–µ—Ä–µ–≤–∏—â–µ–Ω—ñ –ª—ñ–º—ñ—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤"""
    return comment_tracker.can_comment(username, total_limit, daily_limit, hourly_limit)


async def update_comment_counters(username: str, comment_text: str = ""):
    """–û–Ω–æ–≤–ª—é—î –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤"""
    comment_tracker.record_comment(username, comment_text)


async def log_action(username: str, action_type: str, message: str, logs_table: str, 
                    success: bool = True, details: Dict = None):
    """–õ–æ–≥—É—î –¥—ñ—é"""
    if action_logger:
        return await action_logger.log_action(username, action_type, message, logs_table, success, details)
    else:
        print(f"‚ö†Ô∏è –õ–æ–≥–µ—Ä –¥—ñ–π –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è {username}")
        return False


async def log_error(username: str, action_type: str, error_message: str, logs_table: str, 
                   error_details: Dict = None):
    """–õ–æ–≥—É—î –ø–æ–º–∏–ª–∫—É"""
    if action_logger:
        return await action_logger.log_error(username, action_type, error_message, logs_table, error_details)
    else:
        print(f"‚ö†Ô∏è –õ–æ–≥–µ—Ä –¥—ñ–π –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è {username}")
        return False


async def log_success(username: str, action_type: str, message: str, logs_table: str, 
                     action_details: Dict = None):
    """–õ–æ–≥—É—î —É—Å–ø—ñ—à–Ω—É –¥—ñ—é"""
    if action_logger:
        return await action_logger.log_success(username, action_type, message, logs_table, action_details)
    else:
        print(f"‚ö†Ô∏è –õ–æ–≥–µ—Ä –¥—ñ–π –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è {username}")
        return False


def get_account_stats(username: str) -> Dict:
    """–û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞"""
    return comment_tracker.get_account_stats(username)
