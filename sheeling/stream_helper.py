"""
Stream Helper –¥–ª—è –∫–æ–∂–Ω–æ—ó –≥—Ä—É–ø–∏ —à–∏–ª—ñ–Ω–≥—É - –ø—Ä–æ—Å—Ç–∏–π –∞–Ω–∞–ª–æ–≥ streamHelper.py
"""
import asyncio
import json
import random
import sys
import time
import threading
from typing import Dict, List, Optional
import logging
from datetime import datetime
import os

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –∫–æ—Ä–µ–Ω–µ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –ø—Ä–æ–µ–∫—Ç—É
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
if parent_dir not in sys.path:
    sys.path.insert(0, parent_dir)

from sheeling.dataBase import add_group_log
from sheeling.google_utils import read_accounts_from_url
from account.accountMain import Account
from accountBehaviors import run_account_shilling, run_account_shilling_advanced

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –º–æ–¥—É–ª—å –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
try:
    from sheeling.comment_tracker import init_action_logger
    COMMENT_TRACKER_AVAILABLE = True
    print("‚úÖ –ú–æ–¥—É–ª—å –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≤ stream_helper")
except ImportError as e:
    COMMENT_TRACKER_AVAILABLE = False
    print(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –≤ stream_helper: {e}")

DELAY_BETWEEN_CHECK = 30
MAX_CONCURRENT_ACCOUNTS = 1
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ShillingStreamHelper:
    """–ü—Ä–æ—Å—Ç–∏–π Stream Helper –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–æ—Ç–æ–∫–æ–º —Ä–æ–±–æ—Ç–∏ –≥—Ä—É–ø–∏ —à–∏–ª—ñ–Ω–≥—É"""
    
    def __init__(self, group_name: str, group_settings: Dict, google_utils):
        self.group_name = group_name
        self.settings = group_settings
        self.google_utils = google_utils
        
        # –°—Ç–∞—Ç—É—Å —Ä–æ–±–æ—Ç–∏
        self.is_running = False
        self.work_task = None
        self.work_thread = None
        self.stop_event = threading.Event()
        
        # –ê–∫—Ç–∏–≤–Ω—ñ –ø–æ—Ç–æ–∫–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç—ñ–≤
        self.active_account_tasks = {}
        self.max_concurrent_accounts = MAX_CONCURRENT_ACCOUNTS
        
        # –°–ª–æ–≤–Ω–∏–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å: {username: (account, task)} - –≤–∏–Ω–µ—Å–µ–Ω–æ –Ω–∞ —Ä—ñ–≤–µ–Ω—å –∫–ª–∞—Å—É
        self.active_tasks = {}
        
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è
        self.logger = logging.getLogger(f"ShillingStream_{group_name}")
        
        # –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è —Ä–æ–±–æ—Ç–∏
        self.accounts = []
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–±–æ—Ç–∏
        self.stats = {
            'start_time': None,
            'total_actions': 0,
            'successful_actions': 0,
            'failed_actions': 0,
            'last_action_time': None
        }
        
        # –ü–æ—Ä–æ–≥ –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª–∞–∫—Ç–∏—á–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É (5 –≥–æ–¥–∏–Ω)
        self.proactive_restart_seconds = 5 * 3600
        self.last_full_start_ts = None
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–∫–∏ –º—ñ–∂ –∑–∞–ø—É—Å–∫–∞–º–∏ –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 2 –≥–æ–¥–∏–Ω–∏)
        if 'next_launch_delay' not in self.settings:
            self.settings['next_launch_delay'] = 10800  # 2 –≥–æ–¥–∏–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ª–æ–≥–µ—Ä –¥—ñ–π —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
        if COMMENT_TRACKER_AVAILABLE and hasattr(self, 'google_utils') and self.google_utils:
            try:
                init_action_logger(self.google_utils)
                print(f"‚úÖ –õ–æ–≥–µ—Ä –¥—ñ–π —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è –≥—Ä—É–ø–∏ {group_name}")
            except Exception as e:
                print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ª–æ–≥–µ—Ä–∞ –¥—ñ–π: {e}")
        else:
            print(f"‚ö†Ô∏è –õ–æ–≥–µ—Ä –¥—ñ–π –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ (google_utils –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –º–æ–¥—É–ª—å –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π)")
    
    async def start_work(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫–∞—î —Ä–æ–±–æ—Ç—É –≥—Ä—É–ø–∏ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        """
        if self.is_running:
            self.logger.warning(f"–ì—Ä—É–ø–∞ {self.group_name} –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return False
        
        try:
            # –°–∫–∏–¥–∞—î–º–æ –ø–æ–¥—ñ—é –∑—É–ø–∏–Ω–∫–∏
            self.stop_event.clear()
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –ø–æ—Ç—ñ–∫ –¥–ª—è —Ä–æ–±–æ—Ç–∏
            self.work_thread = threading.Thread(
                target=self._work_loop,
                name=f"ShillingWork_{self.group_name}",
                daemon=True
            )
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ç—ñ–∫
            self.work_thread.start()
            
            self.is_running = True
            self.stats['start_time'] = datetime.now()
            self.last_full_start_ts = time.time()
            
            print("THREAD STARTED!")
            
            # –õ–æ–≥—É—î–º–æ –∑–∞–ø—É—Å–∫
            await add_group_log(
                self.group_name,
                "INFO",
                f"–ì—Ä—É–ø–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ (Thread ID: {self.work_thread.ident})"
            )
            
            return True
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –≥—Ä—É–ø–∏ {self.group_name}: {e}")
            await add_group_log(self.group_name, "ERROR", f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
            return False
            
            
    def _work_loop(self):
        """
        –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Ä–æ–±–æ—Ç–∏, —è–∫–∏–π –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        """
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π event loop –¥–ª—è —Ü—å–æ–≥–æ –ø–æ—Ç–æ–∫—É
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        try:
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
            loop.run_until_complete(self._async_work_loop())
        finally:
            loop.close()

    async def _async_work_loop(self):
        """
        –ù–µ–ø–µ—Ä–µ—Ä–≤–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é –∞–∫–∫–∞—É–Ω—Ç—ñ–≤
        """
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ self.active_tasks –∑–∞–º—ñ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ—ó –∑–º—ñ–Ω–Ω–æ—ó
        
        while not self.stop_event.is_set():
            try:
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –Ω–µ –Ω–∞—Å—Ç–∞–≤ —á–∞—Å –ø—Ä–æ—Ñ—ñ–ª–∞–∫—Ç–∏—á–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
                if self.last_full_start_ts and (time.time() - self.last_full_start_ts) >= self.proactive_restart_seconds:
                    print(f"‚ôªÔ∏è –ì—Ä—É–ø–∞ {self.group_name}: –ø—Ä–æ—Ñ—ñ–ª–∞–∫—Ç–∏—á–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—ñ—Å–ª—è 5 –≥–æ–¥–∏–Ω —Ä–æ–±–æ—Ç–∏")
                    # –ú'—è–∫–æ –∑—É–ø–∏–Ω—è—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏
                    await self.stop_all_active_accounts()
                    # –°–∫–∏–¥–∞—î–º–æ —Ç–∞–π–º–µ—Ä —ñ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ü–∏–∫–ª –±–µ–∑ –ø–æ–≤–Ω–æ—ó –∑—É–ø–∏–Ω–∫–∏ –ø–æ—Ç–æ–∫—É
                    self.last_full_start_ts = time.time()
                    # –ö–æ—Ä–æ—Ç–∫–∞ –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è–º
                    await asyncio.sleep(1)
                    continue

                accounts_raw = await read_accounts_from_url(self.settings['accounts_google_sheet'])
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—É–ø–∏–Ω—è—Ç–∏—Å—è
                if self.stop_event.is_set():
                    print(f"üõë –ì—Ä—É–ø–∞ {self.group_name}: –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏, –≤–∏—Ö–æ–¥–∏–º–æ –∑ —Ü–∏–∫–ª—É")
                    break
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–º–µ–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤
                current_active_count = len(self.active_tasks)
                if current_active_count >= self.max_concurrent_accounts:
                    print(f"üîí –ì—Ä—É–ø–∞ {self.group_name}: –î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç –∞–∫—Ç–∏–≤–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ ({current_active_count}/{self.max_concurrent_accounts}), –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤—ñ –∑–∞–ø—É—Å–∫–∏")
                else:
                    # –°–ø–æ—á–∞—Ç–∫—É –∑–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –≥–æ—Ç–æ–≤—ñ –∞–∫–∫–∞—É–Ω—Ç–∏
                    ready_accounts = []
                    for x in accounts_raw:
                        username = x.get('Username', '')
                        
                        # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —è–∫—â–æ –∞–∫–∫–∞—É–Ω—Ç –≤–∂–µ –ø—Ä–∞—Ü—é—î
                        if username in self.active_tasks:
                            continue
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç
                        if (float(x.get('Next_Launch', 0)) <= time.time() or float(x.get('Next_Launch', 0)) == 0) and x.get('Status', 0) == "Good":
                            ready_accounts.append(x)
                    
                    # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è –æ–¥–Ω–æ—á–∞—Å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É
                    available_slots = self.max_concurrent_accounts - current_active_count
                    accounts_to_start = ready_accounts[:available_slots]
                    
                    if accounts_to_start:
                        print(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ {len(ready_accounts)} –≥–æ—Ç–æ–≤–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤, –∑–∞–ø—É—Å–∫–∞—î–º–æ {len(accounts_to_start)}")
                        
                        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞—Å–∏ –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö –æ–¥–Ω–æ—á–∞—Å–Ω–æ
                        for x in accounts_to_start:
                            username = x.get('Username', '')
                            
                            account = Account(
                                username,
                                x.get('Password', ''),
                                x.get('Auth_Token', ''),
                                x.get('ct0 Token', ''),
                                0, 
                                "Good", 
                                "B10", 
                                x.get('Proxy', '')
                            )
                            
                            # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
                            task = asyncio.create_task(
                                self.account_process_with_cleanup(account),
                                name=f"Account_{username}"
                            )
                            
                            # –î–æ–¥–∞—î–º–æ –¥–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
                            self.active_tasks[username] = (account, task)
                            print(f"üöÄ –ê–∫–∫–∞—É–Ω—Ç {username} –¥–æ–¥–∞–Ω–æ –¥–æ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏")
                        
                        print(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ {len(accounts_to_start)} –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ")
                    else:
                        print(f"üò¥ –ì—Ä—É–ø–∞ {self.group_name}: –ù–µ–º–∞—î –≥–æ—Ç–æ–≤–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫—É")
                
                # –û—á–∏—â–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
                completed_tasks = []
                for username, (account, task) in self.active_tasks.items():
                    if task.done():
                        try:
                            result = task.result()
                            print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {username} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
                        except Exception as e:
                            print(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {username} –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑ –ø–æ–º–∏–ª–∫–æ—é: {e}")
                        completed_tasks.append(username)
                
                # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
                for username in completed_tasks:
                    del self.active_tasks[username]
                
                # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if self.active_tasks:
                    print(f"üìä –ì—Ä—É–ø–∞ {self.group_name}: –ê–∫—Ç–∏–≤–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤: {len(self.active_tasks)}")

                else:
                    print(f"üò¥ –ì—Ä—É–ø–∞ {self.group_name}: –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤")
                

                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—É–ø–∏–Ω—è—Ç–∏—Å—è –ø–µ—Ä–µ–¥ –ø–∞—É–∑–æ—é
                if self.stop_event.is_set():
                    print(f"üõë –ì—Ä—É–ø–∞ {self.group_name}: –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏, –≤–∏—Ö–æ–¥–∏–º–æ –∑ —Ü–∏–∫–ª—É")
                    break
                
                # –ö–æ—Ä–æ—Ç–∫–∞ –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
                await asyncio.sleep(DELAY_BETWEEN_CHECK)
                
                
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ —Ä–æ–±–æ—Ç–∏ –≥—Ä—É–ø–∏ {self.group_name}: {e}")
                await asyncio.sleep(DELAY_BETWEEN_CHECK)

    async def account_process(self, account):
        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–æ–∫ –∑ settings
        delays = self.settings.get('delays', {})
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –¥—ñ–π
        main_words_table = self.settings.get('search_keywords', {})
        logs_link = self.settings.get('logs_google_sheet', {})
        actions_per_run = self.settings.get('actions_per_run', {})
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –∑ —É—Å—ñ–º–∞ –Ω–æ–≤–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
        await run_account_shilling_advanced(account, self.settings)
    
    async def account_process_with_cleanup(self, account):
        """
        –û–±—Ä–æ–±–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º Next_Launch —Ç–∞ –æ—á–∏—â–µ–Ω–Ω—è–º
        """
        try:
            # –í–∏–∫–æ–Ω—É—î–º–æ —Ä–æ–±–æ—Ç—É –∞–∫–∫–∞—É–Ω—Ç–∞
            await self.account_process(account)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ Next_Launch –≤ Google Sheets
            await self.update_next_launch(account.username)
            
        except Exception as e:
            print(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {account.username}: –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {e}")
            # –ù–∞–≤—ñ—Ç—å –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –æ–Ω–æ–≤–ª—é—î–º–æ Next_Launch —â–æ–± –Ω–µ –∑–∞—Ü–∏–∫–ª—é–≤–∞—Ç–∏—Å—è
            try:
                await self.update_next_launch(account.username)
            except Exception as update_error:
                print(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {account.username}: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Next_Launch: {update_error}")
        finally:
            # –í–∏–¥–∞–ª—è—î–º–æ –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
            if account.username in self.active_tasks:
                del self.active_tasks[account.username]
    
    async def update_next_launch(self, username):
        """
        –û–Ω–æ–≤–ª—é—î Next_Launch –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Google Sheets
        """
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å
            current_time = time.time()
            
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —á–∞—Å –∑–∞–ø—É—Å–∫—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —á–µ—Ä–µ–∑ 2 –≥–æ–¥–∏–Ω–∏)
            next_launch_delay = self.settings.get('next_launch_delay', 10800)  # 2 –≥–æ–¥–∏–Ω–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            next_launch_time = current_time + (next_launch_delay - random.uniform(0.5, 2))
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –≤ Google Sheets
            sheet_url = self.settings.get('accounts_google_sheet', '')
            if sheet_url and hasattr(self, 'google_utils') and self.google_utils:
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ Auth_Token –¥–ª—è —Ü—å–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                accounts_raw = await read_accounts_from_url(sheet_url)
                auth_token = None
                
                for account_data in accounts_raw:
                    if account_data.get('Username') == username:
                        auth_token = account_data.get('Auth_Token')
                        break
                
                if auth_token:
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                    success = await self.google_utils.update_next_launch_by_auth_token(
                        sheet_url, auth_token, int(next_launch_time)
                    )
                    
                    if not success:
                        print(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {username}: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ Next_Launch")
                else:
                    print(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {username}: Auth_Token –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            else:
                print(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {username}: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ Next_Launch (–Ω–µ–º–∞—î URL —Ç–∞–±–ª–∏—Ü—ñ –∞–±–æ google_utils)")
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Next_Launch –¥–ª—è {username}: {e}")
    
    async def stop_all_active_accounts(self):
        """
        –ó—É–ø–∏–Ω—è—î –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏ —Ç–∞ –∑–∞–∫—Ä–∏–≤–∞—î —ó—Ö –±—Ä–∞—É–∑–µ—Ä–∏
        
        """
        if not self.active_tasks:
            return True
        
        print(f"üõë –ì—Ä—É–ø–∞ {self.group_name}: –ó—É–ø–∏–Ω—è—î–º–æ {len(self.active_tasks)} –∞–∫—Ç–∏–≤–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤...")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é —Å–ª–æ–≤–Ω–∏–∫–∞, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–∫–∏ "dictionary changed size during iteration"
        active_tasks_copy = dict(self.active_tasks)
        
        stopped_count = 0
        for username, (account, task) in active_tasks_copy.items():
            try:
                # –°–∫–∞—Å–æ–≤—É—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è
                if not task.done():
                    task.cancel()
                
                # –ó—É–ø–∏–Ω—è—î–º–æ –∞–∫–∞—É–Ω—Ç (–∑–∞–∫—Ä–∏–≤–∞—î–º–æ –±—Ä–∞—É–∑–µ—Ä)
                try:
                    await account.stop()
                    stopped_count += 1
                except Exception as e:
                    print(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {username}: –ø–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
                
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {username}: {e}")
        
        # –û—á–∏—â–∞—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
        self.active_tasks.clear()
        
        print(f"‚úÖ –ì—Ä—É–ø–∞ {self.group_name}: –ó—É–ø–∏–Ω–µ–Ω–æ {stopped_count} –∞–∫–∞—É–Ω—Ç—ñ–≤")
        return True
    
    def get_active_accounts_count(self) -> int:
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤
        """
        return len(self.active_tasks)
    
    def get_active_accounts_info(self) -> List[Dict]:
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏
        """
        accounts_info = []
        for username, (account, task) in self.active_tasks.items():
            accounts_info.append({
                'username': username,
                'status': 'running' if not task.done() else 'completed',
                'account_object': account
            })
        return accounts_info

    async def stop_work(self) -> bool:
        """
        –ó—É–ø–∏–Ω—è—î —Ä–æ–±–æ—Ç—É –≥—Ä—É–ø–∏
        """
        if not self.is_running:
            self.logger.warning(f"–ì—Ä—É–ø–∞ {self.group_name} –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return False
        
        try:
            print(f"üõë –ó—É–ø–∏–Ω—è—î–º–æ –≥—Ä—É–ø—É {self.group_name}...")
            
            # 1. –°–ü–û–ß–ê–¢–ö–£ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ–¥—ñ—é –∑—É–ø–∏–Ω–∫–∏, —â–æ–± –∑—É–ø–∏–Ω–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
            self.stop_event.set()
            
            # 2. –î–∞—î–º–æ —á–∞—Å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∑—É–ø–∏–Ω–∏—Ç–∏—Å—è
            await asyncio.sleep(1)
            
            # 3. –¢–µ–ø–µ—Ä —Ä–æ–±–∏–º–æ –∫–æ–ø—ñ—é active_tasks —Ç–∞ –∑—É–ø–∏–Ω—è—î–º–æ –∞–∫–∞—É–Ω—Ç–∏
            await self.stop_all_active_accounts()
            
            # 4. –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—Ç–æ–∫—É
            if self.work_thread and self.work_thread.is_alive():
                self.work_thread.join(timeout=10)
            
            self.is_running = False
            # –°–∫–∏–¥–∞—î–º–æ —Ç–∞–π–º–µ—Ä —Å—Ç–∞—Ä—Ç—É
            self.last_full_start_ts = None
            
            # –õ–æ–≥—É—î–º–æ –∑—É–ø–∏–Ω–∫—É
            await add_group_log(
                self.group_name,
                "INFO",
                f"–ì—Ä—É–ø–∞ –∑—É–ø–∏–Ω–µ–Ω–∞"
            )
            
            print(f"‚úÖ –ì—Ä—É–ø–∞ {self.group_name} —É—Å–ø—ñ—à–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–∞")
            return True
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ –≥—Ä—É–ø–∏ {self.group_name}: {e}")
            await add_group_log(self.group_name, "ERROR", f"–ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏: {e}")
            return False
    
    def get_status(self) -> Dict:
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –≥—Ä—É–ø–∏
        """
        return {
            'group_name': self.group_name,
            'is_running': self.is_running,
            'thread_alive': self.work_thread.is_alive() if self.work_thread else False,
            'accounts_count': len(self.accounts),
            'active_accounts_count': len(self.active_tasks),
            'active_accounts': list(self.active_tasks.keys()),
            'stats': self.stats.copy()
        }
