import threading
import asyncio
import time
import random
from googleTable import read_all_data, update_next_launch_by_auth_token, get_ready_accounts, increment_all_warm_up_days_ultra_fast
from accountBehaviors import get_account_behavior, run_accoun_new, run_accoun_medium, run_accoun_old
from googleTableUpdateStatistsc import reset_all

# –û–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–Ω–æ—á–∞—Å–Ω–æ –æ–±—Ä–æ–±–ª—é–≤–∞–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤
MAX_CONCURRENT_ACCOUNTS = 20


class StreamManager:
    def __init__(self):
        self.active_streams = {}
        self.lock = asyncio.Lock()
        self.max_streams = 1000
        self.is_running = False
        # –ü—Ä–æ—Ñ—ñ–ª–∞–∫—Ç–∏—á–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≥—Ä—É–ø–∏ —è–∫—â–æ –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–Ω–∞–¥ 5 –≥–æ–¥–∏–Ω
        self.proactive_restart_seconds = 5 * 3600
        


    def group_accounts_by_stream(self, accounts_data):
        """–ì—Ä—É–ø—É—î –∞–∫–∫–∞—É–Ω—Ç–∏ –∑–∞ –ø–æ—Ç–æ–∫–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ Unique_Group_Code"""
        grouped_accounts = {}
        
        for account_data in accounts_data:
            group_code = account_data.get('Unique_Group_Code', 'Unknown')
            
            if group_code in grouped_accounts:
                grouped_accounts[group_code].append(account_data)
            else:
                grouped_accounts[group_code] = [account_data]
        
        print(f"üìã –°—Ç–≤–æ—Ä–µ–Ω–æ {len(grouped_accounts)} –≥—Ä—É–ø:")
        for group, accounts in grouped_accounts.items():
            print(f"   –ì—Ä—É–ø–∞ {group}: {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç—ñ–≤")
        
        return grouped_accounts

    async def create_new_stream(self, group_name, accounts_list):
        """–°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –ø–æ—Ç—ñ–∫ –¥–ª—è –≥—Ä—É–ø–∏ –∞–∫–∫–∞—É–Ω—Ç—ñ–≤"""
        try:
            if len(self.active_streams) >= self.max_streams:
                print(f"‚ö†Ô∏è –î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç –ø–æ—Ç–æ–∫—ñ–≤ ({self.max_streams})")
                return False
            
            task = asyncio.create_task(self.process_stream_group(group_name, accounts_list))
            
            self.active_streams[group_name] = {
                "task": task,
                "accounts": accounts_list,
                "group_name": group_name,
                "is_running": True,
                "created_at": time.time(),
                "last_activity": time.time()
            }
            
            print(f"üöÄ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –ø–æ—Ç—ñ–∫ –¥–ª—è –≥—Ä—É–ø–∏ {group_name} –∑ {len(accounts_list)} –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏")
            return True
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–æ—Ç–æ–∫—É {group_name}: {e}")
            return False

    async def process_stream_group(self, group_name, accounts_list):
        """–û–±—Ä–æ–±–ª—è—î –≤—Å—ñ –∞–∫–∫–∞—É–Ω—Ç–∏ –≤ –≥—Ä—É–ø—ñ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º –Ω–∞ –æ–¥–Ω–æ—á–∞—Å–Ω—É –æ–±—Ä–æ–±–∫—É"""
        try:
            print(f"üîÑ –ü–æ—á–∏–Ω–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –≥—Ä—É–ø–∏ {group_name}...")
            print(f"üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ —É –≥—Ä—É–ø—ñ: {len(accounts_list)}")
            print(f"üîí –û–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –æ–¥–Ω–æ—á–∞—Å–Ω—É –æ–±—Ä–æ–±–∫—É: {MAX_CONCURRENT_ACCOUNTS} –∞–∫–∫–∞—É–Ω—Ç—ñ–≤")
            
            # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è –æ–¥–Ω–æ—á–∞—Å–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
            limited_accounts = accounts_list[:MAX_CONCURRENT_ACCOUNTS]
            remaining_accounts = accounts_list[MAX_CONCURRENT_ACCOUNTS:]
            
            if remaining_accounts:
                print(f"‚ö†Ô∏è –û–±—Ä–æ–±–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ {MAX_CONCURRENT_ACCOUNTS} –∞–∫–∫–∞—É–Ω—Ç—ñ–≤")
                print(f"üìã –ó–∞–ª–∏—à–æ–∫ –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ ({len(remaining_accounts)}) –±—É–¥–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ü–∏–∫–ª—ñ")
            
            tasks = []
            for account_data in limited_accounts:
                from account.accountMain import Account
                proxy = account_data.get("Proxy")
                if proxy:
                    account = Account(
                        account_data["Username"],
                        account_data["Password"],
                        account_data["Auth_Token"], 
                        account_data["ct0 Token"],
                        account_data["Warm-up days"],
                        account_data["Status"],
                        account_data["Unique_Group_Code"],
                        proxy=proxy
                    )
                else:
                    account = Account(
                        account_data["Username"],
                        account_data["Password"],
                        account_data["Auth_Token"], 
                        account_data["ct0 Token"],
                        account_data["Warm-up days"],
                        account_data["Status"],
                        account_data["Unique_Group_Code"]
                    )
                
                behavior_function = get_account_behavior(account)
                
                if behavior_function:
                    task = asyncio.create_task(self.process_single_account(account, behavior_function))
                    tasks.append(task)
                else:
                    print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –ø–æ–≤–µ–¥—ñ–Ω–∫—É –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username}")
            
            if tasks:
                print(f"üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ {len(tasks)} –∑–∞–≤–¥–∞–Ω—å –æ–¥–Ω–æ—á–∞—Å–Ω–æ...")
                await asyncio.gather(*tasks)
                print(f"‚úÖ –ì—Ä—É–ø–∞ {group_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            else:
                print(f"‚ö†Ô∏è –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –¥–ª—è –≥—Ä—É–ø–∏ {group_name}")
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≥—Ä—É–ø–∏ {group_name}: {e}")
        finally:
            if group_name in self.active_streams:
                del self.active_streams[group_name]
                print(f"üóëÔ∏è –ü–æ—Ç—ñ–∫ {group_name} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö")

    async def process_single_account(self, account, behavior_function):
        """–û–±—Ä–æ–±–ª—è—î –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –∑ –≤–∏–∑–Ω–∞—á–µ–Ω–æ—é –ø–æ–≤–µ–¥—ñ–Ω–∫–æ—é"""
        try:
            print(f"üë§ –ü–æ—á–∏–Ω–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username}...")
            
            await behavior_function(account)
            
            new_launch_time = int(time.time()) + random.randint(3600, 7200)
            await update_next_launch_by_auth_token(account.auth_token, new_launch_time)
            
            print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account.username} –æ–±—Ä–æ–±–ª–µ–Ω–æ, –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∑–∞–ø—É—Å–∫: {new_launch_time}")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username}: {e}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –ø–æ–º–∏–ª–∫–∞ —á–µ—Ä–µ–∑ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞ —è–∫ Bad
            if "–ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ Bad" in str(e) or "no_posts_count >= 20" in str(e):
                print(f"üö® –ê–∫–∫–∞—É–Ω—Ç {account.username} –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ Bad, –Ω–µ –¥–æ–¥–∞—î–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É")
                # –ù–µ –æ–Ω–æ–≤–ª—é—î–º–æ Next_Launch –¥–ª—è –ø–æ–≥–∞–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤
                return
            else:
                # –î–ª—è —ñ–Ω—à–∏—Ö –ø–æ–º–∏–ª–æ–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∑–∞–ø—É—Å–∫
                new_launch_time = int(time.time()) + random.randint(3600, 7200)
                await update_next_launch_by_auth_token(account.auth_token, new_launch_time)

    async def main_monitor_loop(self):
        """–ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∞–∫–∫–∞—É–Ω—Ç—ñ–≤"""
        self.is_running = True
        print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∞–∫–∫–∞—É–Ω—Ç—ñ–≤...")
        print(f"üîí –û–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –æ–¥–Ω–æ—á–∞—Å–Ω—É –æ–±—Ä–æ–±–∫—É: {MAX_CONCURRENT_ACCOUNTS} –∞–∫–∫–∞—É–Ω—Ç—ñ–≤")
        
        daily_update_done = False
        
        while self.is_running:
            try:
                print("\n" + "="*50)
                print(f"‚è∞ –¶–∏–∫–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {time.strftime('%H:%M:%S')}")
                
                from datetime import datetime
                current_time = datetime.now()
                
                if current_time.hour == 0 and current_time.minute == 0 and current_time.second <= 30:
                    if not daily_update_done:
                        print("üïõ 00:00 - –≤–∏–∫–æ–Ω—É—î–º–æ —â–æ–¥–µ–Ω–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Warm-up days...")
                        await increment_all_warm_up_days_ultra_fast()
                        
                        print("üîÑ –°–∫–∏–¥–∞–Ω–Ω—è –¥–µ–Ω–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
                        try:
                            await reset_all()
                            print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∏–Ω—É—Ç–∞")
                        except Exception as stat_error:
                            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stat_error}")
                        
                        daily_update_done = True
                        print("‚úÖ –©–æ–¥–µ–Ω–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                else:
                    if current_time.hour != 0 or current_time.minute != 0:
                        daily_update_done = False
                
                ready_accounts = await get_ready_accounts()  # –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—É –≤–µ—Ä—Å—ñ—é
                
                if ready_accounts:
                    total_ready = len(ready_accounts)
                    print(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {total_ready} –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ –≥–æ—Ç–æ–≤–∏—Ö –¥–æ –∑–∞–ø—É—Å–∫—É")
                    
                    # –û–±–º–µ–∂—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏
                    if total_ready > MAX_CONCURRENT_ACCOUNTS:
                        print(f"üîí –û–±–º–µ–∂—É—î–º–æ –æ–±—Ä–æ–±–∫—É –¥–æ {MAX_CONCURRENT_ACCOUNTS} –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ –æ–¥–Ω–æ—á–∞—Å–Ω–æ")
                        ready_accounts = ready_accounts[:MAX_CONCURRENT_ACCOUNTS]
                    
                    grouped_accounts = self.group_accounts_by_stream(ready_accounts)
                    
                    for group_name, accounts_list in grouped_accounts.items():
                        if group_name not in self.active_streams:
                            await self.create_new_stream(group_name, accounts_list)
                        else:
                            print(f"‚ö†Ô∏è –ü–æ—Ç—ñ–∫ {group_name} –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∏–π")
                else:
                    print("üò¥ –ù–µ–º–∞—î –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ –≥–æ—Ç–æ–≤–∏—Ö –¥–æ –∑–∞–ø—É—Å–∫—É")
                
                await self.cleanup_finished_streams()
                
                print(f"üí§ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è 30 —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(30)
                
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ: {e}")
                await asyncio.sleep(30)
        
        print("üõë –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∑—É–ø–∏–Ω–µ–Ω–∞")

    async def cleanup_finished_streams(self):
        """–û—á–∏—â–∞—î –∑–∞–≤–µ—Ä—à–µ–Ω—ñ –ø–æ—Ç–æ–∫–∏"""
        streams_to_remove = []
        
        for group_name, stream_data in self.active_streams.items():
            if stream_data["task"].done():
                streams_to_remove.append(group_name)
        
        for group_name in streams_to_remove:
            del self.active_streams[group_name]
            print(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π –ø–æ—Ç—ñ–∫ {group_name}")
        
        if streams_to_remove:
            print(f"üìä –ê–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ—Ç–æ–∫—ñ–≤: {len(self.active_streams)}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª–∞–∫—Ç–∏—á–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫—ñ–≤ —Å—Ç–∞—Ä—à–∏—Ö –∑–∞ 5 –≥–æ–¥–∏–Ω
        streams_to_restart = []
        current_time = time.time()
        for group_name, stream_data in list(self.active_streams.items()):
            created_at = stream_data.get("created_at", current_time)
            is_running = stream_data.get("is_running", False)
            if is_running and (current_time - created_at) >= self.proactive_restart_seconds:
                streams_to_restart.append(group_name)

        for group_name in streams_to_restart:
            try:
                stream_data = self.active_streams.get(group_name)
                if not stream_data:
                    continue
                print(f"‚ôªÔ∏è –ü—Ä–æ—Ñ—ñ–ª–∞–∫—Ç–∏—á–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫—É {group_name} (–ø–æ–Ω–∞–¥ 5 –≥–æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ)")
                task = stream_data.get("task")
                # –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
                if task and not task.done():
                    task.cancel()
                    try:
                        await asyncio.sleep(0)
                    except Exception:
                        pass
                # –í–∏–¥–∞–ª–∏—Ç–∏ –∑—ñ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–µ—Ä–µ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –Ω–æ–≤–æ–≥–æ
                if group_name in self.active_streams:
                    del self.active_streams[group_name]
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –ø–æ—Ç–æ–∫—É {group_name}: {e}")

    def stop_monitoring(self):
        """–ó—É–ø–∏–Ω—è—î —Å–∏—Å—Ç–µ–º—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
        self.is_running = False
        print("üõë –ó–∞–ø–∏—Ç –Ω–∞ –∑—É–ø–∏–Ω–∫—É —Å–∏—Å—Ç–µ–º–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É")

    def remove_account_from_streams(self, username: str, auth_token: str = None):
        """–í–∏–¥–∞–ª—è—î –∞–∫–∞—É–Ω—Ç –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ—Ç–æ–∫—ñ–≤"""
        try:
            print(f"üóëÔ∏è –í–∏–¥–∞–ª—è—î–º–æ –∞–∫–∞—É–Ω—Ç {username} –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ—Ç–æ–∫—ñ–≤ streamHelper...")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ—Ç–æ–∫–∏ —Ç–∞ –≤–∏–¥–∞–ª—è—î–º–æ –∞–∫–∞—É–Ω—Ç –∑ –Ω–∏—Ö
            streams_to_update = []
            for group_name, stream_data in self.active_streams.items():
                if 'accounts' in stream_data:
                    # –®—É–∫–∞—î–º–æ –∞–∫–∞—É–Ω—Ç –∑–∞ username –∞–±–æ auth_token
                    account_to_remove = None
                    for account in stream_data['accounts']:
                        if (account.get('Username') == username or 
                            (auth_token and account.get('Auth_Token') == auth_token)):
                            account_to_remove = account
                            break
                    
                    if account_to_remove:
                        stream_data['accounts'].remove(account_to_remove)
                        streams_to_update.append(group_name)
                        print(f"‚úÖ –ê–∫–∞—É–Ω—Ç {username} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –ø–æ—Ç–æ–∫—É {group_name}")
            
            # –Ø–∫—â–æ –ø–æ—Ç—ñ–∫ –∑–∞–ª–∏—à–∏–≤—Å—è –±–µ–∑ –∞–∫–∞—É–Ω—Ç—ñ–≤, –≤–∏–¥–∞–ª—è—î–º–æ –π–æ–≥–æ
            for group_name in streams_to_update:
                if not self.active_streams[group_name]['accounts']:
                    print(f"üóëÔ∏è –ü–æ—Ç—ñ–∫ {group_name} –∑–∞–ª–∏—à–∏–≤—Å—è –±–µ–∑ –∞–∫–∞—É–Ω—Ç—ñ–≤, –≤–∏–¥–∞–ª—è—î–º–æ...")
                    if group_name in self.active_streams:
                        del self.active_streams[group_name]
            
            print(f"üìä –ê–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ—Ç–æ–∫—ñ–≤: {len(self.active_streams)}")
            return True
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∞–∫–∞—É–Ω—Ç–∞ {username} –∑ streamHelper: {e}")
            return False


async def start_monitoring_system():
    """–ó–∞–ø—É—Å–∫–∞—î —Å–∏—Å—Ç–µ–º—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∞–∫–∫–∞—É–Ω—Ç—ñ–≤"""
    stream_manager = StreamManager()
    
    try:
        print("üéØ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...")
        await stream_manager.main_monitor_loop()
    except KeyboardInterrupt:
        print("\nüõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏...")
        stream_manager.stop_monitoring()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        print("üèÅ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == "__main__":
    asyncio.run(start_monitoring_system())
