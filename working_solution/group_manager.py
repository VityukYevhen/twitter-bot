import asyncio
import json
import os
import sys
import time
from datetime import datetime
from typing import Dict, List, Any, Optional
from dataclasses import dataclass, asdict
import random

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –∫–æ—Ä–µ–Ω–µ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –ø—Ä–æ–µ–∫—Ç—É
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
if parent_dir not in sys.path:
    sys.path.insert(0, parent_dir)

from sheeling.dataBase import (
    add_shilling_group, get_all_shilling_groups, get_shilling_group_by_name,
    update_shilling_group, delete_shilling_group, add_group_log
)
from sheeling.google_utils import GoogleSheetManager
try:
    from sheeling.stream_helper import ShillingStreamHelper
except ImportError as e:
    print(f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É ShillingStreamHelper: {e}")
    ShillingStreamHelper = None

@dataclass
class GroupSettings:
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä—É–ø–∏ —à–∏–ª—ñ–Ω–≥—É"""
    group_name: str
    accounts_google_sheet: str
    logs_google_sheet: str
    delays: Dict[str, Dict[str, int]]
    actions_per_run: Dict[str, Dict[str, int]]
    search_keywords: List[str]
    post_topics: List[str]
    
    # –ù–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: –ü–æ—à—É–∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É
    exclude_keywords: List[str] = None
    max_search_results: int = 50
    search_delay: Dict[str, int] = None
    
    # –ù–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: –ë–µ–∑–ø–µ–∫–∞
    max_actions_per_hour: int = 20
    max_actions_per_day: int = 100
    avoid_same_accounts: bool = True
    randomize_timing: bool = True
    use_proxy_rotation: bool = False
    
    # –ù–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: –õ–æ–≥—É–≤–∞–Ω–Ω—è
    log_all_actions: bool = True
    log_errors: bool = True
    log_success_rate: bool = True
    save_screenshots: bool = False
    
    # –ù–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: –ö–∞—Ä—Ç–∏–Ω–∫–∏ —Ç–∞ –ø–æ—à—É–∫
    use_images: bool = False
    images_folder: str = ""
    search_format: str = "twitter_search"
    
    # –ù–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: –§—ñ–ª—å—Ç—Ä–∏ –ø–æ—à—É–∫—É
    min_followers: int = 1000
    min_likes: int = 5
    min_reposts: int = 2
    min_replies: int = 1
    search_hours: int = 24
    key_phrases: List[str] = None
    
    # –ù–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
    comments_total_limit: int = 2000
    comments_daily_limit: int = 100
    comments_hourly_limit: int = 10
    comments_per_post: Dict[str, int] = None
    comment_interval: Dict[str, int] = None
    comment_engagement: Dict[str, Dict[str, int]] = None
    comment_prompt: str = ""
    
    # –ù–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–ø–æ—Å—Ç—ñ–≤
    use_reposts: bool = False
    repost_percentage: int = 50
    repost_prompt: str = ""
    
    # –ù–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤
    use_posts: bool = False
    post_percentage: int = 50
    post_prompt: str = ""
    
    created_at: str = ""
    updated_at: str = ""
    
    def __post_init__(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–Ω–∞—á–µ–Ω—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º"""
        if self.exclude_keywords is None:
            self.exclude_keywords = []
        if self.search_delay is None:
            self.search_delay = {"min": 5, "max": 15}
        if self.key_phrases is None:
            self.key_phrases = []
        if self.comments_per_post is None:
            self.comments_per_post = {"min": 1, "max": 3}
        if self.comment_interval is None:
            self.comment_interval = {"min": 15, "max": 30}
        if self.comment_engagement is None:
            self.comment_engagement = {
                "likes": {"min": 1, "max": 3},
                "reposts": {"min": 2, "max": 5},
                "views": {"min": 55, "max": 100}
            }

class ShillingGroup:
    """–ö–ª–∞—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –æ–¥–Ω—ñ—î—é –≥—Ä—É–ø–æ—é —à–∏–ª—ñ–Ω–≥—É"""
    
    def __init__(self, group_name: str, settings: GroupSettings, google_utils: GoogleSheetManager):
        self.group_name = group_name
        self.settings = settings
        self.google_utils = google_utils
        self.is_running = False
        self.task = None
        self.accounts = []
        
        # Stream Helper –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–æ—Ç–æ–∫–æ–º —Ä–æ–±–æ—Ç–∏
        self.stream_helper: Optional[ShillingStreamHelper] = None
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞—î –≥—Ä—É–ø—É —à–∏–ª—ñ–Ω–≥—É"""
        if self.is_running:
            print(f"‚ö†Ô∏è –ì—Ä—É–ø–∞ '{self.group_name}' –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return False
        
        try:
            self.is_running = True
            await add_group_log(self.group_name, "START", "–ì—Ä—É–ø–∞ –∑–∞–ø—É—â–µ–Ω–∞")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ Stream Helper
            if ShillingStreamHelper is None:
                raise Exception("ShillingStreamHelper –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π")
            
            self.stream_helper = ShillingStreamHelper(
                self.group_name, 
                self.settings.__dict__, 
                self.google_utils
            )

            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ä–æ–±–æ—Ç—É —á–µ—Ä–µ–∑ Stream Helper –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
            print(f"üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ Stream Helper –¥–ª—è –≥—Ä—É–ø–∏ '{self.group_name}'...")
            success = await self.stream_helper.start_work()
            if not success:
                raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ Stream Helper")
            
            print(f"‚úÖ Stream Helper –¥–ª—è –≥—Ä—É–ø–∏ '{self.group_name}' —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ")
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –≤ –æ–∫—Ä–µ–º–æ–º—É –∑–∞–≤–¥–∞–Ω–Ω—ñ
            # self.task = asyncio.create_task(self.main_loop())
            
            # print(f"‚úÖ –ì—Ä—É–ø–∞ '{self.group_name}' —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞")
            return True
            
        except Exception as e:
            self.is_running = False
            error_msg = f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –≥—Ä—É–ø–∏: {e}"
            await add_group_log(self.group_name, "ERROR", error_msg)
            print(f"‚ùå {error_msg}")
            return False
    
    async def stop(self):
        """–ó—É–ø–∏–Ω—è—î –≥—Ä—É–ø—É —à–∏–ª—ñ–Ω–≥—É"""
        if not self.is_running:
            print(f"‚ö†Ô∏è –ì—Ä—É–ø–∞ '{self.group_name}' –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return False
        
        try:
            self.is_running = False
            
            # –ó—É–ø–∏–Ω—è—î–º–æ Stream Helper
            if self.stream_helper:
                await self.stream_helper.stop_work()
                self.stream_helper = None
            
            if self.task and not self.task.done():
                self.task.cancel()
                try:
                    await self.task
                except asyncio.CancelledError:
                    pass
            
            await add_group_log(self.group_name, "STOP", "–ì—Ä—É–ø–∞ –∑—É–ø–∏–Ω–µ–Ω–∞")
            print(f"‚úÖ –ì—Ä—É–ø–∞ '{self.group_name}' —É—Å–ø—ñ—à–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–∞")
            return True
            
        except Exception as e:
            error_msg = f"–ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ –≥—Ä—É–ø–∏: {e}"
            await add_group_log(self.group_name, "ERROR", error_msg)
            print(f"‚ùå {error_msg}")
            return False
    

    
    async def main_loop(self):
        """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Ä–æ–±–æ—Ç–∏ –≥—Ä—É–ø–∏ - —Ç–µ–ø–µ—Ä –ø—Ä–æ—Å—Ç–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å Stream Helper"""
        try:
            # Stream Helper –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π —ñ –ø—Ä–∞—Ü—é—î —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ
            # –¢—É—Ç –º–∏ –ø—Ä–æ—Å—Ç–æ —á–µ–∫–∞—î–º–æ –ø–æ–∫–∏ –≥—Ä—É–ø–∞ –ø—Ä–∞—Ü—é—î
            while self.is_running:
                await asyncio.sleep(10)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—ñ 10 —Å–µ–∫—É–Ω–¥
                
        # except asyncio.CancelledError:
        #     print(f"üõë –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –≥—Ä—É–ø–∏ {self.group_name} –∑—É–ø–∏–Ω–µ–Ω–æ")
        except Exception as e:
            error_msg = f"–ü–æ–º–∏–ª–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ –≥—Ä—É–ø–∏: {e}"
            await add_group_log(self.group_name, "ERROR", error_msg)
            print(f"‚ùå {error_msg}")
    
    def get_status(self) -> Dict:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –≥—Ä—É–ø–∏"""
        status = {
            'group_name': self.group_name,
            'is_running': self.is_running,
            'accounts_count': len(self.accounts),
            'settings': self.settings.__dict__
        }
        
        # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å Stream Helper —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
        if self.stream_helper:
            stream_status = self.stream_helper.get_status()
            status['stream_status'] = stream_status
        
        return status
    


class ShillingGroupManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤—Å—ñ–º–∞ –≥—Ä—É–ø–∞–º–∏ —à–∏–ª—ñ–Ω–≥—É"""
    
    def __init__(self):
        self.groups: Dict[str, ShillingGroup] = {}
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ Google Sheet Manager
        self.google_utils = GoogleSheetManager()
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤—ñ–¥–Ω–æ—Å–Ω–∏–π —à–ª—è—Ö –≤—ñ–¥ –∫–æ—Ä–µ–Ω–µ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –ø—Ä–æ–µ–∫—Ç—É
        # –¶–µ –∑–∞–±–µ–∑–ø–µ—á–∏—Ç—å —Ä–æ–±–æ—Ç—É –Ω–∞ –±—É–¥—å-—è–∫—ñ–π —Å–∏—Å—Ç–µ–º—ñ
        self.config_dir = "sheeling/configs"
        
        print(f"üìÅ –®–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏ configs: {self.config_dir}")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É configs —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
        if not os.path.exists(self.config_dir):
            os.makedirs(self.config_dir, exist_ok=True)
            print(f"üìÅ –ü–∞–ø–∫–∞ configs —Å—Ç–≤–æ—Ä–µ–Ω–∞: {self.config_dir}")
        else:
            print(f"üìÅ –ü–∞–ø–∫–∞ configs –≤–∂–µ —ñ—Å–Ω—É—î: {self.config_dir}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–∞–ø–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
        if os.path.exists(self.config_dir):
            print(f"‚úÖ –ü–∞–ø–∫–∞ configs –¥–æ—Å—Ç—É–ø–Ω–∞: {self.config_dir}")
        else:
            print(f"‚ùå –ü–∞–ø–∫–∞ configs –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞: {self.config_dir}")
    
    async def create_group(self, group_data: Dict[str, Any]) -> bool:
        """–°—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É –≥—Ä—É–ø—É —à–∏–ª—ñ–Ω–≥—É"""
        try:
            group_name = group_data['group_name']
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≥—Ä—É–ø–∞ –≤–∂–µ —ñ—Å–Ω—É—î –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–ª–æ–≤–Ω–∏–∫—É
            if group_name in self.groups:
                print(f"‚ö†Ô∏è –ì—Ä—É–ø–∞ '{group_name}' –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ –≤ –ø–∞–º'—è—Ç—ñ")
                return True  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ True, –±–æ –≥—Ä—É–ø–∞ –≤–∂–µ —ñ—Å–Ω—É—î
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≥—Ä—É–ø–∞ –≤–∂–µ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
            if await self.group_exists(group_name):
                print(f"‚ö†Ô∏è –ì—Ä—É–ø–∞ –∑ –Ω–∞–∑–≤–æ—é '{group_name}' –≤–∂–µ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö")
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≥—Ä—É–ø—É –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑–∞–º—ñ—Å—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó
                await self.load_group_from_database(group_name)
                return True
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ –Ω–æ–≤–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
            settings = GroupSettings(
                group_name=group_name,
                accounts_google_sheet=group_data['accounts_google_sheet'],
                logs_google_sheet=group_data['logs_google_sheet'],
                delays=group_data['delays'],
                actions_per_run=group_data['actions_per_run'],
                search_keywords=group_data['search_keywords'],
                post_topics=group_data['post_topics'],
                
                # –ù–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: –ü–æ—à—É–∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É
                exclude_keywords=group_data.get('exclude_keywords', []),
                max_search_results=group_data.get('max_search_results', 50),
                search_delay=group_data.get('search_delay', {'min': 5, 'max': 15}),
                
                # –ù–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: –ë–µ–∑–ø–µ–∫–∞
                max_actions_per_hour=group_data.get('max_actions_per_hour', 20),
                max_actions_per_day=group_data.get('max_actions_per_day', 100),
                avoid_same_accounts=group_data.get('avoid_same_accounts', True),
                randomize_timing=group_data.get('randomize_timing', True),
                use_proxy_rotation=group_data.get('use_proxy_rotation', False),
                
                # –ù–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: –õ–æ–≥—É–≤–∞–Ω–Ω—è
                log_all_actions=group_data.get('log_all_actions', True),
                log_errors=group_data.get('log_errors', True),
                log_success_rate=group_data.get('log_success_rate', True),
                save_screenshots=group_data.get('save_screenshots', False),
                
                # –ù–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: –ö–∞—Ä—Ç–∏–Ω–∫–∏ —Ç–∞ –ø–æ—à—É–∫
                use_images=group_data.get('use_images', False),
                images_folder=group_data.get('images_folder', ''),
                search_format=group_data.get('search_format', 'twitter_search'),
                
                # –ù–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: –§—ñ–ª—å—Ç—Ä–∏ –ø–æ—à—É–∫—É
                min_followers=group_data.get('min_followers', 1000),
                min_likes=group_data.get('min_likes', 5),
                min_reposts=group_data.get('min_reposts', 2),
                min_replies=group_data.get('min_replies', 1),
                search_hours=group_data.get('search_hours', 24),
                key_phrases=group_data.get('key_phrases', []),
                
                # –ù–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
                comments_total_limit=group_data.get('comments_total_limit', 2000),
                comments_daily_limit=group_data.get('comments_daily_limit', 100),
                comments_hourly_limit=group_data.get('comments_hourly_limit', 10),
                comments_per_post=group_data.get('comments_per_post', {'min': 1, 'max': 3}),
                comment_interval=group_data.get('comment_interval', {'min': 15, 'max': 30}),
                comment_engagement=group_data.get('comment_engagement', {
                    'likes': {'min': 1, 'max': 3},
                    'reposts': {'min': 2, 'max': 5},
                    'views': {'min': 55, 'max': 100}
                }),
                comment_prompt=group_data.get('comment_prompt', ''),
                
                # –ù–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–ø–æ—Å—Ç—ñ–≤
                use_reposts=group_data.get('use_reposts', False),
                repost_percentage=group_data.get('repost_percentage', 50),
                repost_prompt=group_data.get('repost_prompt', ''),
                
                # –ù–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤
                use_posts=group_data.get('use_posts', False),
                post_percentage=group_data.get('post_percentage', 50),
                post_prompt=group_data.get('post_prompt', ''),
                
                created_at=datetime.now().isoformat(),
                updated_at=datetime.now().isoformat()
            )
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤ JSON —Ñ–∞–π–ª
            json_filename = f"{group_name.lower().replace(' ', '_')}.json"
            json_path = os.path.join(self.config_dir, json_filename)
            
            print(f"üìù –°—Ç–≤–æ—Ä—é—î–º–æ JSON —Ñ–∞–π–ª: {json_path}")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å (–≤–∫–ª—é—á–∞—é—á–∏ –Ω–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏)
            settings_dict = asdict(settings)
            
            try:
                with open(json_path, 'w', encoding='utf-8') as f:
                    json.dump(settings_dict, f, indent=2, ensure_ascii=False)
                
                print(f"‚úÖ JSON —Ñ–∞–π–ª —Å—Ç–≤–æ—Ä–µ–Ω–æ: {json_path}")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ñ–∞–π–ª –¥—ñ–π—Å–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ
                if os.path.exists(json_path):
                    print(f"‚úÖ –§–∞–π–ª —ñ—Å–Ω—É—î –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {json_path}")
                    print(f"üìè –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: {os.path.getsize(json_path)} –±–∞–π—Ç")
                else:
                    print(f"‚ùå –§–∞–π–ª –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {json_path}")
                    print(f"üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —à–ª—è—Ö: {os.path.abspath(json_path)}")
                    print(f"üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é: {os.path.dirname(os.path.abspath(json_path))}")
                    print(f"üîç –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è —ñ—Å–Ω—É—î: {os.path.exists(os.path.dirname(os.path.abspath(json_path)))}")
                    
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è JSON —Ñ–∞–π–ª—É: {e}")
                print(f"üîç –®–ª—è—Ö: {json_path}")
                print(f"üîç –ê–±—Å–æ–ª—é—Ç–Ω–∏–π —à–ª—è—Ö: {os.path.abspath(json_path)}")
                raise
            
            # –î–æ–¥–∞—î–º–æ –≥—Ä—É–ø—É –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            success = add_shilling_group(
                group_name, 
                json_filename, 
                group_data['accounts_google_sheet'],
                group_data['logs_google_sheet']
            )
            
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {success}")
            
            if success:
                # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –≥—Ä—É–ø–∏
                group = ShillingGroup(group_name, settings, self.google_utils)
                self.groups[group_name] = group
                
                print(f"‚úÖ –ì—Ä—É–ø–∞ '{group_name}' —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞")
                return True
            else:
                # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π JSON —Ñ–∞–π–ª
                if os.path.exists(json_path):
                    os.remove(json_path)
                    print(f"üóëÔ∏è JSON —Ñ–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ: {json_path}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä—É–ø–∏: {e}")
            return False
    
    async def update_group(self, group_name: str, group_data: Dict[str, Any]) -> bool:
        """–û–Ω–æ–≤–ª—é—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä—É–ø–∏"""
        try:
            if not await self.group_exists(group_name):
                print(f"‚ùå –ì—Ä—É–ø–∞ '{group_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            current_group = self.groups.get(group_name)
            if current_group and current_group.is_running:
                print(f"‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –æ–Ω–æ–≤–∏—Ç–∏ –∑–∞–ø—É—â–µ–Ω—É –≥—Ä—É–ø—É '{group_name}'")
                return False
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ –Ω–æ–≤–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
            settings = GroupSettings(
                group_name=group_name,
                accounts_google_sheet=group_data['accounts_google_sheet'],
                logs_google_sheet=group_data['logs_google_sheet'],
                delays=group_data['delays'],
                actions_per_run=group_data['actions_per_run'],
                search_keywords=group_data['search_keywords'],
                post_topics=group_data['post_topics'],
                
                # –ù–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: –ü–æ—à—É–∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É
                exclude_keywords=group_data.get('exclude_keywords', []),
                max_search_results=group_data.get('max_search_results', 50),
                search_delay=group_data.get('search_delay', {'min': 5, 'max': 15}),
                
                # –ù–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: –ë–µ–∑–ø–µ–∫–∞
                max_actions_per_hour=group_data.get('max_actions_per_hour', 20),
                max_actions_per_day=group_data.get('max_actions_per_day', 100),
                avoid_same_accounts=group_data.get('avoid_same_accounts', True),
                randomize_timing=group_data.get('randomize_timing', True),
                use_proxy_rotation=group_data.get('use_proxy_rotation', False),
                
                # –ù–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: –õ–æ–≥—É–≤–∞–Ω–Ω—è
                log_all_actions=group_data.get('log_all_actions', True),
                log_errors=group_data.get('log_errors', True),
                log_success_rate=group_data.get('log_success_rate', True),
                save_screenshots=group_data.get('save_screenshots', False),
                
                # –ù–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: –ö–∞—Ä—Ç–∏–Ω–∫–∏ —Ç–∞ –ø–æ—à—É–∫
                use_images=group_data.get('use_images', False),
                images_folder=group_data.get('images_folder', ''),
                search_format=group_data.get('search_format', 'twitter_search'),
                
                # –ù–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: –§—ñ–ª—å—Ç—Ä–∏ –ø–æ—à—É–∫—É
                min_followers=group_data.get('min_followers', 1000),
                min_likes=group_data.get('min_likes', 5),
                min_reposts=group_data.get('min_reposts', 2),
                min_replies=group_data.get('min_replies', 1),
                search_hours=group_data.get('search_hours', 24),
                key_phrases=group_data.get('key_phrases', []),
                
                # –ù–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
                comments_total_limit=group_data.get('comments_total_limit', 2000),
                comments_daily_limit=group_data.get('comments_daily_limit', 100),
                comments_hourly_limit=group_data.get('comments_hourly_limit', 10),
                comments_per_post=group_data.get('comments_per_post', {'min': 1, 'max': 3}),
                comment_interval=group_data.get('comment_interval', {'min': 15, 'max': 30}),
                comment_engagement=group_data.get('comment_engagement', {
                    'likes': {'min': 1, 'max': 3},
                    'reposts': {'min': 2, 'max': 5},
                    'views': {'min': 55, 'max': 100}
                }),
                comment_prompt=group_data.get('comment_prompt', ''),
                
                # –ù–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–ø–æ—Å—Ç—ñ–≤
                use_reposts=group_data.get('use_reposts', False),
                repost_percentage=group_data.get('repost_percentage', 50),
                repost_prompt=group_data.get('repost_prompt', ''),
                
                # –ù–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤
                use_posts=group_data.get('use_posts', False),
                post_percentage=group_data.get('post_percentage', 50),
                post_prompt=group_data.get('post_prompt', ''),
                
                created_at=datetime.now().isoformat(),
                updated_at=datetime.now().isoformat()
            )
            
            # –û–Ω–æ–≤–ª—é—î–º–æ JSON —Ñ–∞–π–ª
            json_filename = f"{group_name.lower().replace(' ', '_')}.json"
            json_path = os.path.join(self.config_dir, json_filename)
            
            print(f"üìù –û–Ω–æ–≤–ª—é—î–º–æ JSON —Ñ–∞–π–ª: {json_path}")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å (–≤–∫–ª—é—á–∞—é—á–∏ –Ω–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏)
            settings_dict = asdict(settings)
            
            with open(json_path, 'w', encoding='utf-8') as f:
                json.dump(settings_dict, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ JSON —Ñ–∞–π–ª –æ–Ω–æ–≤–ª–µ–Ω–æ: {json_path}")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
            success = update_shilling_group(
                group_name, 
                json_filename, 
                group_data['accounts_google_sheet'],
                group_data['logs_google_sheet']
            )
            
            if success:
                # –û–Ω–æ–≤–ª—é—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –≥—Ä—É–ø–∏
                group = ShillingGroup(group_name, settings, self.google_utils)
                self.groups[group_name] = group
                
                print(f"‚úÖ –ì—Ä—É–ø–∞ '{group_name}' —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞")
                return True
            else:
                return False
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä—É–ø–∏: {e}")
            return False
    
    async def delete_group(self, group_name: str) -> bool:
        """–í–∏–¥–∞–ª—è—î –≥—Ä—É–ø—É —à–∏–ª—ñ–Ω–≥—É"""
        try:
            if not await self.group_exists(group_name):
                print(f"‚ùå –ì—Ä—É–ø–∞ '{group_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            # –ó—É–ø–∏–Ω—è—î–º–æ –≥—Ä—É–ø—É —è–∫—â–æ –≤–æ–Ω–∞ –∑–∞–ø—É—â–µ–Ω–∞
            group = self.groups.get(group_name)
            if group and group.is_running:
                await group.stop()
            
            # –í–∏–¥–∞–ª—è—î–º–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            success = delete_shilling_group(group_name)
            
            if success:
                # –í–∏–¥–∞–ª—è—î–º–æ JSON —Ñ–∞–π–ª
                json_filename = f"{group_name.lower().replace(' ', '_')}.json"
                json_path = os.path.join(self.config_dir, json_filename)
                
                if os.path.exists(json_path):
                    os.remove(json_path)
                
                # –í–∏–¥–∞–ª—è—î–º–æ –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
                if group_name in self.groups:
                    del self.groups[group_name]
                
                print(f"‚úÖ –ì—Ä—É–ø–∞ '{group_name}' —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞")
                return True
            else:
                return False
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≥—Ä—É–ø–∏: {e}")
            return False
    
    async def start_group(self, group_name: str) -> bool:
        """–ó–∞–ø—É—Å–∫–∞—î –≥—Ä—É–ø—É —à–∏–ª—ñ–Ω–≥—É"""
        try:
            if not await self.group_exists(group_name):
                print(f"‚ùå –ì—Ä—É–ø–∞ '{group_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            group = self.groups.get(group_name)
            if not group:
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≥—Ä—É–ø—É –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
                await self.load_group_from_database(group_name)
                group = self.groups.get(group_name)
            
            if not group:
                print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≥—Ä—É–ø—É '{group_name}'")
                return False
            
            if group.is_running:
                print(f"‚ö†Ô∏è –ì—Ä—É–ø–∞ '{group_name}' –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
                return False
            
            return await group.start()
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –≥—Ä—É–ø–∏: {e}")
            return False
    
    async def stop_group(self, group_name: str) -> bool:
        """–ó—É–ø–∏–Ω—è—î –≥—Ä—É–ø—É —à–∏–ª—ñ–Ω–≥—É"""
        try:
            group = self.groups.get(group_name)
            if not group:
                print(f"‚ùå –ì—Ä—É–ø–∞ '{group_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            if not group.is_running:
                print(f"‚ö†Ô∏è –ì—Ä—É–ø–∞ '{group_name}' –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")
                return False
            
            return await group.stop()
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ –≥—Ä—É–ø–∏: {e}")
            return False
    
    async def group_exists(self, group_name: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —ñ—Å–Ω—É—î –≥—Ä—É–ø–∞"""
        try:
            group_data = get_shilling_group_by_name(group_name)
            return group_data is not None
        except Exception:
            return False
    
    async def load_group_from_database(self, group_name: str) -> bool:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –≥—Ä—É–ø—É –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        try:
            group_data = get_shilling_group_by_name(group_name)
            if not group_data:
                return False
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ JSON —Ñ–∞–π–ª—É
            json_filename = group_data[2]  # group_settings_json
            json_path = os.path.join(self.config_dir, json_filename)
            
            print(f"üîç –®—É–∫–∞—î–º–æ —Ñ–∞–π–ª –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: {json_path}")
            if not os.path.exists(json_path):
                print(f"‚ùå –§–∞–π–ª –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {json_path}")
                return False
            
            with open(json_path, 'r', encoding='utf-8') as f:
                settings_data = json.load(f)
                print(f"‚úÖ JSON —Ñ–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {json_path}")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑ –Ω–æ–≤–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
            settings = GroupSettings(
                group_name=settings_data['group_name'],
                accounts_google_sheet=settings_data['accounts_google_sheet'],
                logs_google_sheet=settings_data['logs_google_sheet'],
                delays=settings_data['delays'],
                actions_per_run=settings_data['actions_per_run'],
                search_keywords=settings_data['search_keywords'],
                post_topics=settings_data['post_topics'],
                
                # –ù–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: –ü–æ—à—É–∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É
                exclude_keywords=settings_data.get('exclude_keywords', []),
                max_search_results=settings_data.get('max_search_results', 50),
                search_delay=settings_data.get('search_delay', {'min': 5, 'max': 15}),
                
                # –ù–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: –ë–µ–∑–ø–µ–∫–∞
                max_actions_per_hour=settings_data.get('max_actions_per_hour', 20),
                max_actions_per_day=settings_data.get('max_actions_per_day', 100),
                avoid_same_accounts=settings_data.get('avoid_same_accounts', True),
                randomize_timing=settings_data.get('randomize_timing', True),
                use_proxy_rotation=settings_data.get('use_proxy_rotation', False),
                
                # –ù–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: –õ–æ–≥—É–≤–∞–Ω–Ω—è
                log_all_actions=settings_data.get('log_all_actions', True),
                log_errors=settings_data.get('log_errors', True),
                log_success_rate=settings_data.get('log_success_rate', True),
                save_screenshots=settings_data.get('save_screenshots', False),
                
                # –ù–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: –ö–∞—Ä—Ç–∏–Ω–∫–∏ —Ç–∞ –ø–æ—à—É–∫
                use_images=settings_data.get('use_images', False),
                images_folder=settings_data.get('images_folder', ''),
                search_format=settings_data.get('search_format', 'twitter_search'),
                
                # –ù–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: –§—ñ–ª—å—Ç—Ä–∏ –ø–æ—à—É–∫—É
                min_followers=settings_data.get('min_followers', 1000),
                min_likes=settings_data.get('min_likes', 5),
                min_reposts=settings_data.get('min_reposts', 2),
                min_replies=settings_data.get('min_replies', 1),
                search_hours=settings_data.get('search_hours', 24),
                key_phrases=settings_data.get('key_phrases', []),
                
                # –ù–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
                comments_total_limit=settings_data.get('comments_total_limit', 2000),
                comments_daily_limit=settings_data.get('comments_daily_limit', 100),
                comments_hourly_limit=settings_data.get('comments_hourly_limit', 10),
                comments_per_post=settings_data.get('comments_per_post', {'min': 1, 'max': 3}),
                comment_interval=settings_data.get('comment_interval', {'min': 15, 'max': 30}),
                comment_engagement=settings_data.get('comment_engagement', {
                    'likes': {'min': 1, 'max': 3},
                    'reposts': {'min': 2, 'max': 5},
                    'views': {'min': 55, 'max': 100}
                }),
                comment_prompt=settings_data.get('comment_prompt', ''),
                
                # –ù–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–ø–æ—Å—Ç—ñ–≤
                use_reposts=settings_data.get('use_reposts', False),
                repost_percentage=settings_data.get('repost_percentage', 50),
                repost_prompt=settings_data.get('repost_prompt', ''),
                
                # –ù–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤
                use_posts=settings_data.get('use_posts', False),
                post_percentage=settings_data.get('post_percentage', 50),
                post_prompt=settings_data.get('post_prompt', ''),
                
                created_at=settings_data.get('created_at', ''),
                updated_at=settings_data.get('updated_at', '')
            )
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –≥—Ä—É–ø–∏
            group = ShillingGroup(group_name, settings, self.google_utils)
            self.groups[group_name] = group
            
            return True
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≥—Ä—É–ø–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
            return False
    
    async def get_all_groups(self) -> List[Dict[str, Any]]:
        """–û—Ç—Ä–∏–º—É—î –≤—Å—ñ –≥—Ä—É–ø–∏"""
        try:
            groups_data = get_all_shilling_groups()
            result = []
            
            for group_data in groups_data:
                group_info = {
                    'id': group_data[0],
                    'group_name': group_data[1],
                    'json_filename': group_data[2],
                    'accounts_sheet': group_data[3],
                    'logs_sheet': group_data[4],
                    'created_at': group_data[5],
                    'updated_at': group_data[6],
                    'is_active': group_data[7],
                    'is_running': False
                }
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≥—Ä—É–ø–∞ –∑–∞–ø—É—â–µ–Ω–∞
                group = self.groups.get(group_data[1])
                if group:
                    group_info['is_running'] = group.is_running
                
                result.append(group_info)
            
            return result
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥—Ä—É–ø: {e}")
            return []
    
    async def get_group_status(self, group_name: str) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç—É—Å –≥—Ä—É–ø–∏"""
        try:
            group = self.groups.get(group_name)
            if not group:
                return {'exists': False}
            
            return group.get_status()
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≥—Ä—É–ø–∏: {e}")
            return {'exists': False, 'error': str(e)}

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
group_manager = ShillingGroupManager()
